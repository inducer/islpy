import enum
from typing import overload


class AccessInfo:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`AccessInfo`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def compute_flow(self) -> object:
        """
        compute_flow(self)

        :param self: :class:`AccessInfo` (:ref:`becomes invalid <auto-invalidation>`)
        :return: :class:`Flow`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Aff:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    @staticmethod
    def zero_on_domain_space(space: Space) -> object:
        """
        zero_on_domain_space(space)

        :param space: :class:`Space`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def zero_on_domain(ls: LocalSpace) -> object:
        """
        zero_on_domain(ls)

        :param ls: :class:`LocalSpace`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def val_on_domain_space(space: Space, val: object) -> object:
        """
        val_on_domain_space(space, val)

        :param space: :class:`Space`
        :param val: :class:`Val`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def val_on_domain(ls: LocalSpace, val: object) -> object:
        """
        val_on_domain(ls, val)

        :param ls: :class:`LocalSpace`
        :param val: :class:`Val`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def var_on_domain(ls: LocalSpace, type: dim_type, pos: int) -> object:
        """
        var_on_domain(ls, type, pos)

        :param ls: :class:`LocalSpace`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def nan_on_domain_space(space: Space) -> object:
        """
        nan_on_domain_space(space)

        :param space: :class:`Space`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def nan_on_domain(ls: LocalSpace) -> object:
        """
        nan_on_domain(ls)

        :param ls: :class:`LocalSpace`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def param_on_domain_space_id(space: Space, id: Id) -> object:
        """
        param_on_domain_space_id(space, id)

        :param space: :class:`Space`
        :param id: :class:`Id`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`Aff`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def copy(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def copy(self) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @overload
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Aff`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_ctx(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def get_ctx(self) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    def __hash__(self) -> int:
        """
        get_hash(self)

        :param self: :class:`Aff`
        :return: uint32_t 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_locals(self) -> bool:
        """
        involves_locals(self)

        :param self: :class:`Aff`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`Aff`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dim(self, arg: dim_type, /) -> int:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def dim(self, arg: dim_type, /) -> int:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @overload
    def involves_dims(self, type: dim_type, first: int, n: int) -> bool:
        """
        involves_dims(self, type, first, n)

        :param self: :class:`Aff`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def involves_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> bool:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def get_domain_space(self) -> object:
        """
        get_domain_space(self)

        :param self: :class:`Aff`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_domain_space(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`Aff`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_space(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def get_space(self) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    def get_domain_local_space(self) -> object:
        """
        get_domain_local_space(self)

        :param self: :class:`Aff`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_local_space(self) -> object:
        """
        get_local_space(self)

        :param self: :class:`Aff`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_dim_name(self, type: dim_type, pos: int) -> object:
        """
        get_dim_name(self, type, pos)

        :param self: :class:`Aff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_dim_name(self, arg0: dim_type, arg1: int, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def get_constant_val(self) -> object:
        """
        get_constant_val(self)

        :param self: :class:`Aff`
        :return: :class:`Val`
        """

    def get_coefficient_val(self, type: dim_type, pos: int) -> object:
        """
        get_coefficient_val(self, type, pos)

        :param self: :class:`Aff`
        :param type: :class:`dim_type`
        :param pos: :class:`int`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def coefficient_sgn(self, type: dim_type, pos: int) -> int:
        """
        coefficient_sgn(self, type, pos)

        :param self: :class:`Aff`
        :param type: :class:`dim_type`
        :param pos: :class:`int`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_denominator_val(self) -> object:
        """
        get_denominator_val(self)

        :param self: :class:`Aff`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_constant_val(self, v: object) -> object:
        """
        set_constant_val(self, v)

        :param self: :class:`Aff`
        :param v: :class:`Val`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_coefficient_val(self, type: dim_type, pos: int, v: object) -> object:
        """
        set_coefficient_val(self, type, pos, v)

        :param self: :class:`Aff`
        :param type: :class:`dim_type`
        :param pos: :class:`int`
        :param v: :class:`Val`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def add_constant_val(self, v: object) -> object:
        """
        add_constant_val(self, v)

        :param self: :class:`Aff`
        :param v: :class:`Val`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def add_constant_val(self, arg: object, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def add_constant_num_si(self, v: int) -> object:
        """
        add_constant_num_si(self, v)

        :param self: :class:`Aff`
        :param v: :class:`int`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_coefficient_val(self, type: dim_type, pos: int, v: object) -> object:
        """
        add_coefficient_val(self, type, pos, v)

        :param self: :class:`Aff`
        :param type: :class:`dim_type`
        :param pos: :class:`int`
        :param v: :class:`Val`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def is_cst(self) -> bool:
        """
        is_cst(self)

        :param self: :class:`Aff`
        :return: bool
        """

    @overload
    def is_cst(self) -> bool:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def set_tuple_id(self, type: dim_type, id: Id) -> object:
        """
        set_tuple_id(self, type, id)

        :param self: :class:`Aff`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_tuple_id(self, arg0: dim_type, arg1: Id, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def set_dim_name(self, type: dim_type, pos: int, s: str) -> object:
        """
        set_dim_name(self, type, pos, s)

        :param self: :class:`Aff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param s: string
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_dim_name(self, arg0: dim_type, arg1: int, arg2: str, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @overload
    def set_dim_id(self, type: dim_type, pos: int, id: Id) -> object:
        """
        set_dim_id(self, type, pos, id)

        :param self: :class:`Aff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param id: :class:`Id`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_dim_id(self, arg0: dim_type, arg1: int, arg2: Id, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`Aff`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def find_dim_by_name(self, arg0: dim_type, arg1: str, /) -> int:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def find_dim_by_name(self, arg0: dim_type, arg1: str, /) -> int:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @overload
    def plain_is_equal(self, aff2: Aff) -> bool:
        """
        plain_is_equal(self, aff2)

        :param self: :class:`Aff`
        :param aff2: :class:`Aff`
        :return: bool
        """

    @overload
    def plain_is_equal(self, arg: PwAff, /) -> bool:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def plain_is_equal(self, arg: UnionPwAff, /) -> bool:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    def plain_is_zero(self) -> bool:
        """
        plain_is_zero(self)

        :param self: :class:`Aff`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_nan(self) -> bool:
        """
        is_nan(self)

        :param self: :class:`Aff`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_div(self, pos: int) -> object:
        """
        get_div(self, pos)

        :param self: :class:`Aff`
        :param pos: :class:`int`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def from_range(self) -> object:
        """
        from_range(self)

        :param self: :class:`Aff`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def from_range(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`Aff`
        :return: :class:`Aff`
        """

    @overload
    def neg(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def neg(self) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @overload
    def ceil(self) -> object:
        """
        ceil(self)

        :param self: :class:`Aff`
        :return: :class:`Aff`
        """

    @overload
    def ceil(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def floor(self) -> object:
        """
        floor(self)

        :param self: :class:`Aff`
        :return: :class:`Aff`
        """

    @overload
    def floor(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def floor(self) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @overload
    def mod_val(self, mod: object) -> object:
        """
        mod_val(self, mod)

        :param self: :class:`Aff`
        :param mod: :class:`Val`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def mod_val(self, arg: object, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def mod_val(self, arg: object, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @overload
    def mul(self, aff2: Aff) -> object:
        """
        mul(self, aff2)

        :param self: :class:`Aff`
        :param aff2: :class:`Aff`
        :return: :class:`Aff`
        """

    @overload
    def mul(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def div(self, aff2: Aff) -> object:
        """
        div(self, aff2)

        :param self: :class:`Aff`
        :param aff2: :class:`Aff`
        :return: :class:`Aff`
        """

    @overload
    def div(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def add(self, aff2: Aff) -> object:
        """
        add(self, aff2)

        :param self: :class:`Aff`
        :param aff2: :class:`Aff`
        :return: :class:`Aff`
        """

    @overload
    def add(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def add(self, arg: UnionPwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @overload
    def sub(self, aff2: Aff) -> object:
        """
        sub(self, aff2)

        :param self: :class:`Aff`
        :param aff2: :class:`Aff`
        :return: :class:`Aff`
        """

    @overload
    def sub(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def sub(self, arg: UnionPwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @overload
    def scale_val(self, v: object) -> object:
        """
        scale_val(self, v)

        :param self: :class:`Aff`
        :param v: :class:`Val`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def scale_val(self, arg: object, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def scale_val(self, arg: object, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @overload
    def scale_down_val(self, v: object) -> object:
        """
        scale_down_val(self, v)

        :param self: :class:`Aff`
        :param v: :class:`Val`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def scale_down_val(self, arg: object, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def scale_down_val(self, arg: object, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @overload
    def domain_reverse(self) -> object:
        """
        domain_reverse(self)

        :param self: :class:`Aff`
        :return: :class:`Aff`
        """

    @overload
    def domain_reverse(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def insert_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        insert_dims(self, type, first, n)

        :param self: :class:`Aff`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def insert_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def add_dims(self, type: dim_type, n: int) -> object:
        """
        add_dims(self, type, n)

        :param self: :class:`Aff`
        :param type: :class:`dim_type`
        :param n: :class:`unsigned`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def add_dims(self, arg0: dim_type, arg1: int, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def move_dims(self, dst_type: dim_type, dst_pos: int, src_type: dim_type, src_pos: int, n: int) -> object:
        """
        move_dims(self, dst_type, dst_pos, src_type, src_pos, n)

        :param self: :class:`Aff`
        :param dst_type: :class:`dim_type`
        :param dst_pos: :class:`unsigned`
        :param src_type: :class:`dim_type`
        :param src_pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def move_dims(self, arg0: dim_type, arg1: int, arg2: dim_type, arg3: int, arg4: int, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def drop_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_dims(self, type, first, n)

        :param self: :class:`Aff`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def drop_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def drop_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @overload
    def project_domain_on_params(self) -> object:
        """
        project_domain_on_params(self)

        :param self: :class:`Aff`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def project_domain_on_params(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def unbind_params_insert_domain(self, domain: MultiId) -> object:
        """
        unbind_params_insert_domain(self, domain)

        :param self: :class:`Aff`
        :param domain: :class:`MultiId`
        :return: :class:`Aff`
        """

    @overload
    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`Aff`
        :param model: :class:`Space`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def align_params(self, arg: Space, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def align_params(self, arg: Space, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @overload
    def gist(self, context: Set) -> object:
        """
        gist(self, context)

        :param self: :class:`Aff`
        :param context: :class:`Set`
        :return: :class:`Aff`
        """

    @overload
    def gist(self, arg: Set, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def gist(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @overload
    def gist_params(self, context: Set) -> object:
        """
        gist_params(self, context)

        :param self: :class:`Aff`
        :param context: :class:`Set`
        :return: :class:`Aff`
        """

    @overload
    def gist_params(self, arg: Set, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def gist_params(self, arg: Set, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @overload
    def eval(self, pnt: Point) -> object:
        """
        eval(self, pnt)

        :param self: :class:`Aff`
        :param pnt: :class:`Point`
        :return: :class:`Val`
        """

    @overload
    def eval(self, arg: Point, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def pullback_aff(self, aff2: Aff) -> object:
        """
        pullback_aff(self, aff2)

        :param self: :class:`Aff`
        :param aff2: :class:`Aff`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def pullback_multi_aff(self, ma: MultiAff) -> object:
        """
        pullback_multi_aff(self, ma)

        :param self: :class:`Aff`
        :param ma: :class:`MultiAff`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def pullback_multi_aff(self, arg: MultiAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def zero_basic_set(self) -> object:
        """
        zero_basic_set(self)

        :param self: :class:`Aff`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def neg_basic_set(self) -> object:
        """
        neg_basic_set(self)

        :param self: :class:`Aff`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def eq_basic_set(self, aff2: Aff) -> object:
        """
        eq_basic_set(self, aff2)

        :param self: :class:`Aff`
        :param aff2: :class:`Aff`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def eq_set(self, aff2: Aff) -> object:
        """
        eq_set(self, aff2)

        :param self: :class:`Aff`
        :param aff2: :class:`Aff`
        :return: :class:`Set`
        """

    @overload
    def eq_set(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def ne_set(self, aff2: Aff) -> object:
        """
        ne_set(self, aff2)

        :param self: :class:`Aff`
        :param aff2: :class:`Aff`
        :return: :class:`Set`
        """

    @overload
    def ne_set(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def le_basic_set(self, aff2: Aff) -> object:
        """
        le_basic_set(self, aff2)

        :param self: :class:`Aff`
        :param aff2: :class:`Aff`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def le_set(self, aff2: Aff) -> object:
        """
        le_set(self, aff2)

        :param self: :class:`Aff`
        :param aff2: :class:`Aff`
        :return: :class:`Set`
        """

    @overload
    def le_set(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def lt_basic_set(self, aff2: Aff) -> object:
        """
        lt_basic_set(self, aff2)

        :param self: :class:`Aff`
        :param aff2: :class:`Aff`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def lt_set(self, aff2: Aff) -> object:
        """
        lt_set(self, aff2)

        :param self: :class:`Aff`
        :param aff2: :class:`Aff`
        :return: :class:`Set`
        """

    @overload
    def lt_set(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def ge_basic_set(self, aff2: Aff) -> object:
        """
        ge_basic_set(self, aff2)

        :param self: :class:`Aff`
        :param aff2: :class:`Aff`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def ge_set(self, aff2: Aff) -> object:
        """
        ge_set(self, aff2)

        :param self: :class:`Aff`
        :param aff2: :class:`Aff`
        :return: :class:`Set`
        """

    @overload
    def ge_set(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def gt_basic_set(self, aff2: Aff) -> object:
        """
        gt_basic_set(self, aff2)

        :param self: :class:`Aff`
        :param aff2: :class:`Aff`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def gt_set(self, aff2: Aff) -> object:
        """
        gt_set(self, aff2)

        :param self: :class:`Aff`
        :param aff2: :class:`Aff`
        :return: :class:`Set`
        """

    @overload
    def gt_set(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def bind_id(self, id: Id) -> object:
        """
        bind_id(self, id)

        :param self: :class:`Aff`
        :param id: :class:`Id`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def bind_id(self, arg: Id, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def bind_id(self, arg: Id, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`Aff`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def to_str(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def to_str(self) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @overload
    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`Aff`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dump(self) -> None:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def dump(self) -> None:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    @overload
    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`Aff`
        :return: :class:`AffList`
        """

    @overload
    def to_list(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    @overload
    def to_list(self) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    def get_hash(self) -> int:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def has_dim_id(self, arg0: dim_type, arg1: int, /) -> bool:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def get_dim_id(self, arg0: dim_type, arg1: int, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def is_empty(self) -> bool:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def involves_nan(self) -> bool:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def plain_cmp(self, arg: PwAff, /) -> int:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def is_equal(self, arg: PwAff, /) -> bool:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def union_min(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def union_max(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def union_add(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def involves_param_id(self, arg: Id, /) -> bool:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def insert_domain(self, arg: Space, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def drop_unused_params(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def has_tuple_id(self, arg: dim_type, /) -> bool:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def get_tuple_id(self, arg: dim_type, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def reset_tuple_id(self, arg: dim_type, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def reset_user(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def params(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def domain(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def min(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def max(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def tdiv_q(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def tdiv_r(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def intersect_params(self, arg: Set, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def intersect_domain(self, arg: Set, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def intersect_domain_wrapped_domain(self, arg: Set, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def intersect_domain_wrapped_range(self, arg: Set, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def subtract_domain(self, arg: Set, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def cond(self, arg0: PwAff, arg1: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def coalesce(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def pullback_pw_multi_aff(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def pullback_multi_pw_aff(self, arg: MultiPwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def n_piece(self) -> int:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def foreach_piece(self, arg: object, /) -> stat:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def every_piece(self, arg: object, /) -> bool:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def isa_aff(self) -> bool:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def as_aff(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def as_map(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def pos_set(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def nonneg_set(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def zero_set(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def non_zero_set(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def eq_map(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def le_map(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def lt_map(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def ge_map(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def gt_map(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def bind_domain(self, arg: MultiId, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def bind_domain_wrapped_domain(self, arg: MultiId, /) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def to_union_pw_aff(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def min_val(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def max_val(self) -> object:
        """Upcast from :class:`Aff` to :class:`PwAff`"""

    def get_pw_aff_list(self) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    def add_pw_aff(self, arg: PwAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    def n_pw_aff(self) -> int:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    def foreach_pw_aff(self, arg: object, /) -> stat:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    def every_pw_aff(self, arg: object, /) -> bool:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    def extract_pw_aff(self, arg: Space, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    def pullback_union_pw_multi_aff(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    def intersect_domain_space(self, arg: Space, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    def intersect_domain_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    def subtract_domain_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    def subtract_domain_space(self, arg: Space, /) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

    def zero_union_set(self) -> object:
        """Upcast from :class:`Aff` to :class:`UnionPwAff`"""

class AffList:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`AffList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_aff(el: Aff) -> object:
        """
        from_aff(el)

        :param el: :class:`Aff`
        :return: :class:`AffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`AffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`AffList`
        :return: :class:`AffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: Aff) -> object:
        """
        add(self, el)

        :param self: :class:`AffList`
        :param el: :class:`Aff`
        :return: :class:`AffList`
        """

    def insert(self, pos: int, el: Aff) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`AffList`
        :param pos: :class:`unsigned`
        :param el: :class:`Aff`
        :return: :class:`AffList`
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`AffList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`AffList`
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`AffList`
        :return: :class:`AffList`
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`AffList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`AffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`AffList`
        :return: :class:`AffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: AffList) -> object:
        """
        concat(self, list2)

        :param self: :class:`AffList`
        :param list2: :class:`AffList`
        :return: :class:`AffList`
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`AffList`
        :return: isl_size
        """

    def n_aff(self) -> int:
        """
        n_aff(self)

        :param self: :class:`AffList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`AffList`
        :param index: :class:`int`
        :return: :class:`Aff`
        """

    def get_aff(self, index: int) -> object:
        """
        get_aff(self, index)

        :param self: :class:`AffList`
        :param index: :class:`int`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: Aff) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`AffList`
        :param index: :class:`int`
        :param el: :class:`Aff`
        :return: :class:`AffList`
        """

    def set_aff(self, index: int, el: Aff) -> object:
        """
        set_aff(self, index, el)

        :param self: :class:`AffList`
        :param index: :class:`int`
        :param el: :class:`Aff`
        :return: :class:`AffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`AffList`
        :param fn: callback(el)
        :return: isl_stat
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`AffList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`AffList`
        :param fn: callback(el)
        :return: :class:`AffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`AffList`
        :param cmp: callback(a, b)
        :return: :class:`AffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`AffList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`AffList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`AffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class AstBuild:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`AstBuild`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context) -> object:
        """
        alloc(ctx)

        :param ctx: :class:`Context`
        :return: :class:`AstBuild`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_context(set: Set) -> object:
        """
        from_context(set)

        :param set: :class:`Set`
        :return: :class:`AstBuild`
        """

    def get_schedule_space(self) -> object:
        """
        get_schedule_space(self)

        :param self: :class:`AstBuild`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_schedule(self) -> object:
        """
        get_schedule(self)

        :param self: :class:`AstBuild`
        :return: :class:`UnionMap`
        """

    def restrict(self, set: Set) -> object:
        """
        restrict(self, set)

        :param self: :class:`AstBuild`
        :param set: :class:`Set`
        :return: :class:`AstBuild`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`AstBuild`
        :return: :class:`AstBuild`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_options(self, options: UnionMap) -> object:
        """
        set_options(self, options)

        :param self: :class:`AstBuild`
        :param options: :class:`UnionMap`
        :return: :class:`AstBuild`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_iterators(self, iterators: IdList) -> object:
        """
        set_iterators(self, iterators)

        :param self: :class:`AstBuild`
        :param iterators: :class:`IdList`
        :return: :class:`AstBuild`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at_each_domain(self, fn: object) -> object:
        """
        set_at_each_domain(self, fn)

        :param self: :class:`AstBuild`
        :param fn: callback(node, build)
        :return: tuple: (:class:`AstBuild`, (opaque handle to manage callback lifetime))
        """

    def set_before_each_for(self, fn: object) -> object:
        """
        set_before_each_for(self, fn)

        :param self: :class:`AstBuild`
        :param fn: callback(build)
        :return: tuple: (:class:`AstBuild`, (opaque handle to manage callback lifetime))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_after_each_for(self, fn: object) -> object:
        """
        set_after_each_for(self, fn)

        :param self: :class:`AstBuild`
        :param fn: callback(node, build)
        :return: tuple: (:class:`AstBuild`, (opaque handle to manage callback lifetime))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_before_each_mark(self, fn: object) -> object:
        """
        set_before_each_mark(self, fn)

        :param self: :class:`AstBuild`
        :param fn: callback(mark, build)
        :return: tuple: (:class:`AstBuild`, (opaque handle to manage callback lifetime))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_after_each_mark(self, fn: object) -> object:
        """
        set_after_each_mark(self, fn)

        :param self: :class:`AstBuild`
        :param fn: callback(node, build)
        :return: tuple: (:class:`AstBuild`, (opaque handle to manage callback lifetime))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_create_leaf(self, fn: object) -> object:
        """
        set_create_leaf(self, fn)

        :param self: :class:`AstBuild`
        :param fn: callback(build)
        :return: tuple: (:class:`AstBuild`, (opaque handle to manage callback lifetime))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def expr_from_set(self, set: Set) -> object:
        """
        expr_from_set(self, set)

        :param self: :class:`AstBuild`
        :param set: :class:`Set`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def expr_from_pw_aff(self, pa: PwAff) -> object:
        """
        expr_from_pw_aff(self, pa)

        :param self: :class:`AstBuild`
        :param pa: :class:`PwAff`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def access_from_pw_multi_aff(self, pma: PwMultiAff) -> object:
        """
        access_from_pw_multi_aff(self, pma)

        :param self: :class:`AstBuild`
        :param pma: :class:`PwMultiAff`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def access_from_multi_pw_aff(self, mpa: MultiPwAff) -> object:
        """
        access_from_multi_pw_aff(self, mpa)

        :param self: :class:`AstBuild`
        :param mpa: :class:`MultiPwAff`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def call_from_pw_multi_aff(self, pma: PwMultiAff) -> object:
        """
        call_from_pw_multi_aff(self, pma)

        :param self: :class:`AstBuild`
        :param pma: :class:`PwMultiAff`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def call_from_multi_pw_aff(self, mpa: MultiPwAff) -> object:
        """
        call_from_multi_pw_aff(self, mpa)

        :param self: :class:`AstBuild`
        :param mpa: :class:`MultiPwAff`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def node_from_schedule(self, schedule: Schedule) -> object:
        """
        node_from_schedule(self, schedule)

        :param self: :class:`AstBuild`
        :param schedule: :class:`Schedule`
        :return: :class:`AstNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def node_from_schedule_map(self, schedule: UnionMap) -> object:
        """
        node_from_schedule_map(self, schedule)

        :param self: :class:`AstBuild`
        :param schedule: :class:`UnionMap`
        :return: :class:`AstNode`
        """

    def ast_from_schedule(self, schedule: UnionMap) -> object:
        """
        ast_from_schedule(self, schedule)

        :param self: :class:`AstBuild`
        :param schedule: :class:`UnionMap`
        :return: :class:`AstNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class AstExpr:
    @staticmethod
    def from_val(v: Val) -> object:
        """
        from_val(v)

        :param v: :class:`Val`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_id(id: Id) -> object:
        """
        from_id(id)

        :param id: :class:`Id`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`AstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, expr2: AstExpr) -> object:
        """
        add(self, expr2)

        :param self: :class:`AstExpr`
        :param expr2: :class:`AstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sub(self, expr2: AstExpr) -> object:
        """
        sub(self, expr2)

        :param self: :class:`AstExpr`
        :param expr2: :class:`AstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def mul(self, expr2: AstExpr) -> object:
        """
        mul(self, expr2)

        :param self: :class:`AstExpr`
        :param expr2: :class:`AstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def div(self, expr2: AstExpr) -> object:
        """
        div(self, expr2)

        :param self: :class:`AstExpr`
        :param expr2: :class:`AstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def pdiv_q(self, expr2: AstExpr) -> object:
        """
        pdiv_q(self, expr2)

        :param self: :class:`AstExpr`
        :param expr2: :class:`AstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def pdiv_r(self, expr2: AstExpr) -> object:
        """
        pdiv_r(self, expr2)

        :param self: :class:`AstExpr`
        :param expr2: :class:`AstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def and_then(self, expr2: AstExpr) -> object:
        """
        and_then(self, expr2)

        :param self: :class:`AstExpr`
        :param expr2: :class:`AstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def or_else(self, expr2: AstExpr) -> object:
        """
        or_else(self, expr2)

        :param self: :class:`AstExpr`
        :param expr2: :class:`AstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def le(self, expr2: AstExpr) -> object:
        """
        le(self, expr2)

        :param self: :class:`AstExpr`
        :param expr2: :class:`AstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lt(self, expr2: AstExpr) -> object:
        """
        lt(self, expr2)

        :param self: :class:`AstExpr`
        :param expr2: :class:`AstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def ge(self, expr2: AstExpr) -> object:
        """
        ge(self, expr2)

        :param self: :class:`AstExpr`
        :param expr2: :class:`AstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gt(self, expr2: AstExpr) -> object:
        """
        gt(self, expr2)

        :param self: :class:`AstExpr`
        :param expr2: :class:`AstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def eq(self, expr2: AstExpr) -> object:
        """
        eq(self, expr2)

        :param self: :class:`AstExpr`
        :param expr2: :class:`AstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def access(self, indices: AstExprList) -> object:
        """
        access(self, indices)

        :param self: :class:`AstExpr`
        :param indices: :class:`AstExprList`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def call(self, arguments: AstExprList) -> object:
        """
        call(self, arguments)

        :param self: :class:`AstExpr`
        :param arguments: :class:`AstExprList`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def address_of(self) -> object:
        """
        address_of(self)

        :param self: :class:`AstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`AstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`AstExpr`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_type(self) -> ast_expr_type:
        """
        get_type(self)

        :param self: :class:`AstExpr`
        :return: isl_ast_expr_type 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def int_get_val(self) -> object:
        """
        int_get_val(self)

        :param self: :class:`AstExpr`
        :return: :class:`Val`
        """

    def get_val(self) -> object:
        """
        get_val(self)

        :param self: :class:`AstExpr`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def id_get_id(self) -> object:
        """
        id_get_id(self)

        :param self: :class:`AstExpr`
        :return: :class:`Id`
        """

    def get_id(self) -> object:
        """
        get_id(self)

        :param self: :class:`AstExpr`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def op_get_type(self) -> ast_expr_op_type:
        """
        op_get_type(self)

        :param self: :class:`AstExpr`
        :return: isl_ast_expr_op_type 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_op_type(self) -> ast_expr_op_type:
        """
        get_op_type(self)

        :param self: :class:`AstExpr`
        :return: isl_ast_expr_op_type 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def op_get_n_arg(self) -> int:
        """
        op_get_n_arg(self)

        :param self: :class:`AstExpr`
        :return: isl_size
        """

    def get_op_n_arg(self) -> int:
        """
        get_op_n_arg(self)

        :param self: :class:`AstExpr`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def op_get_arg(self, pos: int) -> object:
        """
        op_get_arg(self, pos)

        :param self: :class:`AstExpr`
        :param pos: :class:`int`
        :return: :class:`AstExpr`
        """

    def get_op_arg(self, pos: int) -> object:
        """
        get_op_arg(self, pos)

        :param self: :class:`AstExpr`
        :param pos: :class:`int`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_op_arg(self, pos: int, arg: AstExpr) -> object:
        """
        set_op_arg(self, pos, arg)

        :param self: :class:`AstExpr`
        :param pos: :class:`int`
        :param arg: :class:`AstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_equal(self, expr2: AstExpr) -> bool:
        """
        is_equal(self, expr2)

        :param self: :class:`AstExpr`
        :param expr2: :class:`AstExpr`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def substitute_ids(self, id2expr: IdToAstExpr) -> object:
        """
        substitute_ids(self, id2expr)

        :param self: :class:`AstExpr`
        :param id2expr: :class:`IdToAstExpr`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`AstExpr`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`AstExpr`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_C_str(self) -> object:
        """
        to_C_str(self)

        :param self: :class:`AstExpr`
        :return: string
        """

    @staticmethod
    def op_type_set_print_name(p: Printer, type: ast_expr_op_type, name: str) -> object:
        """
        op_type_set_print_name(p, type, name)

        :param p: :class:`Printer` (:ref:`becomes invalid <auto-invalidation>`)
        :param type: :class:`ast_expr_op_type`
        :param name: string
        :return: :class:`Printer`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def op_type_print_macro(self, p: Printer) -> object:
        """
        op_type_print_macro(self, p)

        :param self: :class:`ast_expr_op_type`
        :param p: :class:`Printer` (:ref:`becomes invalid <auto-invalidation>`)
        :return: :class:`Printer`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_macros(self, p: Printer) -> object:
        """
        print_macros(self, p)

        :param self: :class:`AstExpr`
        :param p: :class:`Printer` (:ref:`becomes invalid <auto-invalidation>`)
        :return: :class:`Printer`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`AstExpr`
        :return: :class:`AstExprList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class AstExprList:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`AstExprList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_ast_expr(el: AstExpr) -> object:
        """
        from_ast_expr(el)

        :param el: :class:`AstExpr`
        :return: :class:`AstExprList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`AstExprList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`AstExprList`
        :return: :class:`AstExprList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: AstExpr) -> object:
        """
        add(self, el)

        :param self: :class:`AstExprList`
        :param el: :class:`AstExpr`
        :return: :class:`AstExprList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert(self, pos: int, el: AstExpr) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`AstExprList`
        :param pos: :class:`unsigned`
        :param el: :class:`AstExpr`
        :return: :class:`AstExprList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`AstExprList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`AstExprList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`AstExprList`
        :return: :class:`AstExprList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`AstExprList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`AstExprList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`AstExprList`
        :return: :class:`AstExprList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: AstExprList) -> object:
        """
        concat(self, list2)

        :param self: :class:`AstExprList`
        :param list2: :class:`AstExprList`
        :return: :class:`AstExprList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`AstExprList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_ast_expr(self) -> int:
        """
        n_ast_expr(self)

        :param self: :class:`AstExprList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`AstExprList`
        :param index: :class:`int`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ast_expr(self, index: int) -> object:
        """
        get_ast_expr(self, index)

        :param self: :class:`AstExprList`
        :param index: :class:`int`
        :return: :class:`AstExpr`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: AstExpr) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`AstExprList`
        :param index: :class:`int`
        :param el: :class:`AstExpr`
        :return: :class:`AstExprList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_ast_expr(self, index: int, el: AstExpr) -> object:
        """
        set_ast_expr(self, index, el)

        :param self: :class:`AstExprList`
        :param index: :class:`int`
        :param el: :class:`AstExpr`
        :return: :class:`AstExprList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`AstExprList`
        :param fn: callback(el)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`AstExprList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`AstExprList`
        :param fn: callback(el)
        :return: :class:`AstExprList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`AstExprList`
        :param cmp: callback(a, b)
        :return: :class:`AstExprList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`AstExprList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`AstExprList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class AstNode:
    @staticmethod
    def user_from_expr(expr: AstExpr) -> object:
        """
        user_from_expr(expr)

        :param expr: :class:`AstExpr`
        :return: :class:`AstNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc_user(expr: AstExpr) -> object:
        """
        alloc_user(expr)

        :param expr: :class:`AstExpr`
        :return: :class:`AstNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`AstNode`
        :return: :class:`AstNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`AstNode`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_type(self) -> ast_node_type:
        """
        get_type(self)

        :param self: :class:`AstNode`
        :return: isl_ast_node_type 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_annotation(self, annotation: Id) -> object:
        """
        set_annotation(self, annotation)

        :param self: :class:`AstNode`
        :param annotation: :class:`Id`
        :return: :class:`AstNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_annotation(self) -> object:
        """
        get_annotation(self)

        :param self: :class:`AstNode`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def for_get_iterator(self) -> object:
        """
        for_get_iterator(self)

        :param self: :class:`AstNode`
        :return: :class:`AstExpr`
        """

    def for_get_init(self) -> object:
        """
        for_get_init(self)

        :param self: :class:`AstNode`
        :return: :class:`AstExpr`
        """

    def for_get_cond(self) -> object:
        """
        for_get_cond(self)

        :param self: :class:`AstNode`
        :return: :class:`AstExpr`
        """

    def for_get_inc(self) -> object:
        """
        for_get_inc(self)

        :param self: :class:`AstNode`
        :return: :class:`AstExpr`
        """

    def for_get_body(self) -> object:
        """
        for_get_body(self)

        :param self: :class:`AstNode`
        :return: :class:`AstNode`
        """

    def for_is_degenerate(self) -> bool:
        """
        for_is_degenerate(self)

        :param self: :class:`AstNode`
        :return: bool
        """

    def if_get_cond(self) -> object:
        """
        if_get_cond(self)

        :param self: :class:`AstNode`
        :return: :class:`AstExpr`
        """

    def if_get_then_node(self) -> object:
        """
        if_get_then_node(self)

        :param self: :class:`AstNode`
        :return: :class:`AstNode`
        """

    def if_get_then(self) -> object:
        """
        if_get_then(self)

        :param self: :class:`AstNode`
        :return: :class:`AstNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def if_has_else_node(self) -> bool:
        """
        if_has_else_node(self)

        :param self: :class:`AstNode`
        :return: bool
        """

    def if_has_else(self) -> bool:
        """
        if_has_else(self)

        :param self: :class:`AstNode`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def if_get_else_node(self) -> object:
        """
        if_get_else_node(self)

        :param self: :class:`AstNode`
        :return: :class:`AstNode`
        """

    def if_get_else(self) -> object:
        """
        if_get_else(self)

        :param self: :class:`AstNode`
        :return: :class:`AstNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def block_from_children(self) -> object:
        """
        block_from_children(self)

        :param self: :class:`AstNodeList`
        :return: :class:`AstNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def block_get_children(self) -> object:
        """
        block_get_children(self)

        :param self: :class:`AstNode`
        :return: :class:`AstNodeList`
        """

    def mark_get_id(self) -> object:
        """
        mark_get_id(self)

        :param self: :class:`AstNode`
        :return: :class:`Id`
        """

    def mark_get_node(self) -> object:
        """
        mark_get_node(self)

        :param self: :class:`AstNode`
        :return: :class:`AstNode`
        """

    def user_get_expr(self) -> object:
        """
        user_get_expr(self)

        :param self: :class:`AstNode`
        :return: :class:`AstExpr`
        """

    def foreach_descendant_top_down(self, fn: object) -> stat:
        """
        foreach_descendant_top_down(self, fn)

        :param self: :class:`AstNode`
        :param fn: callback(node)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map_descendant_bottom_up(self, fn: object) -> object:
        """
        map_descendant_bottom_up(self, fn)

        :param self: :class:`AstNode`
        :param fn: callback(node)
        :return: :class:`AstNode`
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`AstNode`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`AstNode`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_macros(self, p: Printer) -> object:
        """
        print_macros(self, p)

        :param self: :class:`AstNode`
        :param p: :class:`Printer` (:ref:`becomes invalid <auto-invalidation>`)
        :return: :class:`Printer`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def for_print(self, p: Printer, options: AstPrintOptions) -> object:
        """
        for_print(self, p, options)

        :param self: :class:`AstNode`
        :param p: :class:`Printer` (:ref:`becomes invalid <auto-invalidation>`)
        :param options: :class:`AstPrintOptions`
        :return: :class:`Printer`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def if_print(self, p: Printer, options: AstPrintOptions) -> object:
        """
        if_print(self, p, options)

        :param self: :class:`AstNode`
        :param p: :class:`Printer` (:ref:`becomes invalid <auto-invalidation>`)
        :param options: :class:`AstPrintOptions`
        :return: :class:`Printer`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_C_str(self) -> object:
        """
        to_C_str(self)

        :param self: :class:`AstNode`
        :return: string
        """

    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`AstNode`
        :return: :class:`AstNodeList`
        """

class AstNodeList:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`AstNodeList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_ast_node(el: AstNode) -> object:
        """
        from_ast_node(el)

        :param el: :class:`AstNode`
        :return: :class:`AstNodeList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`AstNodeList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`AstNodeList`
        :return: :class:`AstNodeList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: AstNode) -> object:
        """
        add(self, el)

        :param self: :class:`AstNodeList`
        :param el: :class:`AstNode`
        :return: :class:`AstNodeList`
        """

    def insert(self, pos: int, el: AstNode) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`AstNodeList`
        :param pos: :class:`unsigned`
        :param el: :class:`AstNode`
        :return: :class:`AstNodeList`
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`AstNodeList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`AstNodeList`
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`AstNodeList`
        :return: :class:`AstNodeList`
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`AstNodeList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`AstNodeList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`AstNodeList`
        :return: :class:`AstNodeList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: AstNodeList) -> object:
        """
        concat(self, list2)

        :param self: :class:`AstNodeList`
        :param list2: :class:`AstNodeList`
        :return: :class:`AstNodeList`
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`AstNodeList`
        :return: isl_size
        """

    def n_ast_node(self) -> int:
        """
        n_ast_node(self)

        :param self: :class:`AstNodeList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`AstNodeList`
        :param index: :class:`int`
        :return: :class:`AstNode`
        """

    def get_ast_node(self, index: int) -> object:
        """
        get_ast_node(self, index)

        :param self: :class:`AstNodeList`
        :param index: :class:`int`
        :return: :class:`AstNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: AstNode) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`AstNodeList`
        :param index: :class:`int`
        :param el: :class:`AstNode`
        :return: :class:`AstNodeList`
        """

    def set_ast_node(self, index: int, el: AstNode) -> object:
        """
        set_ast_node(self, index, el)

        :param self: :class:`AstNodeList`
        :param index: :class:`int`
        :param el: :class:`AstNode`
        :return: :class:`AstNodeList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`AstNodeList`
        :param fn: callback(el)
        :return: isl_stat
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`AstNodeList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`AstNodeList`
        :param fn: callback(el)
        :return: :class:`AstNodeList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`AstNodeList`
        :param cmp: callback(a, b)
        :return: :class:`AstNodeList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`AstNodeList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`AstNodeList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class AstPrintOptions:
    @staticmethod
    def alloc(ctx: Context) -> object:
        """
        alloc(ctx)

        :param ctx: :class:`Context`
        :return: :class:`AstPrintOptions`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`AstPrintOptions`
        :return: :class:`AstPrintOptions`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`AstPrintOptions`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_print_user(self, print_user: object) -> object:
        """
        set_print_user(self, print_user)

        :param self: :class:`AstPrintOptions`
        :param print_user: callback(p, options, node)
        :return: tuple: (:class:`AstPrintOptions`, (opaque handle to manage callback lifetime))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_print_for(self, print_for: object) -> object:
        """
        set_print_for(self, print_for)

        :param self: :class:`AstPrintOptions`
        :param print_for: callback(p, options, node)
        :return: tuple: (:class:`AstPrintOptions`, (opaque handle to manage callback lifetime))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class BasicMap:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def total_dim(self) -> int:
        """
        total_dim(self)

        :param self: :class:`BasicMap`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dim(self, arg: dim_type, /) -> int:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def dim(self, arg: dim_type, /) -> int:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`BasicMap`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_ctx(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def get_ctx(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`BasicMap`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_space(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def get_space(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def get_div(self, pos: int) -> object:
        """
        get_div(self, pos)

        :param self: :class:`BasicMap`
        :param pos: :class:`int`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_local_space(self) -> object:
        """
        get_local_space(self)

        :param self: :class:`BasicMap`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_tuple_name(self, type: dim_type, s: str) -> object:
        """
        set_tuple_name(self, type, s)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param s: string
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_tuple_name(self, arg0: dim_type, arg1: str, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def get_tuple_name(self, type: dim_type) -> object:
        """
        get_tuple_name(self, type)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_tuple_name(self, arg: dim_type, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def get_dim_name(self, type: dim_type, pos: int) -> object:
        """
        get_dim_name(self, type, pos)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_dim_name(self, arg0: dim_type, arg1: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def set_dim_name(self, type: dim_type, pos: int, s: str) -> object:
        """
        set_dim_name(self, type, pos, s)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param s: string
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_dim_name(self, arg0: dim_type, arg1: int, arg2: str, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def set_tuple_id(self, type: dim_type, id: Id) -> object:
        """
        set_tuple_id(self, type, id)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_tuple_id(self, arg0: dim_type, arg1: Id, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def has_dim_id(self, type: dim_type, pos: int) -> bool:
        """
        has_dim_id(self, type, pos)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def has_dim_id(self, arg0: dim_type, arg1: int, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def find_dim_by_name(self, arg0: dim_type, arg1: str, /) -> int:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def find_dim_by_name(self, arg0: dim_type, arg1: str, /) -> int:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def is_rational(self) -> bool:
        """
        is_rational(self)

        :param self: :class:`BasicMap`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def identity(space: Space) -> object:
        """
        identity(space)

        :param space: :class:`Space`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def copy(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def copy(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @staticmethod
    def equal(space: Space, n_equal: int) -> object:
        """
        equal(space, n_equal)

        :param space: :class:`Space`
        :param n_equal: :class:`unsigned`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def less_at(space: Space, pos: int) -> object:
        """
        less_at(space, pos)

        :param space: :class:`Space`
        :param pos: :class:`unsigned`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def more_at(space: Space, pos: int) -> object:
        """
        more_at(space, pos)

        :param space: :class:`Space`
        :param pos: :class:`unsigned`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def empty(space: Space) -> object:
        """
        empty(space)

        :param space: :class:`Space`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def universe(space: Space) -> object:
        """
        universe(space)

        :param space: :class:`Space`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def nat_universe(space: Space) -> object:
        """
        nat_universe(space)

        :param space: :class:`Space`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def remove_redundancies(self) -> object:
        """
        remove_redundancies(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def remove_redundancies(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def remove_redundancies(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def intersect_params(self, bset: BasicSet) -> object:
        """
        intersect_params(self, bset)

        :param self: :class:`BasicMap`
        :param bset: :class:`BasicSet`
        :return: :class:`BasicMap`
        """

    @overload
    def intersect_params(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def intersect_params(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def intersect_domain(self, bset: BasicSet) -> object:
        """
        intersect_domain(self, bset)

        :param self: :class:`BasicMap`
        :param bset: :class:`BasicSet`
        :return: :class:`BasicMap`
        """

    @overload
    def intersect_domain(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def intersect_domain(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def intersect_range(self, bset: BasicSet) -> object:
        """
        intersect_range(self, bset)

        :param self: :class:`BasicMap`
        :param bset: :class:`BasicSet`
        :return: :class:`BasicMap`
        """

    @overload
    def intersect_range(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def intersect_range(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def intersect(self, bmap2: BasicMap) -> object:
        """
        intersect(self, bmap2)

        :param self: :class:`BasicMap`
        :param bmap2: :class:`BasicMap`
        :return: :class:`BasicMap`
        """

    @overload
    def intersect(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def intersect(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def union(self, bmap2: BasicMap) -> object:
        """
        union(self, bmap2)

        :param self: :class:`BasicMap`
        :param bmap2: :class:`BasicMap`
        :return: :class:`Map`
        """

    @overload
    def union(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def union(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def apply_domain(self, bmap2: BasicMap) -> object:
        """
        apply_domain(self, bmap2)

        :param self: :class:`BasicMap`
        :param bmap2: :class:`BasicMap`
        :return: :class:`BasicMap`
        """

    @overload
    def apply_domain(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def apply_domain(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def apply_range(self, bmap2: BasicMap) -> object:
        """
        apply_range(self, bmap2)

        :param self: :class:`BasicMap`
        :param bmap2: :class:`BasicMap`
        :return: :class:`BasicMap`
        """

    @overload
    def apply_range(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def apply_range(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def affine_hull(self) -> object:
        """
        affine_hull(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`
        """

    @overload
    def affine_hull(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def affine_hull(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def preimage_domain_multi_aff(self, ma: MultiAff) -> object:
        """
        preimage_domain_multi_aff(self, ma)

        :param self: :class:`BasicMap`
        :param ma: :class:`MultiAff`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def preimage_domain_multi_aff(self, arg: MultiAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def preimage_domain_multi_aff(self, arg: MultiAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def preimage_range_multi_aff(self, ma: MultiAff) -> object:
        """
        preimage_range_multi_aff(self, ma)

        :param self: :class:`BasicMap`
        :param ma: :class:`MultiAff`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def preimage_range_multi_aff(self, arg: MultiAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def preimage_range_multi_aff(self, arg: MultiAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`
        """

    @overload
    def reverse(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def reverse(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def domain(self) -> object:
        """
        domain(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def domain(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def domain(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def range(self) -> object:
        """
        range(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def range(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def range(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def domain_map(self) -> object:
        """
        domain_map(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def domain_map(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def domain_map(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def range_map(self) -> object:
        """
        range_map(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def range_map(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def range_map(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def remove_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        remove_dims(self, type, first, n)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def remove_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def eliminate(self, type: dim_type, first: int, n: int) -> object:
        """
        eliminate(self, type, first, n)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def eliminate(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def sample(self) -> object:
        """
        sample(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`
        """

    @overload
    def sample(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def sample(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def detect_equalities(self) -> object:
        """
        detect_equalities(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`
        """

    @overload
    def detect_equalities(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def detect_equalities(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`BasicMap`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dump(self) -> None:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def dump(self) -> None:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`BasicMap`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def to_str(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def to_str(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def fix_val(self, type: dim_type, pos: int, v: object) -> object:
        """
        fix_val(self, type, pos, v)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param v: :class:`Val`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def fix_val(self, arg0: dim_type, arg1: int, arg2: object, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def lower_bound_si(self, type: dim_type, pos: int, value: int) -> object:
        """
        lower_bound_si(self, type, pos, value)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param value: :class:`int`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def upper_bound_si(self, type: dim_type, pos: int, value: int) -> object:
        """
        upper_bound_si(self, type, pos, value)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param value: :class:`int`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def sum(self, bmap2: BasicMap) -> object:
        """
        sum(self, bmap2)

        :param self: :class:`BasicMap`
        :param bmap2: :class:`BasicMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def sum(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def neg(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def is_equal(self, bmap2: BasicMap) -> bool:
        """
        is_equal(self, bmap2)

        :param self: :class:`BasicMap`
        :param bmap2: :class:`BasicMap`
        :return: bool
        """

    @overload
    def is_equal(self, arg: Map, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def is_equal(self, arg: UnionMap, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def is_disjoint(self, bmap2: BasicMap) -> bool:
        """
        is_disjoint(self, bmap2)

        :param self: :class:`BasicMap`
        :param bmap2: :class:`BasicMap`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def is_disjoint(self, arg: Map, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def is_disjoint(self, arg: UnionMap, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def partial_lexmax(self, dom: BasicSet) -> object:
        """
        partial_lexmax(self, dom)

        :param self: :class:`BasicMap`
        :param dom: :class:`BasicSet`
        :return: tuple: (:class:`Map`, empty (:class:`Set`))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def partial_lexmax(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def partial_lexmin(self, dom: BasicSet) -> object:
        """
        partial_lexmin(self, dom)

        :param self: :class:`BasicMap`
        :param dom: :class:`BasicSet`
        :return: tuple: (:class:`Map`, empty (:class:`Set`))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def partial_lexmin(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def lexmin(self) -> object:
        """
        lexmin(self)

        :param self: :class:`BasicMap`
        :return: :class:`Map`
        """

    @overload
    def lexmin(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def lexmin(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def lexmax(self) -> object:
        """
        lexmax(self)

        :param self: :class:`BasicMap`
        :return: :class:`Map`
        """

    @overload
    def lexmax(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def lexmax(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def partial_lexmin_pw_multi_aff(self, dom: BasicSet) -> object:
        """
        partial_lexmin_pw_multi_aff(self, dom)

        :param self: :class:`BasicMap`
        :param dom: :class:`BasicSet`
        :return: tuple: (:class:`PwMultiAff`, empty (:class:`Set`))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def partial_lexmax_pw_multi_aff(self, dom: BasicSet) -> object:
        """
        partial_lexmax_pw_multi_aff(self, dom)

        :param self: :class:`BasicMap`
        :param dom: :class:`BasicSet`
        :return: tuple: (:class:`PwMultiAff`, empty (:class:`Set`))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def lexmin_pw_multi_aff(self) -> object:
        """
        lexmin_pw_multi_aff(self)

        :param self: :class:`BasicMap`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def lexmin_pw_multi_aff(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def plain_get_val_if_fixed(self, type: dim_type, pos: int) -> object:
        """
        plain_get_val_if_fixed(self, type, pos)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def plain_get_val_if_fixed(self, arg0: dim_type, arg1: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def image_is_bounded(self) -> bool:
        """
        image_is_bounded(self)

        :param self: :class:`BasicMap`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def plain_is_universe(self) -> bool:
        """
        plain_is_universe(self)

        :param self: :class:`BasicMap`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def plain_is_universe(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def is_universe(self) -> bool:
        """
        is_universe(self)

        :param self: :class:`BasicMap`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def plain_is_empty(self) -> bool:
        """
        plain_is_empty(self)

        :param self: :class:`BasicMap`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def plain_is_empty(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def plain_is_empty(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def is_empty(self) -> bool:
        """
        is_empty(self)

        :param self: :class:`BasicMap`
        :return: bool
        """

    @overload
    def is_empty(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def is_empty(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def is_subset(self, bmap2: BasicMap) -> bool:
        """
        is_subset(self, bmap2)

        :param self: :class:`BasicMap`
        :param bmap2: :class:`BasicMap`
        :return: bool
        """

    @overload
    def is_subset(self, arg: Map, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def is_subset(self, arg: UnionMap, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def is_strict_subset(self, bmap2: BasicMap) -> bool:
        """
        is_strict_subset(self, bmap2)

        :param self: :class:`BasicMap`
        :param bmap2: :class:`BasicMap`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def is_strict_subset(self, arg: Map, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def is_strict_subset(self, arg: UnionMap, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def product(self, bmap2: BasicMap) -> object:
        """
        product(self, bmap2)

        :param self: :class:`BasicMap`
        :param bmap2: :class:`BasicMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def product(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def product(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def domain_product(self, bmap2: BasicMap) -> object:
        """
        domain_product(self, bmap2)

        :param self: :class:`BasicMap`
        :param bmap2: :class:`BasicMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def domain_product(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def domain_product(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def range_product(self, bmap2: BasicMap) -> object:
        """
        range_product(self, bmap2)

        :param self: :class:`BasicMap`
        :param bmap2: :class:`BasicMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def range_product(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def range_product(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def flat_product(self, bmap2: BasicMap) -> object:
        """
        flat_product(self, bmap2)

        :param self: :class:`BasicMap`
        :param bmap2: :class:`BasicMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def flat_product(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def flat_range_product(self, bmap2: BasicMap) -> object:
        """
        flat_range_product(self, bmap2)

        :param self: :class:`BasicMap`
        :param bmap2: :class:`BasicMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def flat_range_product(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def flat_range_product(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def deltas(self) -> object:
        """
        deltas(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicSet`
        """

    @overload
    def deltas(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def deltas(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def deltas_map(self) -> object:
        """
        deltas_map(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def deltas_map(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def deltas_map(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def add_dims(self, type: dim_type, n: int) -> object:
        """
        add_dims(self, type, n)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param n: :class:`unsigned`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def add_dims(self, arg0: dim_type, arg1: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def insert_dims(self, type: dim_type, pos: int, n: int) -> object:
        """
        insert_dims(self, type, pos, n)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def insert_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def move_dims(self, dst_type: dim_type, dst_pos: int, src_type: dim_type, src_pos: int, n: int) -> object:
        """
        move_dims(self, dst_type, dst_pos, src_type, src_pos, n)

        :param self: :class:`BasicMap`
        :param dst_type: :class:`dim_type`
        :param dst_pos: :class:`unsigned`
        :param src_type: :class:`dim_type`
        :param src_pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def move_dims(self, arg0: dim_type, arg1: int, arg2: dim_type, arg3: int, arg4: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def project_out(self, type: dim_type, first: int, n: int) -> object:
        """
        project_out(self, type, first, n)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def project_out(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def project_out(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def remove_divs(self) -> object:
        """
        remove_divs(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def remove_divs(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def remove_divs(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def remove_divs_involving_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        remove_divs_involving_dims(self, type, first, n)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def remove_divs_involving_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def equate(self, type1: dim_type, pos1: int, type2: dim_type, pos2: int) -> object:
        """
        equate(self, type1, pos1, type2, pos2)

        :param self: :class:`BasicMap`
        :param type1: :class:`dim_type`
        :param pos1: :class:`int`
        :param type2: :class:`dim_type`
        :param pos2: :class:`int`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def equate(self, arg0: dim_type, arg1: int, arg2: dim_type, arg3: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def order_ge(self, type1: dim_type, pos1: int, type2: dim_type, pos2: int) -> object:
        """
        order_ge(self, type1, pos1, type2, pos2)

        :param self: :class:`BasicMap`
        :param type1: :class:`dim_type`
        :param pos1: :class:`int`
        :param type2: :class:`dim_type`
        :param pos2: :class:`int`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def order_ge(self, arg0: dim_type, arg1: int, arg2: dim_type, arg3: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def order_gt(self, type1: dim_type, pos1: int, type2: dim_type, pos2: int) -> object:
        """
        order_gt(self, type1, pos1, type2, pos2)

        :param self: :class:`BasicMap`
        :param type1: :class:`dim_type`
        :param pos1: :class:`int`
        :param type2: :class:`dim_type`
        :param pos2: :class:`int`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def order_gt(self, arg0: dim_type, arg1: int, arg2: dim_type, arg3: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def wrap(self) -> object:
        """
        wrap(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def wrap(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def wrap(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def flatten(self) -> object:
        """
        flatten(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`
        """

    @overload
    def flatten(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def flatten_domain(self) -> object:
        """
        flatten_domain(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`
        """

    @overload
    def flatten_domain(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def flatten_range(self) -> object:
        """
        flatten_range(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`
        """

    @overload
    def flatten_range(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @staticmethod
    def from_domain(bset: BasicSet) -> object:
        """
        from_domain(bset)

        :param bset: :class:`BasicSet`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_range(bset: BasicSet) -> object:
        """
        from_range(bset)

        :param bset: :class:`BasicSet`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_domain_and_range(domain: BasicSet, range: BasicSet) -> object:
        """
        from_domain_and_range(domain, range)

        :param domain: :class:`BasicSet`
        :param range: :class:`BasicSet`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def is_single_valued(self) -> bool:
        """
        is_single_valued(self)

        :param self: :class:`BasicMap`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def is_single_valued(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def is_single_valued(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def can_zip(self) -> bool:
        """
        can_zip(self)

        :param self: :class:`BasicMap`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def can_zip(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def zip(self) -> object:
        """
        zip(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def zip(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def zip(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def can_curry(self) -> bool:
        """
        can_curry(self)

        :param self: :class:`BasicMap`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def can_curry(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def curry(self) -> object:
        """
        curry(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def curry(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def curry(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def can_uncurry(self) -> bool:
        """
        can_uncurry(self)

        :param self: :class:`BasicMap`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def can_uncurry(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def uncurry(self) -> object:
        """
        uncurry(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def uncurry(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def uncurry(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def compute_divs(self) -> object:
        """
        compute_divs(self)

        :param self: :class:`BasicMap`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def compute_divs(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def compute_divs(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def drop_constraints_involving_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_constraints_involving_dims(self, type, first, n)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def drop_constraints_involving_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def drop_constraints_not_involving_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_constraints_not_involving_dims(self, type, first, n)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def drop_constraints_not_involving_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def involves_dims(self, type: dim_type, first: int, n: int) -> bool:
        """
        involves_dims(self, type, first, n)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def involves_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def involves_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def gist_domain(self, context: BasicSet) -> object:
        """
        gist_domain(self, context)

        :param self: :class:`BasicMap`
        :param context: :class:`BasicSet`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def gist_domain(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def gist_domain(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def gist(self, context: BasicMap) -> object:
        """
        gist(self, context)

        :param self: :class:`BasicMap`
        :param context: :class:`BasicMap`
        :return: :class:`BasicMap`
        """

    @overload
    def gist(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def gist(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`BasicMap`
        :param model: :class:`Space`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def align_params(self, arg: Space, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def align_params(self, arg: Space, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @overload
    def drop_unused_params(self) -> object:
        """
        drop_unused_params(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def drop_unused_params(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def drop_unused_params(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def equalities_matrix(self, c1: dim_type, c2: dim_type, c3: dim_type, c4: dim_type, c5: dim_type) -> object:
        """
        equalities_matrix(self, c1, c2, c3, c4, c5)

        :param self: :class:`BasicMap`
        :param c1: :class:`dim_type`
        :param c2: :class:`dim_type`
        :param c3: :class:`dim_type`
        :param c4: :class:`dim_type`
        :param c5: :class:`dim_type`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def inequalities_matrix(self, c1: dim_type, c2: dim_type, c3: dim_type, c4: dim_type, c5: dim_type) -> object:
        """
        inequalities_matrix(self, c1, c2, c3, c4, c5)

        :param self: :class:`BasicMap`
        :param c1: :class:`dim_type`
        :param c2: :class:`dim_type`
        :param c3: :class:`dim_type`
        :param c4: :class:`dim_type`
        :param c5: :class:`dim_type`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_constraint_matrices(space: Space, eq: Mat, ineq: Mat, c1: dim_type, c2: dim_type, c3: dim_type, c4: dim_type, c5: dim_type) -> object:
        """
        from_constraint_matrices(space, eq, ineq, c1, c2, c3, c4, c5)

        :param space: :class:`Space`
        :param eq: :class:`Mat`
        :param ineq: :class:`Mat`
        :param c1: :class:`dim_type`
        :param c2: :class:`dim_type`
        :param c3: :class:`dim_type`
        :param c4: :class:`dim_type`
        :param c5: :class:`dim_type`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_aff(aff: Aff) -> object:
        """
        from_aff(aff)

        :param aff: :class:`Aff`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_multi_aff(maff: MultiAff) -> object:
        """
        from_multi_aff(maff)

        :param maff: :class:`MultiAff`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_aff_list(domain_space: Space, list: AffList) -> object:
        """
        from_aff_list(domain_space, list)

        :param domain_space: :class:`Space`
        :param list: :class:`AffList`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`BasicMap`
        :return: :class:`BasicMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def to_list(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    @overload
    def to_list(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    @staticmethod
    def from_qpolynomial(qp: QPolynomial) -> object:
        """
        from_qpolynomial(qp)

        :param qp: :class:`QPolynomial`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_constraint(self) -> int:
        """
        n_constraint(self)

        :param self: :class:`BasicMap`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_constraint(self, fn: object) -> stat:
        """
        foreach_constraint(self, fn)

        :param self: :class:`BasicMap`
        :param fn: callback(c)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_constraint_list(self) -> object:
        """
        get_constraint_list(self)

        :param self: :class:`BasicMap`
        :return: :class:`ConstraintList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def add_constraint(self, constraint: Constraint) -> object:
        """
        add_constraint(self, constraint)

        :param self: :class:`BasicMap`
        :param constraint: :class:`Constraint`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def add_constraint(self, arg: Constraint, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def has_defining_equality(self, type: dim_type, pos: int) -> object:
        """
        has_defining_equality(self, type, pos)

        :param self: :class:`BasicMap`
        :param type: :class:`dim_type`
        :param pos: :class:`int`
        :return: c (:class:`Constraint`)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_constraint(constraint: Constraint) -> object:
        """
        from_constraint(constraint)

        :param constraint: :class:`Constraint`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def domain_tuple_dim(self) -> int:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def range_tuple_dim(self) -> int:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def has_tuple_name(self, arg: dim_type, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def has_dim_name(self, arg0: dim_type, arg1: int, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def set_dim_id(self, arg0: dim_type, arg1: int, arg2: Id, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def get_dim_id(self, arg0: dim_type, arg1: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def set_domain_tuple_id(self, arg: Id, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def set_range_tuple_id(self, arg: Id, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def reset_tuple_id(self, arg: dim_type, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def has_domain_tuple_id(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def has_range_tuple_id(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def has_tuple_id(self, arg: dim_type, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def get_domain_tuple_id(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def get_range_tuple_id(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def get_tuple_id(self, arg: dim_type, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def reset_user(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def find_dim_by_id(self, arg0: dim_type, arg1: Id, /) -> int:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def simple_hull(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def unshifted_simple_hull(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def plain_unshifted_simple_hull(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def unshifted_simple_hull_from_map_list(self, arg: MapList, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def lower_bound_multi_pw_aff(self, arg: MultiPwAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def upper_bound_multi_pw_aff(self, arg: MultiPwAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def floordiv_val(self, arg: object, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def lexmax_pw_multi_aff(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def min_multi_pw_aff(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def max_multi_pw_aff(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def domain_reverse(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def range_reverse(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def union_disjoint(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def intersect_domain_factor_domain(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def intersect_domain_factor_range(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def intersect_range_factor_domain(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def intersect_range_factor_range(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def intersect_domain_wrapped_domain(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def intersect_range_wrapped_domain(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def preimage_domain_pw_multi_aff(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def preimage_range_pw_multi_aff(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def preimage_domain_multi_pw_aff(self, arg: MultiPwAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def flat_domain_product(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def domain_is_wrapping(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def range_is_wrapping(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def is_product(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def factor_domain(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def factor_range(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def domain_factor_domain(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def domain_factor_range(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def range_factor_domain(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def range_factor_range(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def subtract(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def subtract_domain(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def subtract_range(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def complement(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def lower_bound_val(self, arg0: dim_type, arg1: int, arg2: object, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def upper_bound_val(self, arg0: dim_type, arg1: int, arg2: object, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def convex_hull(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def polyhedral_hull(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def project_out_param_id(self, arg: Id, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def project_out_param_id_list(self, arg: IdList, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def project_out_all_params(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def remove_unknown_divs(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def remove_inputs(self, arg0: int, arg1: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def order_le(self, arg0: dim_type, arg1: int, arg2: dim_type, arg3: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def oppose(self, arg0: dim_type, arg1: int, arg2: dim_type, arg3: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def order_lt(self, arg0: dim_type, arg1: int, arg2: dim_type, arg3: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def params(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def bind_domain(self, arg: MultiId, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def bind_range(self, arg: MultiId, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def plain_is_single_valued(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def plain_is_injective(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def is_injective(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def is_bijective(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def is_identity(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def is_translation(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def has_equal_space(self, arg: Map, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def can_range_curry(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def range_curry(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def make_disjoint(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def align_divs(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def gist_range(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def gist_params(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def gist_basic_map(self, arg: BasicMap, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def get_range_stride_info(self, arg: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def get_range_lattice_tile(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def get_range_simple_fixed_box_hull(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def coalesce(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def plain_is_equal(self, arg: Map, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def get_hash(self) -> int:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def n_basic_map(self) -> int:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def foreach_basic_map(self, arg: object, /) -> stat:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def get_basic_map_list(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def fixed_power_val(self, arg: object, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def power(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def reaching_path_lengths(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def transitive_closure(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def lex_le_map(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def lex_lt_map(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def lex_ge_map(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def lex_gt_map(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def eq_at_multi_pw_aff(self, arg: MultiPwAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def lex_lt_at_multi_pw_aff(self, arg: MultiPwAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def lex_le_at_multi_pw_aff(self, arg: MultiPwAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def lex_gt_at_multi_pw_aff(self, arg: MultiPwAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def lex_ge_at_multi_pw_aff(self, arg: MultiPwAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def dim_min(self, arg: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def dim_max(self, arg: int, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def as_pw_multi_aff(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def apply_pw_qpolynomial_fold(self, arg: PwQPolynomialFold, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def to_union_map(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`Map`"""

    def as_union_pw_multi_aff(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def as_multi_union_pw_aff(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def apply_union_pw_qpolynomial_fold(self, arg: UnionPwQPolynomialFold, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def domain_map_union_pw_multi_aff(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def add_map(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def intersect_domain_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def intersect_domain_space(self, arg: Space, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def intersect_range_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def intersect_range_space(self, arg: Space, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def intersect_domain_wrapped_domain_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def intersect_range_wrapped_domain_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def preimage_domain_union_pw_multi_aff(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def preimage_range_union_pw_multi_aff(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def n_map(self) -> int:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def foreach_map(self, arg: object, /) -> stat:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def get_map_list(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def every_map(self, arg: object, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def remove_map_if(self, arg: object, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def contains(self, arg: Space, /) -> bool:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def extract_map(self, arg: Space, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def isa_map(self) -> bool:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def as_map(self) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def lex_lt_union_map(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def lex_le_union_map(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def lex_gt_union_map(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def lex_ge_union_map(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def eq_at_multi_union_pw_aff(self, arg: MultiUnionPwAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def lex_le_at_multi_union_pw_aff(self, arg: MultiUnionPwAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def lex_lt_at_multi_union_pw_aff(self, arg: MultiUnionPwAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def lex_ge_at_multi_union_pw_aff(self, arg: MultiUnionPwAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def lex_gt_at_multi_union_pw_aff(self, arg: MultiUnionPwAff, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

    def compute_flow(self, arg0: UnionMap, arg1: UnionMap, arg2: UnionMap, /) -> object:
        """Upcast from :class:`BasicMap` to :class:`UnionMap`"""

class BasicMapList:
    def intersect(self) -> object:
        """
        intersect(self)

        :param self: :class:`BasicMapList`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`BasicMapList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_basic_map(el: BasicMap) -> object:
        """
        from_basic_map(el)

        :param el: :class:`BasicMap`
        :return: :class:`BasicMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`BasicMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`BasicMapList`
        :return: :class:`BasicMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: BasicMap) -> object:
        """
        add(self, el)

        :param self: :class:`BasicMapList`
        :param el: :class:`BasicMap`
        :return: :class:`BasicMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert(self, pos: int, el: BasicMap) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`BasicMapList`
        :param pos: :class:`unsigned`
        :param el: :class:`BasicMap`
        :return: :class:`BasicMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`BasicMapList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`BasicMapList`
        :return: :class:`BasicMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`BasicMapList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`BasicMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`BasicMapList`
        :return: :class:`BasicMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: BasicMapList) -> object:
        """
        concat(self, list2)

        :param self: :class:`BasicMapList`
        :param list2: :class:`BasicMapList`
        :return: :class:`BasicMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`BasicMapList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_basic_map(self) -> int:
        """
        n_basic_map(self)

        :param self: :class:`BasicMapList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`BasicMapList`
        :param index: :class:`int`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_basic_map(self, index: int) -> object:
        """
        get_basic_map(self, index)

        :param self: :class:`BasicMapList`
        :param index: :class:`int`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: BasicMap) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`BasicMapList`
        :param index: :class:`int`
        :param el: :class:`BasicMap`
        :return: :class:`BasicMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_basic_map(self, index: int, el: BasicMap) -> object:
        """
        set_basic_map(self, index, el)

        :param self: :class:`BasicMapList`
        :param index: :class:`int`
        :param el: :class:`BasicMap`
        :return: :class:`BasicMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`BasicMapList`
        :param fn: callback(el)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`BasicMapList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`BasicMapList`
        :param fn: callback(el)
        :return: :class:`BasicMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`BasicMapList`
        :param cmp: callback(a, b)
        :return: :class:`BasicMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`BasicMapList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`BasicMapList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class BasicSet:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    @overload
    def n_dim(self) -> int:
        """
        n_dim(self)

        :param self: :class:`BasicSet`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def n_dim(self) -> int:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def n_param(self) -> int:
        """
        n_param(self)

        :param self: :class:`BasicSet`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def n_param(self) -> int:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def total_dim(self) -> int:
        """
        total_dim(self)

        :param self: :class:`BasicSet`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`BasicSet`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dim(self, arg: dim_type, /) -> int:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def dim(self, arg: dim_type, /) -> int:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`BasicSet`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_ctx(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def get_ctx(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`BasicSet`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_space(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def get_space(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def get_div(self, pos: int) -> object:
        """
        get_div(self, pos)

        :param self: :class:`BasicSet`
        :param pos: :class:`int`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_local_space(self) -> object:
        """
        get_local_space(self)

        :param self: :class:`BasicSet`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_tuple_name(self) -> object:
        """
        get_tuple_name(self)

        :param self: :class:`BasicSet`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_tuple_name(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def set_tuple_name(self, s: str) -> object:
        """
        set_tuple_name(self, s)

        :param self: :class:`BasicSet`
        :param s: string
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_tuple_name(self, arg: str, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def get_dim_name(self, type: dim_type, pos: int) -> object:
        """
        get_dim_name(self, type, pos)

        :param self: :class:`BasicSet`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_dim_name(self, arg0: dim_type, arg1: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def set_dim_name(self, type: dim_type, pos: int, s: str) -> object:
        """
        set_dim_name(self, type, pos, s)

        :param self: :class:`BasicSet`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param s: string
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_dim_name(self, arg0: dim_type, arg1: int, arg2: str, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def get_dim_id(self, type: dim_type, pos: int) -> object:
        """
        get_dim_id(self, type, pos)

        :param self: :class:`BasicSet`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_dim_id(self, arg0: dim_type, arg1: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def set_tuple_id(self, id: Id) -> object:
        """
        set_tuple_id(self, id)

        :param self: :class:`BasicSet`
        :param id: :class:`Id`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_tuple_id(self, arg: Id, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def is_rational(self) -> bool:
        """
        is_rational(self)

        :param self: :class:`BasicSet`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`BasicSet`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def copy(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def copy(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @staticmethod
    def empty(space: Space) -> object:
        """
        empty(space)

        :param space: :class:`Space`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def universe(space: Space) -> object:
        """
        universe(space)

        :param space: :class:`Space`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def nat_universe(space: Space) -> object:
        """
        nat_universe(space)

        :param space: :class:`Space`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def positive_orthant(space: Space) -> object:
        """
        positive_orthant(space)

        :param space: :class:`Space`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def intersect(self, bset2: BasicSet) -> object:
        """
        intersect(self, bset2)

        :param self: :class:`BasicSet`
        :param bset2: :class:`BasicSet`
        :return: :class:`BasicSet`
        """

    @overload
    def intersect(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def intersect(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def intersect_params(self, bset2: BasicSet) -> object:
        """
        intersect_params(self, bset2)

        :param self: :class:`BasicSet`
        :param bset2: :class:`BasicSet`
        :return: :class:`BasicSet`
        """

    @overload
    def intersect_params(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def intersect_params(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def apply(self, bmap: BasicMap) -> object:
        """
        apply(self, bmap)

        :param self: :class:`BasicSet`
        :param bmap: :class:`BasicMap`
        :return: :class:`BasicSet`
        """

    @overload
    def apply(self, arg: Map, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def apply(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def preimage_multi_aff(self, ma: MultiAff) -> object:
        """
        preimage_multi_aff(self, ma)

        :param self: :class:`BasicSet`
        :param ma: :class:`MultiAff`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def preimage_multi_aff(self, arg: MultiAff, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def preimage_multi_aff(self, arg: MultiAff, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def affine_hull(self) -> object:
        """
        affine_hull(self)

        :param self: :class:`BasicSet`
        :return: :class:`BasicSet`
        """

    @overload
    def affine_hull(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def affine_hull(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def remove_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        remove_dims(self, type, first, n)

        :param self: :class:`BasicSet`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def remove_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def sample(self) -> object:
        """
        sample(self)

        :param self: :class:`BasicSet`
        :return: :class:`BasicSet`
        """

    @overload
    def sample(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def sample(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def detect_equalities(self) -> object:
        """
        detect_equalities(self)

        :param self: :class:`BasicSet`
        :return: :class:`BasicSet`
        """

    @overload
    def detect_equalities(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def detect_equalities(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def remove_redundancies(self) -> object:
        """
        remove_redundancies(self)

        :param self: :class:`BasicSet`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def remove_redundancies(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def remove_redundancies(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`BasicSet`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dump(self) -> None:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def dump(self) -> None:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def fix_val(self, type: dim_type, pos: int, v: object) -> object:
        """
        fix_val(self, type, pos, v)

        :param self: :class:`BasicSet`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param v: :class:`Val`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def fix_val(self, arg0: dim_type, arg1: int, arg2: object, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def lower_bound_val(self, type: dim_type, pos: int, value: object) -> object:
        """
        lower_bound_val(self, type, pos, value)

        :param self: :class:`BasicSet`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param value: :class:`Val`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def lower_bound_val(self, arg0: dim_type, arg1: int, arg2: object, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def upper_bound_val(self, type: dim_type, pos: int, value: object) -> object:
        """
        upper_bound_val(self, type, pos, value)

        :param self: :class:`BasicSet`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param value: :class:`Val`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def upper_bound_val(self, arg0: dim_type, arg1: int, arg2: object, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def is_equal(self, bset2: BasicSet) -> bool:
        """
        is_equal(self, bset2)

        :param self: :class:`BasicSet`
        :param bset2: :class:`BasicSet`
        :return: bool
        """

    @overload
    def is_equal(self, arg: Set, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def is_equal(self, arg: UnionSet, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def is_disjoint(self, bset2: BasicSet) -> bool:
        """
        is_disjoint(self, bset2)

        :param self: :class:`BasicSet`
        :param bset2: :class:`BasicSet`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def is_disjoint(self, arg: Set, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def is_disjoint(self, arg: UnionSet, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def partial_lexmin(self, dom: BasicSet) -> object:
        """
        partial_lexmin(self, dom)

        :param self: :class:`BasicSet`
        :param dom: :class:`BasicSet`
        :return: tuple: (:class:`Set`, empty (:class:`Set`))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def partial_lexmin(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def partial_lexmax(self, dom: BasicSet) -> object:
        """
        partial_lexmax(self, dom)

        :param self: :class:`BasicSet`
        :param dom: :class:`BasicSet`
        :return: tuple: (:class:`Set`, empty (:class:`Set`))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def partial_lexmax(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def lexmin(self) -> object:
        """
        lexmin(self)

        :param self: :class:`BasicSet`
        :return: :class:`Set`
        """

    @overload
    def lexmin(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def lexmin(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def lexmax(self) -> object:
        """
        lexmax(self)

        :param self: :class:`BasicSet`
        :return: :class:`Set`
        """

    @overload
    def lexmax(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def lexmax(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def partial_lexmin_pw_multi_aff(self, dom: BasicSet) -> object:
        """
        partial_lexmin_pw_multi_aff(self, dom)

        :param self: :class:`BasicSet`
        :param dom: :class:`BasicSet`
        :return: tuple: (:class:`PwMultiAff`, empty (:class:`Set`))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def partial_lexmax_pw_multi_aff(self, dom: BasicSet) -> object:
        """
        partial_lexmax_pw_multi_aff(self, dom)

        :param self: :class:`BasicSet`
        :param dom: :class:`BasicSet`
        :return: tuple: (:class:`PwMultiAff`, empty (:class:`Set`))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def union(self, bset2: BasicSet) -> object:
        """
        union(self, bset2)

        :param self: :class:`BasicSet`
        :param bset2: :class:`BasicSet`
        :return: :class:`Set`
        """

    @overload
    def union(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def union(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def compare_at(self, bset2: BasicSet, pos: int) -> int:
        """
        compare_at(self, bset2, pos)

        :param self: :class:`BasicSet`
        :param bset2: :class:`BasicSet`
        :param pos: :class:`int`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def params(self) -> object:
        """
        params(self)

        :param self: :class:`BasicSet`
        :return: :class:`BasicSet`
        """

    @overload
    def params(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def params(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def from_params(self) -> object:
        """
        from_params(self)

        :param self: :class:`BasicSet`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def from_params(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def plain_is_universe(self) -> bool:
        """
        plain_is_universe(self)

        :param self: :class:`BasicSet`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def plain_is_universe(self) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def is_universe(self) -> bool:
        """
        is_universe(self)

        :param self: :class:`BasicSet`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def plain_is_empty(self) -> bool:
        """
        plain_is_empty(self)

        :param self: :class:`BasicSet`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def plain_is_empty(self) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def is_empty(self) -> bool:
        """
        is_empty(self)

        :param self: :class:`BasicSet`
        :return: bool
        """

    @overload
    def is_empty(self) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def is_empty(self) -> bool:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def is_bounded(self) -> bool:
        """
        is_bounded(self)

        :param self: :class:`BasicSet`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def is_bounded(self) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def is_subset(self, bset2: BasicSet) -> bool:
        """
        is_subset(self, bset2)

        :param self: :class:`BasicSet`
        :param bset2: :class:`BasicSet`
        :return: bool
        """

    @overload
    def is_subset(self, arg: Set, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def is_subset(self, arg: UnionSet, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def plain_is_equal(self, bset2: BasicSet) -> bool:
        """
        plain_is_equal(self, bset2)

        :param self: :class:`BasicSet`
        :param bset2: :class:`BasicSet`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def plain_is_equal(self, arg: Set, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def to_set(self) -> object:
        """
        to_set(self)

        :param self: :class:`BasicSet`
        :return: :class:`Set`
        """

    @overload
    def sample_point(self) -> object:
        """
        sample_point(self)

        :param self: :class:`BasicSet`
        :return: :class:`Point`
        """

    @overload
    def sample_point(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def sample_point(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def flat_product(self, bset2: BasicSet) -> object:
        """
        flat_product(self, bset2)

        :param self: :class:`BasicSet`
        :param bset2: :class:`BasicSet`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def flat_product(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def insert_dims(self, type: dim_type, pos: int, n: int) -> object:
        """
        insert_dims(self, type, pos, n)

        :param self: :class:`BasicSet`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def insert_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def add_dims(self, type: dim_type, n: int) -> object:
        """
        add_dims(self, type, n)

        :param self: :class:`BasicSet`
        :param type: :class:`dim_type`
        :param n: :class:`unsigned`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def add_dims(self, arg0: dim_type, arg1: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def move_dims(self, dst_type: dim_type, dst_pos: int, src_type: dim_type, src_pos: int, n: int) -> object:
        """
        move_dims(self, dst_type, dst_pos, src_type, src_pos, n)

        :param self: :class:`BasicSet`
        :param dst_type: :class:`dim_type`
        :param dst_pos: :class:`unsigned`
        :param src_type: :class:`dim_type`
        :param src_pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def move_dims(self, arg0: dim_type, arg1: int, arg2: dim_type, arg3: int, arg4: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def project_out(self, type: dim_type, first: int, n: int) -> object:
        """
        project_out(self, type, first, n)

        :param self: :class:`BasicSet`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def project_out(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def project_out(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def remove_divs(self) -> object:
        """
        remove_divs(self)

        :param self: :class:`BasicSet`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def remove_divs(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def remove_divs(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def eliminate(self, type: dim_type, first: int, n: int) -> object:
        """
        eliminate(self, type, first, n)

        :param self: :class:`BasicSet`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def eliminate(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def remove_divs_involving_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        remove_divs_involving_dims(self, type, first, n)

        :param self: :class:`BasicSet`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def remove_divs_involving_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def remove_unknown_divs(self) -> object:
        """
        remove_unknown_divs(self)

        :param self: :class:`BasicSet`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def remove_unknown_divs(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def drop_constraints_involving_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_constraints_involving_dims(self, type, first, n)

        :param self: :class:`BasicSet`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def drop_constraints_involving_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def drop_constraints_not_involving_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_constraints_not_involving_dims(self, type, first, n)

        :param self: :class:`BasicSet`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def drop_constraints_not_involving_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def involves_dims(self, type: dim_type, first: int, n: int) -> bool:
        """
        involves_dims(self, type, first, n)

        :param self: :class:`BasicSet`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def involves_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`BasicSet`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def neg(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def compute_divs(self) -> object:
        """
        compute_divs(self)

        :param self: :class:`BasicSet`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def compute_divs(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def compute_divs(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def gist(self, context: BasicSet) -> object:
        """
        gist(self, context)

        :param self: :class:`BasicSet`
        :param context: :class:`BasicSet`
        :return: :class:`BasicSet`
        """

    @overload
    def gist(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def gist(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @staticmethod
    def from_point(pnt: Point) -> object:
        """
        from_point(pnt)

        :param pnt: :class:`Point`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def box_from_points(pnt1: Point, pnt2: Point) -> object:
        """
        box_from_points(pnt1, pnt2)

        :param pnt1: :class:`Point`
        :param pnt2: :class:`Point`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def lift(self) -> object:
        """
        lift(self)

        :param self: :class:`BasicSet`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def lift(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def lift(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`BasicSet`
        :param model: :class:`Space`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def align_params(self, arg: Space, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def align_params(self, arg: Space, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def drop_unused_params(self) -> object:
        """
        drop_unused_params(self)

        :param self: :class:`BasicSet`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def drop_unused_params(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def drop_unused_params(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def equalities_matrix(self, c1: dim_type, c2: dim_type, c3: dim_type, c4: dim_type) -> object:
        """
        equalities_matrix(self, c1, c2, c3, c4)

        :param self: :class:`BasicSet`
        :param c1: :class:`dim_type`
        :param c2: :class:`dim_type`
        :param c3: :class:`dim_type`
        :param c4: :class:`dim_type`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def inequalities_matrix(self, c1: dim_type, c2: dim_type, c3: dim_type, c4: dim_type) -> object:
        """
        inequalities_matrix(self, c1, c2, c3, c4)

        :param self: :class:`BasicSet`
        :param c1: :class:`dim_type`
        :param c2: :class:`dim_type`
        :param c3: :class:`dim_type`
        :param c4: :class:`dim_type`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_constraint_matrices(space: Space, eq: Mat, ineq: Mat, c1: dim_type, c2: dim_type, c3: dim_type, c4: dim_type) -> object:
        """
        from_constraint_matrices(space, eq, ineq, c1, c2, c3, c4)

        :param space: :class:`Space`
        :param eq: :class:`Mat`
        :param ineq: :class:`Mat`
        :param c1: :class:`dim_type`
        :param c2: :class:`dim_type`
        :param c3: :class:`dim_type`
        :param c4: :class:`dim_type`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_multi_aff(ma: MultiAff) -> object:
        """
        from_multi_aff(ma)

        :param ma: :class:`MultiAff`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reduced_basis(self) -> object:
        """
        reduced_basis(self)

        :param self: :class:`BasicSet`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def coefficients(self) -> object:
        """
        coefficients(self)

        :param self: :class:`BasicSet`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def coefficients(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def coefficients(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def solutions(self) -> object:
        """
        solutions(self)

        :param self: :class:`BasicSet`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def solutions(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def solutions(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`BasicSet`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def to_str(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def to_str(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def is_wrapping(self) -> bool:
        """
        is_wrapping(self)

        :param self: :class:`BasicSet`
        :return: bool
        """

    @overload
    def is_wrapping(self) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def unwrap(self) -> object:
        """
        unwrap(self)

        :param self: :class:`BasicSet`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def unwrap(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def unwrap(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    @overload
    def flatten(self) -> object:
        """
        flatten(self)

        :param self: :class:`BasicSet`
        :return: :class:`BasicSet`
        """

    @overload
    def flatten(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`BasicSet`
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def to_list(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def to_list(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def compute_vertices(self) -> object:
        """
        compute_vertices(self)

        :param self: :class:`BasicSet`
        :return: :class:`Vertices`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_constraint(self) -> int:
        """
        n_constraint(self)

        :param self: :class:`BasicSet`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_constraint(self, fn: object) -> stat:
        """
        foreach_constraint(self, fn)

        :param self: :class:`BasicSet`
        :param fn: callback(c)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_constraint_list(self) -> object:
        """
        get_constraint_list(self)

        :param self: :class:`BasicSet`
        :return: :class:`ConstraintList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_bound_pair(self, type: dim_type, pos: int, fn: object) -> stat:
        """
        foreach_bound_pair(self, type, pos, fn)

        :param self: :class:`BasicSet`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param fn: callback(lower, upper, bset)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def add_constraint(self, constraint: Constraint) -> object:
        """
        add_constraint(self, constraint)

        :param self: :class:`BasicSet`
        :param constraint: :class:`Constraint`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def add_constraint(self, arg: Constraint, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @staticmethod
    def from_constraint(constraint: Constraint) -> object:
        """
        from_constraint(constraint)

        :param constraint: :class:`Constraint`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def max_val(self, obj: Aff) -> object:
        """
        max_val(self, obj)

        :param self: :class:`BasicSet`
        :param obj: :class:`Aff`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def max_val(self, arg: Aff, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    @overload
    def dim_max_val(self, pos: int) -> object:
        """
        dim_max_val(self, pos)

        :param self: :class:`BasicSet`
        :param pos: :class:`int`
        :return: :class:`Val`
        """

    @overload
    def dim_max_val(self, arg: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def tuple_dim(self) -> int:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def reset_space(self, arg: Space, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def has_tuple_name(self) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def has_dim_name(self, arg0: dim_type, arg1: int, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def set_dim_id(self, arg0: dim_type, arg1: int, arg2: Id, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def has_dim_id(self, arg0: dim_type, arg1: int, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def reset_tuple_id(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def has_tuple_id(self) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def get_tuple_id(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def reset_user(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def find_dim_by_id(self, arg0: dim_type, arg1: Id, /) -> int:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def find_dim_by_name(self, arg0: dim_type, arg1: str, /) -> int:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def lower_bound_multi_val(self, arg: MultiVal, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def upper_bound_multi_val(self, arg: MultiVal, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def lower_bound_multi_pw_aff(self, arg: MultiPwAff, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def upper_bound_multi_pw_aff(self, arg: MultiPwAff, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def equate(self, arg0: dim_type, arg1: int, arg2: dim_type, arg3: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def lexmin_pw_multi_aff(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def lexmax_pw_multi_aff(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def min_multi_pw_aff(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def max_multi_pw_aff(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def follows_at(self, arg0: Set, arg1: int, /) -> int:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def bind(self, arg: MultiId, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def unbind_params(self, arg: MultiId, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def unbind_params_insert_domain(self, arg: MultiId, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def convex_hull(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def polyhedral_hull(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def simple_hull(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def unshifted_simple_hull(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def plain_unshifted_simple_hull(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def unshifted_simple_hull_from_set_list(self, arg: SetList, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def bounded_simple_hull(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def wrapped_reverse(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def union_disjoint(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def product(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def intersect_factor_domain(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def intersect_factor_range(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def subtract(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def complement(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def preimage_pw_multi_aff(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def preimage_multi_pw_aff(self, arg: MultiPwAff, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def project_out_param_id(self, arg: Id, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def project_out_param_id_list(self, arg: IdList, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def project_out_all_params(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def project_onto_map(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def eliminate_dims(self, arg0: int, arg1: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def split_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def involves_locals(self) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def is_params(self) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def is_strict_subset(self, arg: Set, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def is_singleton(self) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def is_box(self) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def has_equal_space(self, arg: Set, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def sum(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def make_disjoint(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def align_divs(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def get_plain_multi_val_if_fixed(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def plain_get_val_if_fixed(self, arg0: dim_type, arg1: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def dim_is_bounded(self, arg0: dim_type, arg1: int, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def dim_has_lower_bound(self, arg0: dim_type, arg1: int, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def dim_has_upper_bound(self, arg0: dim_type, arg1: int, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def dim_has_any_lower_bound(self, arg0: dim_type, arg1: int, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def dim_has_any_upper_bound(self, arg0: dim_type, arg1: int, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def gist_basic_set(self, arg: BasicSet, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def gist_params(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def dim_residue_class_val(self, arg: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def get_stride_info(self, arg: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def get_stride(self, arg: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def get_lattice_tile(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def get_simple_fixed_box_hull(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def coalesce(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def plain_cmp(self, arg: Set, /) -> int:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def plain_is_disjoint(self, arg: Set, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def get_hash(self) -> int:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def n_basic_set(self) -> int:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def foreach_basic_set(self, arg: object, /) -> stat:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def get_basic_set_list(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def foreach_point(self, arg: object, /) -> stat:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def count_val(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def lex_le_set(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def lex_lt_set(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def lex_ge_set(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def lex_gt_set(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def size(self) -> int:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def dim_max(self, arg: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def dim_min(self, arg: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def translation(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def identity(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def flatten_map(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def insert_domain(self, arg: Space, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def wrapped_domain_map(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def pw_aff_on_domain_val(self, arg: object, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def param_pw_aff_on_domain_id(self, arg: Id, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def indicator_function(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def pw_multi_aff_on_domain_multi_val(self, arg: MultiVal, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def as_pw_multi_aff(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def apply_pw_qpolynomial_fold(self, arg: PwQPolynomialFold, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def to_union_set(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def min_val(self, arg: Aff, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def dim_min_val(self, arg: int, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`Set`"""

    def identity_union_pw_multi_aff(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def apply_union_pw_qpolynomial_fold(self, arg: UnionPwQPolynomialFold, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def add_set(self, arg: Set, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def preimage_union_pw_multi_aff(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def n_set(self) -> int:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def foreach_set(self, arg: object, /) -> stat:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def every_set(self, arg: object, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def get_set_list(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def contains(self, arg: Space, /) -> bool:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def extract_set(self, arg: Space, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def isa_set(self) -> bool:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def as_set(self) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def lex_lt_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def lex_le_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def lex_gt_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def lex_ge_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def compute_schedule(self, arg0: UnionMap, arg1: UnionMap, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

    def min_multi_union_pw_aff(self, arg: MultiUnionPwAff, /) -> object:
        """Upcast from :class:`BasicSet` to :class:`UnionSet`"""

class BasicSetList:
    def intersect(self) -> object:
        """
        intersect(self)

        :param self: :class:`BasicSetList`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def coefficients(self) -> object:
        """
        coefficients(self)

        :param self: :class:`BasicSetList`
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`BasicSetList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_basic_set(el: BasicSet) -> object:
        """
        from_basic_set(el)

        :param el: :class:`BasicSet`
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`BasicSetList`
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: BasicSet) -> object:
        """
        add(self, el)

        :param self: :class:`BasicSetList`
        :param el: :class:`BasicSet`
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert(self, pos: int, el: BasicSet) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`BasicSetList`
        :param pos: :class:`unsigned`
        :param el: :class:`BasicSet`
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`BasicSetList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`BasicSetList`
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`BasicSetList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`BasicSetList`
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: BasicSetList) -> object:
        """
        concat(self, list2)

        :param self: :class:`BasicSetList`
        :param list2: :class:`BasicSetList`
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`BasicSetList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_basic_set(self) -> int:
        """
        n_basic_set(self)

        :param self: :class:`BasicSetList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`BasicSetList`
        :param index: :class:`int`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_basic_set(self, index: int) -> object:
        """
        get_basic_set(self, index)

        :param self: :class:`BasicSetList`
        :param index: :class:`int`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: BasicSet) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`BasicSetList`
        :param index: :class:`int`
        :param el: :class:`BasicSet`
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_basic_set(self, index: int, el: BasicSet) -> object:
        """
        set_basic_set(self, index, el)

        :param self: :class:`BasicSetList`
        :param index: :class:`int`
        :param el: :class:`BasicSet`
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`BasicSetList`
        :param fn: callback(el)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`BasicSetList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`BasicSetList`
        :param fn: callback(el)
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`BasicSetList`
        :param cmp: callback(a, b)
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`BasicSetList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`BasicSetList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Cell:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Cell`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_domain(self) -> object:
        """
        get_domain(self)

        :param self: :class:`Cell`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_vertex(self, fn: object) -> stat:
        """
        foreach_vertex(self, fn)

        :param self: :class:`Cell`
        :param fn: callback(vertex)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Constraint:
    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`Constraint`
        :return: :class:`ConstraintList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Constraint`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc_equality(ls: LocalSpace) -> object:
        """
        alloc_equality(ls)

        :param ls: :class:`LocalSpace`
        :return: :class:`Constraint`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc_inequality(ls: LocalSpace) -> object:
        """
        alloc_inequality(ls)

        :param ls: :class:`LocalSpace`
        :return: :class:`Constraint`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def equality_alloc(ls: LocalSpace) -> object:
        """
        equality_alloc(ls)

        :param ls: :class:`LocalSpace`
        :return: :class:`Constraint`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def inequality_alloc(ls: LocalSpace) -> object:
        """
        inequality_alloc(ls)

        :param ls: :class:`LocalSpace`
        :return: :class:`Constraint`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`Constraint`
        :return: :class:`Constraint`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_equal(self, constraint2: Constraint) -> bool:
        """
        is_equal(self, constraint2)

        :param self: :class:`Constraint`
        :param constraint2: :class:`Constraint`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`Constraint`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_local_space(self) -> object:
        """
        get_local_space(self)

        :param self: :class:`Constraint`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`Constraint`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_dims(self, type: dim_type, first: int, n: int) -> bool:
        """
        involves_dims(self, type, first, n)

        :param self: :class:`Constraint`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_dim_name(self, type: dim_type, pos: int) -> object:
        """
        get_dim_name(self, type, pos)

        :param self: :class:`Constraint`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_constant_val(self) -> object:
        """
        get_constant_val(self)

        :param self: :class:`Constraint`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_coefficient_val(self, type: dim_type, pos: int) -> object:
        """
        get_coefficient_val(self, type, pos)

        :param self: :class:`Constraint`
        :param type: :class:`dim_type`
        :param pos: :class:`int`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_constant_val(self, v: object) -> object:
        """
        set_constant_val(self, v)

        :param self: :class:`Constraint`
        :param v: :class:`Val`
        :return: :class:`Constraint`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_coefficient_val(self, type: dim_type, pos: int, v: object) -> object:
        """
        set_coefficient_val(self, type, pos, v)

        :param self: :class:`Constraint`
        :param type: :class:`dim_type`
        :param pos: :class:`int`
        :param v: :class:`Val`
        :return: :class:`Constraint`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_div(self, pos: int) -> object:
        """
        get_div(self, pos)

        :param self: :class:`Constraint`
        :param pos: :class:`int`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def negate(self) -> object:
        """
        negate(self)

        :param self: :class:`Constraint`
        :return: :class:`Constraint`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_equality(self) -> bool:
        """
        is_equality(self)

        :param self: :class:`Constraint`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_div_constraint(self) -> bool:
        """
        is_div_constraint(self)

        :param self: :class:`Constraint`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_lower_bound(self, type: dim_type, pos: int) -> bool:
        """
        is_lower_bound(self, type, pos)

        :param self: :class:`Constraint`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_upper_bound(self, type: dim_type, pos: int) -> bool:
        """
        is_upper_bound(self, type, pos)

        :param self: :class:`Constraint`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_bound(self, type: dim_type, pos: int) -> object:
        """
        get_bound(self, type, pos)

        :param self: :class:`Constraint`
        :param type: :class:`dim_type`
        :param pos: :class:`int`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_aff(self) -> object:
        """
        get_aff(self)

        :param self: :class:`Constraint`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def equality_from_aff(aff: Aff) -> object:
        """
        equality_from_aff(aff)

        :param aff: :class:`Aff`
        :return: :class:`Constraint`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def inequality_from_aff(aff: Aff) -> object:
        """
        inequality_from_aff(aff)

        :param aff: :class:`Aff`
        :return: :class:`Constraint`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_cmp(self, c2: Constraint) -> int:
        """
        plain_cmp(self, c2)

        :param self: :class:`Constraint`
        :param c2: :class:`Constraint`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def cmp_last_non_zero(self, c2: Constraint) -> int:
        """
        cmp_last_non_zero(self, c2)

        :param self: :class:`Constraint`
        :param c2: :class:`Constraint`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`Constraint`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class ConstraintList:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`ConstraintList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_constraint(el: Constraint) -> object:
        """
        from_constraint(el)

        :param el: :class:`Constraint`
        :return: :class:`ConstraintList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`ConstraintList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`ConstraintList`
        :return: :class:`ConstraintList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: Constraint) -> object:
        """
        add(self, el)

        :param self: :class:`ConstraintList`
        :param el: :class:`Constraint`
        :return: :class:`ConstraintList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert(self, pos: int, el: Constraint) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`ConstraintList`
        :param pos: :class:`unsigned`
        :param el: :class:`Constraint`
        :return: :class:`ConstraintList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`ConstraintList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`ConstraintList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`ConstraintList`
        :return: :class:`ConstraintList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`ConstraintList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`ConstraintList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`ConstraintList`
        :return: :class:`ConstraintList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: ConstraintList) -> object:
        """
        concat(self, list2)

        :param self: :class:`ConstraintList`
        :param list2: :class:`ConstraintList`
        :return: :class:`ConstraintList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`ConstraintList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_constraint(self) -> int:
        """
        n_constraint(self)

        :param self: :class:`ConstraintList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`ConstraintList`
        :param index: :class:`int`
        :return: :class:`Constraint`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_constraint(self, index: int) -> object:
        """
        get_constraint(self, index)

        :param self: :class:`ConstraintList`
        :param index: :class:`int`
        :return: :class:`Constraint`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: Constraint) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`ConstraintList`
        :param index: :class:`int`
        :param el: :class:`Constraint`
        :return: :class:`ConstraintList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_constraint(self, index: int, el: Constraint) -> object:
        """
        set_constraint(self, index, el)

        :param self: :class:`ConstraintList`
        :param index: :class:`int`
        :param el: :class:`Constraint`
        :return: :class:`ConstraintList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`ConstraintList`
        :param fn: callback(el)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`ConstraintList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`ConstraintList`
        :param fn: callback(el)
        :return: :class:`ConstraintList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`ConstraintList`
        :param cmp: callback(a, b)
        :return: :class:`ConstraintList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`ConstraintList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`ConstraintList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Context:
    def __init__(self) -> None: ...

    def abort(self) -> None:
        """
        abort(self)

        :param self: :class:`Context`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def resume(self) -> None:
        """
        resume(self)

        :param self: :class:`Context`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def aborted(self) -> int:
        """
        aborted(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_max_operations(self, max_operations: int) -> None:
        """
        set_max_operations(self, max_operations)

        :param self: :class:`Context`
        :param max_operations: :class:`int`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_max_operations(self) -> int:
        """
        get_max_operations(self)

        :param self: :class:`Context`
        :return: unsigned long 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_operations(self) -> None:
        """
        reset_operations(self)

        :param self: :class:`Context`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_schedule_max_coefficient(self, val: int) -> stat:
        """
        set_schedule_max_coefficient(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_schedule_max_coefficient(self) -> int:
        """
        get_schedule_max_coefficient(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_schedule_max_constant_term(self, val: int) -> stat:
        """
        set_schedule_max_constant_term(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_schedule_max_constant_term(self) -> int:
        """
        get_schedule_max_constant_term(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_schedule_maximize_band_depth(self, val: int) -> stat:
        """
        set_schedule_maximize_band_depth(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_schedule_maximize_band_depth(self) -> int:
        """
        get_schedule_maximize_band_depth(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_schedule_maximize_coincidence(self, val: int) -> stat:
        """
        set_schedule_maximize_coincidence(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_schedule_maximize_coincidence(self) -> int:
        """
        get_schedule_maximize_coincidence(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_schedule_outer_coincidence(self, val: int) -> stat:
        """
        set_schedule_outer_coincidence(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_schedule_outer_coincidence(self) -> int:
        """
        get_schedule_outer_coincidence(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_schedule_split_scaled(self, val: int) -> stat:
        """
        set_schedule_split_scaled(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_schedule_split_scaled(self) -> int:
        """
        get_schedule_split_scaled(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_schedule_treat_coalescing(self, val: int) -> stat:
        """
        set_schedule_treat_coalescing(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_schedule_treat_coalescing(self) -> int:
        """
        get_schedule_treat_coalescing(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_schedule_separate_components(self, val: int) -> stat:
        """
        set_schedule_separate_components(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_schedule_separate_components(self) -> int:
        """
        get_schedule_separate_components(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_schedule_serialize_sccs(self, val: int) -> stat:
        """
        set_schedule_serialize_sccs(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_schedule_serialize_sccs(self) -> int:
        """
        get_schedule_serialize_sccs(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_schedule_whole_component(self, val: int) -> stat:
        """
        set_schedule_whole_component(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_schedule_whole_component(self) -> int:
        """
        get_schedule_whole_component(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_schedule_carry_self_first(self, val: int) -> stat:
        """
        set_schedule_carry_self_first(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_schedule_carry_self_first(self) -> int:
        """
        get_schedule_carry_self_first(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_tile_scale_tile_loops(self, val: int) -> stat:
        """
        set_tile_scale_tile_loops(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_tile_scale_tile_loops(self) -> int:
        """
        get_tile_scale_tile_loops(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_tile_shift_point_loops(self, val: int) -> stat:
        """
        set_tile_shift_point_loops(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_tile_shift_point_loops(self) -> int:
        """
        get_tile_shift_point_loops(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_bound(self, val: int) -> stat:
        """
        set_bound(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_bound(self) -> int:
        """
        get_bound(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_on_error(self, val: int) -> stat:
        """
        set_on_error(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_on_error(self) -> int:
        """
        get_on_error(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_gbr_only_first(self, val: int) -> stat:
        """
        set_gbr_only_first(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_gbr_only_first(self) -> int:
        """
        get_gbr_only_first(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_schedule_algorithm(self, val: int) -> stat:
        """
        set_schedule_algorithm(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_schedule_algorithm(self) -> int:
        """
        get_schedule_algorithm(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_pip_symmetry(self, val: int) -> stat:
        """
        set_pip_symmetry(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_pip_symmetry(self) -> int:
        """
        get_pip_symmetry(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_coalesce_bounded_wrapping(self, val: int) -> stat:
        """
        set_coalesce_bounded_wrapping(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_coalesce_bounded_wrapping(self) -> int:
        """
        get_coalesce_bounded_wrapping(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_coalesce_preserve_locals(self, val: int) -> stat:
        """
        set_coalesce_preserve_locals(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_coalesce_preserve_locals(self) -> int:
        """
        get_coalesce_preserve_locals(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_ast_iterator_type(self, val: str) -> stat:
        """
        set_ast_iterator_type(self, val)

        :param self: :class:`Context`
        :param val: string
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ast_iterator_type(self) -> object:
        """
        get_ast_iterator_type(self)

        :param self: :class:`Context`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_ast_always_print_block(self, val: int) -> stat:
        """
        set_ast_always_print_block(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ast_always_print_block(self) -> int:
        """
        get_ast_always_print_block(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_ast_print_outermost_block(self, val: int) -> stat:
        """
        set_ast_print_outermost_block(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ast_print_outermost_block(self) -> int:
        """
        get_ast_print_outermost_block(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_ast_print_macro_once(self, val: int) -> stat:
        """
        set_ast_print_macro_once(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ast_print_macro_once(self) -> int:
        """
        get_ast_print_macro_once(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_ast_build_atomic_upper_bound(self, val: int) -> stat:
        """
        set_ast_build_atomic_upper_bound(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ast_build_atomic_upper_bound(self) -> int:
        """
        get_ast_build_atomic_upper_bound(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_ast_build_prefer_pdiv(self, val: int) -> stat:
        """
        set_ast_build_prefer_pdiv(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ast_build_prefer_pdiv(self) -> int:
        """
        get_ast_build_prefer_pdiv(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_ast_build_detect_min_max(self, val: int) -> stat:
        """
        set_ast_build_detect_min_max(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ast_build_detect_min_max(self) -> int:
        """
        get_ast_build_detect_min_max(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_ast_build_exploit_nested_bounds(self, val: int) -> stat:
        """
        set_ast_build_exploit_nested_bounds(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ast_build_exploit_nested_bounds(self) -> int:
        """
        get_ast_build_exploit_nested_bounds(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_ast_build_group_coscheduled(self, val: int) -> stat:
        """
        set_ast_build_group_coscheduled(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ast_build_group_coscheduled(self) -> int:
        """
        get_ast_build_group_coscheduled(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_ast_build_separation_bounds(self, val: int) -> stat:
        """
        set_ast_build_separation_bounds(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ast_build_separation_bounds(self) -> int:
        """
        get_ast_build_separation_bounds(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_ast_build_scale_strides(self, val: int) -> stat:
        """
        set_ast_build_scale_strides(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ast_build_scale_strides(self) -> int:
        """
        get_ast_build_scale_strides(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_ast_build_allow_else(self, val: int) -> stat:
        """
        set_ast_build_allow_else(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ast_build_allow_else(self) -> int:
        """
        get_ast_build_allow_else(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_ast_build_allow_or(self, val: int) -> stat:
        """
        set_ast_build_allow_or(self, val)

        :param self: :class:`Context`
        :param val: :class:`int`
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ast_build_allow_or(self) -> int:
        """
        get_ast_build_allow_or(self)

        :param self: :class:`Context`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Error(Exception):
    pass

class FixedBox:
    pass

class Flow:
    def get_no_source(self, must: int) -> object:
        """
        get_no_source(self, must)

        :param self: :class:`Flow`
        :param must: :class:`int`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Flow`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Id:
    @overload
    def __init__(self, name: str, user: object | None = None, context: Context | None = None) -> None: ...

    @overload
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def __eq__(self, other: Id) -> bool:
        """
        __eq__(self, other)

        :param self: :class:`Id`
        :param other: :class:`Id`
        :return: bool
        """

    def __ne__(self, other: Id) -> bool:
        """
        __ne__(self, other)

        :param self: :class:`Id`
        :param other: :class:`Id`
        :return: bool
        """

    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`Id`
        :return: :class:`IdList`
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Id`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __hash__(self) -> int:
        """
        get_hash(self)

        :param self: :class:`Id`
        :return: uint32_t 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_user(self) -> object:
        """
        get_user(self)

        :param self: :class:`Id`
        :return: a user-specified python object

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_name(self) -> object:
        """
        get_name(self)

        :param self: :class:`Id`
        :return: string
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`Id`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`Id`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class IdList:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`IdList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_id(el: Id) -> object:
        """
        from_id(el)

        :param el: :class:`Id`
        :return: :class:`IdList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`IdList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`IdList`
        :return: :class:`IdList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: Id) -> object:
        """
        add(self, el)

        :param self: :class:`IdList`
        :param el: :class:`Id`
        :return: :class:`IdList`
        """

    def insert(self, pos: int, el: Id) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`IdList`
        :param pos: :class:`unsigned`
        :param el: :class:`Id`
        :return: :class:`IdList`
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`IdList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`IdList`
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`IdList`
        :return: :class:`IdList`
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`IdList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`IdList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`IdList`
        :return: :class:`IdList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: IdList) -> object:
        """
        concat(self, list2)

        :param self: :class:`IdList`
        :param list2: :class:`IdList`
        :return: :class:`IdList`
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`IdList`
        :return: isl_size
        """

    def n_id(self) -> int:
        """
        n_id(self)

        :param self: :class:`IdList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`IdList`
        :param index: :class:`int`
        :return: :class:`Id`
        """

    def get_id(self, index: int) -> object:
        """
        get_id(self, index)

        :param self: :class:`IdList`
        :param index: :class:`int`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: Id) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`IdList`
        :param index: :class:`int`
        :param el: :class:`Id`
        :return: :class:`IdList`
        """

    def set_id(self, index: int, el: Id) -> object:
        """
        set_id(self, index, el)

        :param self: :class:`IdList`
        :param index: :class:`int`
        :param el: :class:`Id`
        :return: :class:`IdList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`IdList`
        :param fn: callback(el)
        :return: isl_stat
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`IdList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`IdList`
        :param fn: callback(el)
        :return: :class:`IdList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`IdList`
        :param cmp: callback(a, b)
        :return: :class:`IdList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`IdList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`IdList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`IdList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class IdToAstExpr:
    pass

class LocalSpace:
    def __init__(self, arg: Space, /) -> None: ...

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`LocalSpace`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_space(space: Space) -> object:
        """
        from_space(space)

        :param space: :class:`Space`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`LocalSpace`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_params(self) -> bool:
        """
        is_params(self)

        :param self: :class:`LocalSpace`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_set(self) -> bool:
        """
        is_set(self)

        :param self: :class:`LocalSpace`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_tuple_id(self, type: dim_type, id: Id) -> object:
        """
        set_tuple_id(self, type, id)

        :param self: :class:`LocalSpace`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`LocalSpace`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_dim_name(self, type: dim_type, pos: int) -> bool:
        """
        has_dim_name(self, type, pos)

        :param self: :class:`LocalSpace`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_dim_name(self, type: dim_type, pos: int) -> object:
        """
        get_dim_name(self, type, pos)

        :param self: :class:`LocalSpace`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_name(self, type: dim_type, pos: int, s: str) -> object:
        """
        set_dim_name(self, type, pos, s)

        :param self: :class:`LocalSpace`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param s: string
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_dim_id(self, type: dim_type, pos: int) -> bool:
        """
        has_dim_id(self, type, pos)

        :param self: :class:`LocalSpace`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_dim_id(self, type: dim_type, pos: int) -> object:
        """
        get_dim_id(self, type, pos)

        :param self: :class:`LocalSpace`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_id(self, type: dim_type, pos: int, id: Id) -> object:
        """
        set_dim_id(self, type, pos, id)

        :param self: :class:`LocalSpace`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param id: :class:`Id`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`LocalSpace`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_div(self, pos: int) -> object:
        """
        get_div(self, pos)

        :param self: :class:`LocalSpace`
        :param pos: :class:`int`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`LocalSpace`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def domain(self) -> object:
        """
        domain(self)

        :param self: :class:`LocalSpace`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range(self) -> object:
        """
        range(self)

        :param self: :class:`LocalSpace`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def from_domain(self) -> object:
        """
        from_domain(self)

        :param self: :class:`LocalSpace`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_dims(self, type: dim_type, n: int) -> object:
        """
        add_dims(self, type, n)

        :param self: :class:`LocalSpace`
        :param type: :class:`dim_type`
        :param n: :class:`unsigned`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_dims(self, type, first, n)

        :param self: :class:`LocalSpace`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        insert_dims(self, type, first, n)

        :param self: :class:`LocalSpace`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_from_params(self) -> object:
        """
        set_from_params(self)

        :param self: :class:`LocalSpace`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect(self, ls2: LocalSpace) -> object:
        """
        intersect(self, ls2)

        :param self: :class:`LocalSpace`
        :param ls2: :class:`LocalSpace`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def wrap(self) -> object:
        """
        wrap(self)

        :param self: :class:`LocalSpace`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_equal(self, ls2: LocalSpace) -> bool:
        """
        is_equal(self, ls2)

        :param self: :class:`LocalSpace`
        :param ls2: :class:`LocalSpace`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lifting(self) -> object:
        """
        lifting(self)

        :param self: :class:`LocalSpace`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def flatten_domain(self) -> object:
        """
        flatten_domain(self)

        :param self: :class:`LocalSpace`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def flatten_range(self) -> object:
        """
        flatten_range(self)

        :param self: :class:`LocalSpace`
        :return: :class:`LocalSpace`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`LocalSpace`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Map:
    @overload
    def __init__(self, arg: BasicMap, /) -> None: ...

    @overload
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def domain_tuple_dim(self) -> int:
        """
        domain_tuple_dim(self)

        :param self: :class:`Map`
        :return: isl_size
        """

    def range_tuple_dim(self) -> int:
        """
        range_tuple_dim(self)

        :param self: :class:`Map`
        :return: isl_size
        """

    @overload
    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dim(self, arg: dim_type, /) -> int:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Map`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_ctx(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`Map`
        :return: :class:`Space`
        """

    @overload
    def get_space(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def has_tuple_name(self, type: dim_type) -> bool:
        """
        has_tuple_name(self, type)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_tuple_name(self, type: dim_type) -> object:
        """
        get_tuple_name(self, type)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_tuple_name(self, type: dim_type, s: str) -> object:
        """
        set_tuple_name(self, type, s)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param s: string
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_dim_name(self, type: dim_type, pos: int) -> bool:
        """
        has_dim_name(self, type, pos)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_dim_name(self, type: dim_type, pos: int) -> object:
        """
        get_dim_name(self, type, pos)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_name(self, type: dim_type, pos: int, s: str) -> object:
        """
        set_dim_name(self, type, pos, s)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param s: string
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_id(self, type: dim_type, pos: int, id: Id) -> object:
        """
        set_dim_id(self, type, pos, id)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param id: :class:`Id`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_dim_id(self, type: dim_type, pos: int) -> bool:
        """
        has_dim_id(self, type, pos)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_dim_id(self, type: dim_type, pos: int) -> object:
        """
        get_dim_id(self, type, pos)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_dim_id(self, arg0: dim_type, arg1: int, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def set_domain_tuple_id(self, id: Id) -> object:
        """
        set_domain_tuple_id(self, id)

        :param self: :class:`Map`
        :param id: :class:`Id`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_range_tuple_id(self, id: Id) -> object:
        """
        set_range_tuple_id(self, id)

        :param self: :class:`Map`
        :param id: :class:`Id`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_tuple_id(self, type: dim_type, id: Id) -> object:
        """
        set_tuple_id(self, type, id)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_tuple_id(self, type: dim_type) -> object:
        """
        reset_tuple_id(self, type)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_domain_tuple_id(self) -> bool:
        """
        has_domain_tuple_id(self)

        :param self: :class:`Map`
        :return: bool
        """

    def has_range_tuple_id(self) -> bool:
        """
        has_range_tuple_id(self)

        :param self: :class:`Map`
        :return: bool
        """

    def has_tuple_id(self, type: dim_type) -> bool:
        """
        has_tuple_id(self, type)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_domain_tuple_id(self) -> object:
        """
        get_domain_tuple_id(self)

        :param self: :class:`Map`
        :return: :class:`Id`
        """

    def get_range_tuple_id(self) -> object:
        """
        get_range_tuple_id(self)

        :param self: :class:`Map`
        :return: :class:`Id`
        """

    def get_tuple_id(self, type: dim_type) -> object:
        """
        get_tuple_id(self, type)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def reset_user(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def find_dim_by_id(self, type: dim_type, id: Id) -> int:
        """
        find_dim_by_id(self, type, id)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def find_dim_by_name(self, arg0: dim_type, arg1: str, /) -> int:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def remove_redundancies(self) -> object:
        """
        remove_redundancies(self)

        :param self: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def remove_redundancies(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def simple_hull(self) -> object:
        """
        simple_hull(self)

        :param self: :class:`Map`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def simple_hull(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def unshifted_simple_hull(self) -> object:
        """
        unshifted_simple_hull(self)

        :param self: :class:`Map`
        :return: :class:`BasicMap`
        """

    def plain_unshifted_simple_hull(self) -> object:
        """
        plain_unshifted_simple_hull(self)

        :param self: :class:`Map`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def unshifted_simple_hull_from_map_list(self, list: MapList) -> object:
        """
        unshifted_simple_hull_from_map_list(self, list)

        :param self: :class:`Map`
        :param list: :class:`MapList`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`Map`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dump(self) -> None:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`Map`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def to_str(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def lower_bound_multi_pw_aff(self, lower: MultiPwAff) -> object:
        """
        lower_bound_multi_pw_aff(self, lower)

        :param self: :class:`Map`
        :param lower: :class:`MultiPwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def upper_bound_multi_pw_aff(self, upper: MultiPwAff) -> object:
        """
        upper_bound_multi_pw_aff(self, upper)

        :param self: :class:`Map`
        :param upper: :class:`MultiPwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sum(self, map2: Map) -> object:
        """
        sum(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def floordiv_val(self, d: object) -> object:
        """
        floordiv_val(self, d)

        :param self: :class:`Map`
        :param d: :class:`Val`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def partial_lexmax(self, dom: Set) -> object:
        """
        partial_lexmax(self, dom)

        :param self: :class:`Map`
        :param dom: :class:`Set`
        :return: tuple: (:class:`Map`, empty (:class:`Set`))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def partial_lexmin(self, dom: Set) -> object:
        """
        partial_lexmin(self, dom)

        :param self: :class:`Map`
        :param dom: :class:`Set`
        :return: tuple: (:class:`Map`, empty (:class:`Set`))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def lexmin(self) -> object:
        """
        lexmin(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def lexmin(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def lexmax(self) -> object:
        """
        lexmax(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def lexmax(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def lexmin_pw_multi_aff(self) -> object:
        """
        lexmin_pw_multi_aff(self)

        :param self: :class:`Map`
        :return: :class:`PwMultiAff`
        """

    def lexmax_pw_multi_aff(self) -> object:
        """
        lexmax_pw_multi_aff(self)

        :param self: :class:`Map`
        :return: :class:`PwMultiAff`
        """

    def min_multi_pw_aff(self) -> object:
        """
        min_multi_pw_aff(self)

        :param self: :class:`Map`
        :return: :class:`MultiPwAff`
        """

    def max_multi_pw_aff(self) -> object:
        """
        max_multi_pw_aff(self)

        :param self: :class:`Map`
        :return: :class:`MultiPwAff`
        """

    @staticmethod
    def universe(space: Space) -> object:
        """
        universe(space)

        :param space: :class:`Space`
        :return: :class:`Map`
        """

    @staticmethod
    def nat_universe(space: Space) -> object:
        """
        nat_universe(space)

        :param space: :class:`Space`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def empty(space: Space) -> object:
        """
        empty(space)

        :param space: :class:`Space`
        :return: :class:`Map`
        """

    @staticmethod
    def identity(space: Space) -> object:
        """
        identity(space)

        :param space: :class:`Space`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def lex_lt_first(space: Space, n: int) -> object:
        """
        lex_lt_first(space, n)

        :param space: :class:`Space`
        :param n: :class:`unsigned`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def lex_le_first(space: Space, n: int) -> object:
        """
        lex_le_first(space, n)

        :param space: :class:`Space`
        :param n: :class:`unsigned`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def lex_lt(set_space: Space) -> object:
        """
        lex_lt(set_space)

        :param set_space: :class:`Space`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def lex_le(set_space: Space) -> object:
        """
        lex_le(set_space)

        :param set_space: :class:`Space`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def lex_gt_first(space: Space, n: int) -> object:
        """
        lex_gt_first(space, n)

        :param space: :class:`Space`
        :param n: :class:`unsigned`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def lex_ge_first(space: Space, n: int) -> object:
        """
        lex_ge_first(space, n)

        :param space: :class:`Space`
        :param n: :class:`unsigned`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def lex_gt(set_space: Space) -> object:
        """
        lex_gt(set_space)

        :param set_space: :class:`Space`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def lex_ge(set_space: Space) -> object:
        """
        lex_ge(set_space)

        :param set_space: :class:`Space`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def copy(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def reverse(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def domain_reverse(self) -> object:
        """
        domain_reverse(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def domain_reverse(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def range_reverse(self) -> object:
        """
        range_reverse(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def range_reverse(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def union(self, map2: Map) -> object:
        """
        union(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def union(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def union_disjoint(self, map2: Map) -> object:
        """
        union_disjoint(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def intersect_domain(self, set: Set) -> object:
        """
        intersect_domain(self, set)

        :param self: :class:`Map`
        :param set: :class:`Set`
        :return: :class:`Map`
        """

    @overload
    def intersect_domain(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def intersect_range(self, set: Set) -> object:
        """
        intersect_range(self, set)

        :param self: :class:`Map`
        :param set: :class:`Set`
        :return: :class:`Map`
        """

    @overload
    def intersect_range(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def intersect_domain_factor_domain(self, factor: Map) -> object:
        """
        intersect_domain_factor_domain(self, factor)

        :param self: :class:`Map`
        :param factor: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def intersect_domain_factor_domain(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def intersect_domain_factor_range(self, factor: Map) -> object:
        """
        intersect_domain_factor_range(self, factor)

        :param self: :class:`Map`
        :param factor: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def intersect_domain_factor_range(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def intersect_range_factor_domain(self, factor: Map) -> object:
        """
        intersect_range_factor_domain(self, factor)

        :param self: :class:`Map`
        :param factor: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def intersect_range_factor_domain(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def intersect_range_factor_range(self, factor: Map) -> object:
        """
        intersect_range_factor_range(self, factor)

        :param self: :class:`Map`
        :param factor: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def intersect_range_factor_range(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def intersect_domain_wrapped_domain(self, domain: Set) -> object:
        """
        intersect_domain_wrapped_domain(self, domain)

        :param self: :class:`Map`
        :param domain: :class:`Set`
        :return: :class:`Map`
        """

    def intersect_range_wrapped_domain(self, domain: Set) -> object:
        """
        intersect_range_wrapped_domain(self, domain)

        :param self: :class:`Map`
        :param domain: :class:`Set`
        :return: :class:`Map`
        """

    @overload
    def apply_domain(self, map2: Map) -> object:
        """
        apply_domain(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def apply_domain(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def apply_range(self, map2: Map) -> object:
        """
        apply_range(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def apply_range(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def preimage_domain_multi_aff(self, ma: MultiAff) -> object:
        """
        preimage_domain_multi_aff(self, ma)

        :param self: :class:`Map`
        :param ma: :class:`MultiAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def preimage_domain_multi_aff(self, arg: MultiAff, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def preimage_range_multi_aff(self, ma: MultiAff) -> object:
        """
        preimage_range_multi_aff(self, ma)

        :param self: :class:`Map`
        :param ma: :class:`MultiAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def preimage_range_multi_aff(self, arg: MultiAff, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def preimage_domain_pw_multi_aff(self, pma: PwMultiAff) -> object:
        """
        preimage_domain_pw_multi_aff(self, pma)

        :param self: :class:`Map`
        :param pma: :class:`PwMultiAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def preimage_domain_pw_multi_aff(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def preimage_range_pw_multi_aff(self, pma: PwMultiAff) -> object:
        """
        preimage_range_pw_multi_aff(self, pma)

        :param self: :class:`Map`
        :param pma: :class:`PwMultiAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def preimage_range_pw_multi_aff(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def preimage_domain_multi_pw_aff(self, mpa: MultiPwAff) -> object:
        """
        preimage_domain_multi_pw_aff(self, mpa)

        :param self: :class:`Map`
        :param mpa: :class:`MultiPwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def preimage_domain_multi_pw_aff(self, arg: MultiPwAff, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def product(self, map2: Map) -> object:
        """
        product(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def product(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def domain_product(self, map2: Map) -> object:
        """
        domain_product(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def domain_product(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def range_product(self, map2: Map) -> object:
        """
        range_product(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def range_product(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def flat_product(self, map2: Map) -> object:
        """
        flat_product(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def flat_domain_product(self, map2: Map) -> object:
        """
        flat_domain_product(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def flat_domain_product(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def flat_range_product(self, map2: Map) -> object:
        """
        flat_range_product(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def flat_range_product(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def domain_is_wrapping(self) -> bool:
        """
        domain_is_wrapping(self)

        :param self: :class:`Map`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_is_wrapping(self) -> bool:
        """
        range_is_wrapping(self)

        :param self: :class:`Map`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_product(self) -> bool:
        """
        is_product(self)

        :param self: :class:`Map`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def factor_domain(self) -> object:
        """
        factor_domain(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def factor_domain(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def factor_range(self) -> object:
        """
        factor_range(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def factor_range(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def domain_factor_domain(self) -> object:
        """
        domain_factor_domain(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def domain_factor_domain(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def domain_factor_range(self) -> object:
        """
        domain_factor_range(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def domain_factor_range(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def range_factor_domain(self) -> object:
        """
        range_factor_domain(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def range_factor_domain(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def range_factor_range(self) -> object:
        """
        range_factor_range(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def range_factor_range(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def intersect(self, map2: Map) -> object:
        """
        intersect(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def intersect(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def intersect_params(self, params: Set) -> object:
        """
        intersect_params(self, params)

        :param self: :class:`Map`
        :param params: :class:`Set`
        :return: :class:`Map`
        """

    @overload
    def intersect_params(self, arg: Set, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def subtract(self, map2: Map) -> object:
        """
        subtract(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def subtract(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def subtract_domain(self, dom: Set) -> object:
        """
        subtract_domain(self, dom)

        :param self: :class:`Map`
        :param dom: :class:`Set`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def subtract_domain(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def subtract_range(self, dom: Set) -> object:
        """
        subtract_range(self, dom)

        :param self: :class:`Map`
        :param dom: :class:`Set`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def subtract_range(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def complement(self) -> object:
        """
        complement(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    def fix_input_si(self, input: int, value: int) -> object:
        """
        fix_input_si(self, input, value)

        :param self: :class:`Map`
        :param input: :class:`unsigned`
        :param value: :class:`int`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def fix_val(self, type: dim_type, pos: int, v: object) -> object:
        """
        fix_val(self, type, pos, v)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param v: :class:`Val`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lower_bound_val(self, type: dim_type, pos: int, value: object) -> object:
        """
        lower_bound_val(self, type, pos, value)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param value: :class:`Val`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def upper_bound_val(self, type: dim_type, pos: int, value: object) -> object:
        """
        upper_bound_val(self, type, pos, value)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param value: :class:`Val`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def deltas(self) -> object:
        """
        deltas(self)

        :param self: :class:`Map`
        :return: :class:`Set`
        """

    @overload
    def deltas(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def deltas_map(self) -> object:
        """
        deltas_map(self)

        :param self: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def deltas_map(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def detect_equalities(self) -> object:
        """
        detect_equalities(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def detect_equalities(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def affine_hull(self) -> object:
        """
        affine_hull(self)

        :param self: :class:`Map`
        :return: :class:`BasicMap`
        """

    @overload
    def affine_hull(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def convex_hull(self) -> object:
        """
        convex_hull(self)

        :param self: :class:`Map`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def polyhedral_hull(self) -> object:
        """
        polyhedral_hull(self)

        :param self: :class:`Map`
        :return: :class:`BasicMap`
        """

    @overload
    def polyhedral_hull(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def add_dims(self, type: dim_type, n: int) -> object:
        """
        add_dims(self, type, n)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param n: :class:`unsigned`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_dims(self, type: dim_type, pos: int, n: int) -> object:
        """
        insert_dims(self, type, pos, n)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def move_dims(self, dst_type: dim_type, dst_pos: int, src_type: dim_type, src_pos: int, n: int) -> object:
        """
        move_dims(self, dst_type, dst_pos, src_type, src_pos, n)

        :param self: :class:`Map`
        :param dst_type: :class:`dim_type`
        :param dst_pos: :class:`unsigned`
        :param src_type: :class:`dim_type`
        :param src_pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def project_out_param_id(self, id: Id) -> object:
        """
        project_out_param_id(self, id)

        :param self: :class:`Map`
        :param id: :class:`Id`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def project_out_param_id(self, arg: Id, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def project_out_param_id_list(self, list: IdList) -> object:
        """
        project_out_param_id_list(self, list)

        :param self: :class:`Map`
        :param list: :class:`IdList`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def project_out_param_id_list(self, arg: IdList, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def project_out(self, type: dim_type, first: int, n: int) -> object:
        """
        project_out(self, type, first, n)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def project_out(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def project_out_all_params(self) -> object:
        """
        project_out_all_params(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def project_out_all_params(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def remove_unknown_divs(self) -> object:
        """
        remove_unknown_divs(self)

        :param self: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def remove_divs(self) -> object:
        """
        remove_divs(self)

        :param self: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def remove_divs(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def eliminate(self, type: dim_type, first: int, n: int) -> object:
        """
        eliminate(self, type, first, n)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def remove_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        remove_dims(self, type, first, n)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def remove_divs_involving_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        remove_divs_involving_dims(self, type, first, n)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def remove_inputs(self, first: int, n: int) -> object:
        """
        remove_inputs(self, first, n)

        :param self: :class:`Map`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def order_ge(self, type1: dim_type, pos1: int, type2: dim_type, pos2: int) -> object:
        """
        order_ge(self, type1, pos1, type2, pos2)

        :param self: :class:`Map`
        :param type1: :class:`dim_type`
        :param pos1: :class:`int`
        :param type2: :class:`dim_type`
        :param pos2: :class:`int`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def order_le(self, type1: dim_type, pos1: int, type2: dim_type, pos2: int) -> object:
        """
        order_le(self, type1, pos1, type2, pos2)

        :param self: :class:`Map`
        :param type1: :class:`dim_type`
        :param pos1: :class:`int`
        :param type2: :class:`dim_type`
        :param pos2: :class:`int`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def equate(self, type1: dim_type, pos1: int, type2: dim_type, pos2: int) -> object:
        """
        equate(self, type1, pos1, type2, pos2)

        :param self: :class:`Map`
        :param type1: :class:`dim_type`
        :param pos1: :class:`int`
        :param type2: :class:`dim_type`
        :param pos2: :class:`int`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def oppose(self, type1: dim_type, pos1: int, type2: dim_type, pos2: int) -> object:
        """
        oppose(self, type1, pos1, type2, pos2)

        :param self: :class:`Map`
        :param type1: :class:`dim_type`
        :param pos1: :class:`int`
        :param type2: :class:`dim_type`
        :param pos2: :class:`int`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def order_lt(self, type1: dim_type, pos1: int, type2: dim_type, pos2: int) -> object:
        """
        order_lt(self, type1, pos1, type2, pos2)

        :param self: :class:`Map`
        :param type1: :class:`dim_type`
        :param pos1: :class:`int`
        :param type2: :class:`dim_type`
        :param pos2: :class:`int`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def order_gt(self, type1: dim_type, pos1: int, type2: dim_type, pos2: int) -> object:
        """
        order_gt(self, type1, pos1, type2, pos2)

        :param self: :class:`Map`
        :param type1: :class:`dim_type`
        :param pos1: :class:`int`
        :param type2: :class:`dim_type`
        :param pos2: :class:`int`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def wrap(self) -> object:
        """
        wrap(self)

        :param self: :class:`Map`
        :return: :class:`Set`
        """

    @overload
    def wrap(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def flatten(self) -> object:
        """
        flatten(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    def flatten_domain(self) -> object:
        """
        flatten_domain(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    def flatten_range(self) -> object:
        """
        flatten_range(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def params(self) -> object:
        """
        params(self)

        :param self: :class:`Map`
        :return: :class:`Set`
        """

    @overload
    def params(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def domain(self) -> object:
        """
        domain(self)

        :param self: :class:`Map`
        :return: :class:`Set`
        """

    @overload
    def domain(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def range(self) -> object:
        """
        range(self)

        :param self: :class:`Map`
        :return: :class:`Set`
        """

    @overload
    def range(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def domain_map(self) -> object:
        """
        domain_map(self)

        :param self: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def domain_map(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def range_map(self) -> object:
        """
        range_map(self)

        :param self: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def range_map(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @staticmethod
    def from_basic_map(bmap: BasicMap) -> object:
        """
        from_basic_map(bmap)

        :param bmap: :class:`BasicMap`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_domain(set: Set) -> object:
        """
        from_domain(set)

        :param set: :class:`Set`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_range(set: Set) -> object:
        """
        from_range(set)

        :param set: :class:`Set`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_domain_and_range(domain: Set, range: Set) -> object:
        """
        from_domain_and_range(domain, range)

        :param domain: :class:`Set`
        :param range: :class:`Set`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def sample(self) -> object:
        """
        sample(self)

        :param self: :class:`Map`
        :return: :class:`BasicMap`
        """

    @overload
    def sample(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def bind_domain(self, tuple: MultiId) -> object:
        """
        bind_domain(self, tuple)

        :param self: :class:`Map`
        :param tuple: :class:`MultiId`
        :return: :class:`Set`
        """

    @overload
    def bind_range(self, tuple: MultiId) -> object:
        """
        bind_range(self, tuple)

        :param self: :class:`Map`
        :param tuple: :class:`MultiId`
        :return: :class:`Set`
        """

    @overload
    def bind_range(self, arg: MultiId, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def plain_is_empty(self) -> bool:
        """
        plain_is_empty(self)

        :param self: :class:`Map`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def plain_is_empty(self) -> bool:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def plain_is_universe(self) -> bool:
        """
        plain_is_universe(self)

        :param self: :class:`Map`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def is_empty(self) -> bool:
        """
        is_empty(self)

        :param self: :class:`Map`
        :return: bool
        """

    @overload
    def is_empty(self) -> bool:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def is_subset(self, map2: Map) -> bool:
        """
        is_subset(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: bool
        """

    @overload
    def is_subset(self, arg: UnionMap, /) -> bool:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def is_strict_subset(self, map2: Map) -> bool:
        """
        is_strict_subset(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: bool
        """

    @overload
    def is_strict_subset(self, arg: UnionMap, /) -> bool:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def is_equal(self, map2: Map) -> bool:
        """
        is_equal(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: bool
        """

    @overload
    def is_equal(self, arg: UnionMap, /) -> bool:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def is_disjoint(self, map2: Map) -> bool:
        """
        is_disjoint(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: bool
        """

    @overload
    def is_disjoint(self, arg: UnionMap, /) -> bool:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def plain_is_single_valued(self) -> bool:
        """
        plain_is_single_valued(self)

        :param self: :class:`Map`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def is_single_valued(self) -> bool:
        """
        is_single_valued(self)

        :param self: :class:`Map`
        :return: bool
        """

    @overload
    def is_single_valued(self) -> bool:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def plain_is_injective(self) -> bool:
        """
        plain_is_injective(self)

        :param self: :class:`Map`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def plain_is_injective(self) -> bool:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def is_injective(self) -> bool:
        """
        is_injective(self)

        :param self: :class:`Map`
        :return: bool
        """

    @overload
    def is_injective(self) -> bool:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def is_bijective(self) -> bool:
        """
        is_bijective(self)

        :param self: :class:`Map`
        :return: bool
        """

    @overload
    def is_bijective(self) -> bool:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def is_identity(self) -> bool:
        """
        is_identity(self)

        :param self: :class:`Map`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def is_identity(self) -> bool:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def is_translation(self) -> bool:
        """
        is_translation(self)

        :param self: :class:`Map`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_equal_space(self, map2: Map) -> bool:
        """
        has_equal_space(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def can_zip(self) -> bool:
        """
        can_zip(self)

        :param self: :class:`Map`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def zip(self) -> object:
        """
        zip(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def zip(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def can_curry(self) -> bool:
        """
        can_curry(self)

        :param self: :class:`Map`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def curry(self) -> object:
        """
        curry(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def curry(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def can_range_curry(self) -> bool:
        """
        can_range_curry(self)

        :param self: :class:`Map`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def range_curry(self) -> object:
        """
        range_curry(self)

        :param self: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def range_curry(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def can_uncurry(self) -> bool:
        """
        can_uncurry(self)

        :param self: :class:`Map`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def uncurry(self) -> object:
        """
        uncurry(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def uncurry(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def make_disjoint(self) -> object:
        """
        make_disjoint(self)

        :param self: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def compute_divs(self) -> object:
        """
        compute_divs(self)

        :param self: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def compute_divs(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def align_divs(self) -> object:
        """
        align_divs(self)

        :param self: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_constraints_involving_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_constraints_involving_dims(self, type, first, n)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_constraints_not_involving_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_constraints_not_involving_dims(self, type, first, n)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def involves_dims(self, type: dim_type, first: int, n: int) -> bool:
        """
        involves_dims(self, type, first, n)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def involves_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> bool:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def plain_get_val_if_fixed(self, type: dim_type, pos: int) -> object:
        """
        plain_get_val_if_fixed(self, type, pos)

        :param self: :class:`Map`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def gist(self, context: Map) -> object:
        """
        gist(self, context)

        :param self: :class:`Map`
        :param context: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def gist(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def gist_domain(self, context: Set) -> object:
        """
        gist_domain(self, context)

        :param self: :class:`Map`
        :param context: :class:`Set`
        :return: :class:`Map`
        """

    @overload
    def gist_domain(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def gist_range(self, context: Set) -> object:
        """
        gist_range(self, context)

        :param self: :class:`Map`
        :param context: :class:`Set`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def gist_range(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def gist_params(self, context: Set) -> object:
        """
        gist_params(self, context)

        :param self: :class:`Map`
        :param context: :class:`Set`
        :return: :class:`Map`
        """

    @overload
    def gist_params(self, arg: Set, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def gist_basic_map(self, context: BasicMap) -> object:
        """
        gist_basic_map(self, context)

        :param self: :class:`Map`
        :param context: :class:`BasicMap`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_range_stride_info(self, pos: int) -> object:
        """
        get_range_stride_info(self, pos)

        :param self: :class:`Map`
        :param pos: :class:`int`
        :return: :class:`StrideInfo`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_range_lattice_tile(self) -> object:
        """
        get_range_lattice_tile(self)

        :param self: :class:`Map`
        :return: :class:`FixedBox`
        """

    def get_range_simple_fixed_box_hull(self) -> object:
        """
        get_range_simple_fixed_box_hull(self)

        :param self: :class:`Map`
        :return: :class:`FixedBox`
        """

    @overload
    def coalesce(self) -> object:
        """
        coalesce(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def coalesce(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def plain_is_equal(self, map2: Map) -> bool:
        """
        plain_is_equal(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __hash__(self) -> int:
        """
        get_hash(self)

        :param self: :class:`Map`
        :return: uint32_t 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_basic_map(self) -> int:
        """
        n_basic_map(self)

        :param self: :class:`Map`
        :return: isl_size
        """

    def foreach_basic_map(self, fn: object) -> stat:
        """
        foreach_basic_map(self, fn)

        :param self: :class:`Map`
        :param fn: callback(bmap)
        :return: isl_stat
        """

    def get_basic_map_list(self) -> object:
        """
        get_basic_map_list(self)

        :param self: :class:`Map`
        :return: :class:`BasicMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def fixed_power_val(self, exp: object) -> object:
        """
        fixed_power_val(self, exp)

        :param self: :class:`Map`
        :param exp: :class:`Val`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def fixed_power_val(self, arg: object, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def power(self) -> object:
        """
        power(self)

        :param self: :class:`Map`
        :return: tuple: (:class:`Map`, exact (Bool))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def power(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def reaching_path_lengths(self) -> object:
        """
        reaching_path_lengths(self)

        :param self: :class:`Map`
        :return: tuple: (:class:`Map`, exact (Bool))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def transitive_closure(self) -> object:
        """
        transitive_closure(self)

        :param self: :class:`Map`
        :return: tuple: (:class:`Map`, exact (Bool))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def transitive_closure(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def lex_le_map(self, map2: Map) -> object:
        """
        lex_le_map(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_lt_map(self, map2: Map) -> object:
        """
        lex_lt_map(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_ge_map(self, map2: Map) -> object:
        """
        lex_ge_map(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_gt_map(self, map2: Map) -> object:
        """
        lex_gt_map(self, map2)

        :param self: :class:`Map`
        :param map2: :class:`Map`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def eq_at_multi_pw_aff(self, mpa: MultiPwAff) -> object:
        """
        eq_at_multi_pw_aff(self, mpa)

        :param self: :class:`Map`
        :param mpa: :class:`MultiPwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_lt_at_multi_pw_aff(self, mpa: MultiPwAff) -> object:
        """
        lex_lt_at_multi_pw_aff(self, mpa)

        :param self: :class:`Map`
        :param mpa: :class:`MultiPwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_le_at_multi_pw_aff(self, mpa: MultiPwAff) -> object:
        """
        lex_le_at_multi_pw_aff(self, mpa)

        :param self: :class:`Map`
        :param mpa: :class:`MultiPwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_gt_at_multi_pw_aff(self, mpa: MultiPwAff) -> object:
        """
        lex_gt_at_multi_pw_aff(self, mpa)

        :param self: :class:`Map`
        :param mpa: :class:`MultiPwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_ge_at_multi_pw_aff(self, mpa: MultiPwAff) -> object:
        """
        lex_ge_at_multi_pw_aff(self, mpa)

        :param self: :class:`Map`
        :param mpa: :class:`MultiPwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`Map`
        :param model: :class:`Space`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def align_params(self, arg: Space, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @overload
    def drop_unused_params(self) -> object:
        """
        drop_unused_params(self)

        :param self: :class:`Map`
        :return: :class:`Map`
        """

    @overload
    def drop_unused_params(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @staticmethod
    def from_aff(aff: Aff) -> object:
        """
        from_aff(aff)

        :param aff: :class:`Aff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_multi_aff(maff: MultiAff) -> object:
        """
        from_multi_aff(maff)

        :param maff: :class:`MultiAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim_min(self, pos: int) -> object:
        """
        dim_min(self, pos)

        :param self: :class:`Map`
        :param pos: :class:`int`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim_max(self, pos: int) -> object:
        """
        dim_max(self, pos)

        :param self: :class:`Map`
        :param pos: :class:`int`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`Map`
        :return: :class:`MapList`
        """

    @overload
    def to_list(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    @staticmethod
    def from_pw_aff(pwaff: PwAff) -> object:
        """
        from_pw_aff(pwaff)

        :param pwaff: :class:`PwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_pw_multi_aff(pma: PwMultiAff) -> object:
        """
        from_pw_multi_aff(pma)

        :param pma: :class:`PwMultiAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def as_pw_multi_aff(self) -> object:
        """
        as_pw_multi_aff(self)

        :param self: :class:`Map`
        :return: :class:`PwMultiAff`
        """

    @staticmethod
    def from_multi_pw_aff(mpa: MultiPwAff) -> object:
        """
        from_multi_pw_aff(mpa)

        :param mpa: :class:`MultiPwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def apply_pw_qpolynomial_fold(self, pwf: PwQPolynomialFold) -> object:
        """
        apply_pw_qpolynomial_fold(self, pwf)

        :param self: :class:`Map`
        :param pwf: :class:`PwQPolynomialFold`
        :return: tuple: (:class:`PwQPolynomialFold`, tight (Bool))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_union_map(self) -> object:
        """
        to_union_map(self)

        :param self: :class:`Map`
        :return: :class:`UnionMap`
        """

    @staticmethod
    def from_union_map(umap: UnionMap) -> object:
        """
        from_union_map(umap)

        :param umap: :class:`UnionMap`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_constraint(self, constraint: Constraint) -> object:
        """
        add_constraint(self, constraint)

        :param self: :class:`Map`
        :param constraint: :class:`Constraint`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def as_union_pw_multi_aff(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def as_multi_union_pw_aff(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def apply_union_pw_qpolynomial_fold(self, arg: UnionPwQPolynomialFold, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def domain_map_union_pw_multi_aff(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def add_map(self, arg: Map, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def intersect_domain_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def intersect_domain_space(self, arg: Space, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def intersect_range_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def intersect_range_space(self, arg: Space, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def intersect_domain_wrapped_domain_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def intersect_range_wrapped_domain_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def preimage_domain_union_pw_multi_aff(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def preimage_range_union_pw_multi_aff(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def get_hash(self) -> int:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def n_map(self) -> int:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def foreach_map(self, arg: object, /) -> stat:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def get_map_list(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def every_map(self, arg: object, /) -> bool:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def remove_map_if(self, arg: object, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def contains(self, arg: Space, /) -> bool:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def extract_map(self, arg: Space, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def isa_map(self) -> bool:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def as_map(self) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def lex_lt_union_map(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def lex_le_union_map(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def lex_gt_union_map(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def lex_ge_union_map(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def eq_at_multi_union_pw_aff(self, arg: MultiUnionPwAff, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def lex_le_at_multi_union_pw_aff(self, arg: MultiUnionPwAff, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def lex_lt_at_multi_union_pw_aff(self, arg: MultiUnionPwAff, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def lex_ge_at_multi_union_pw_aff(self, arg: MultiUnionPwAff, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def lex_gt_at_multi_union_pw_aff(self, arg: MultiUnionPwAff, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

    def compute_flow(self, arg0: UnionMap, arg1: UnionMap, arg2: UnionMap, /) -> object:
        """Upcast from :class:`Map` to :class:`UnionMap`"""

class MapList:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`MapList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_map(el: Map) -> object:
        """
        from_map(el)

        :param el: :class:`Map`
        :return: :class:`MapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`MapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`MapList`
        :return: :class:`MapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: Map) -> object:
        """
        add(self, el)

        :param self: :class:`MapList`
        :param el: :class:`Map`
        :return: :class:`MapList`
        """

    def insert(self, pos: int, el: Map) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`MapList`
        :param pos: :class:`unsigned`
        :param el: :class:`Map`
        :return: :class:`MapList`
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`MapList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`MapList`
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`MapList`
        :return: :class:`MapList`
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`MapList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`MapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`MapList`
        :return: :class:`MapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: MapList) -> object:
        """
        concat(self, list2)

        :param self: :class:`MapList`
        :param list2: :class:`MapList`
        :return: :class:`MapList`
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`MapList`
        :return: isl_size
        """

    def n_map(self) -> int:
        """
        n_map(self)

        :param self: :class:`MapList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`MapList`
        :param index: :class:`int`
        :return: :class:`Map`
        """

    def get_map(self, index: int) -> object:
        """
        get_map(self, index)

        :param self: :class:`MapList`
        :param index: :class:`int`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: Map) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`MapList`
        :param index: :class:`int`
        :param el: :class:`Map`
        :return: :class:`MapList`
        """

    def set_map(self, index: int, el: Map) -> object:
        """
        set_map(self, index, el)

        :param self: :class:`MapList`
        :param index: :class:`int`
        :param el: :class:`Map`
        :return: :class:`MapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`MapList`
        :param fn: callback(el)
        :return: isl_stat
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`MapList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`MapList`
        :param fn: callback(el)
        :return: :class:`MapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`MapList`
        :param cmp: callback(a, b)
        :return: :class:`MapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`MapList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`MapList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`MapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Mat:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Mat`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n_row: int, n_col: int) -> object:
        """
        alloc(ctx, n_row, n_col)

        :param ctx: :class:`Context`
        :param n_row: :class:`unsigned`
        :param n_col: :class:`unsigned`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def extend(self, n_row: int, n_col: int) -> object:
        """
        extend(self, n_row, n_col)

        :param self: :class:`Mat`
        :param n_row: :class:`unsigned`
        :param n_col: :class:`unsigned`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def identity(ctx: Context, n_row: int) -> object:
        """
        identity(ctx, n_row)

        :param ctx: :class:`Context`
        :param n_row: :class:`unsigned`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`Mat`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def rows(self) -> int:
        """
        rows(self)

        :param self: :class:`Mat`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def cols(self) -> int:
        """
        cols(self)

        :param self: :class:`Mat`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_element_val(self, row: int, col: int) -> object:
        """
        get_element_val(self, row, col)

        :param self: :class:`Mat`
        :param row: :class:`int`
        :param col: :class:`int`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_element_val(self, row: int, col: int, v: object) -> object:
        """
        set_element_val(self, row, col, v)

        :param self: :class:`Mat`
        :param row: :class:`int`
        :param col: :class:`int`
        :param v: :class:`Val`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def swap_cols(self, i: int, j: int) -> object:
        """
        swap_cols(self, i, j)

        :param self: :class:`Mat`
        :param i: :class:`unsigned`
        :param j: :class:`unsigned`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def swap_rows(self, i: int, j: int) -> object:
        """
        swap_rows(self, i, j)

        :param self: :class:`Mat`
        :param i: :class:`unsigned`
        :param j: :class:`unsigned`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def vec_product(self, vec: Vec) -> object:
        """
        vec_product(self, vec)

        :param self: :class:`Mat`
        :param vec: :class:`Vec`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def vec_inverse_product(self, vec: Vec) -> object:
        """
        vec_inverse_product(self, vec)

        :param self: :class:`Mat`
        :param vec: :class:`Vec`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def aff_direct_sum(self, right: Mat) -> object:
        """
        aff_direct_sum(self, right)

        :param self: :class:`Mat`
        :param right: :class:`Mat`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def diagonal(self, mat2: Mat) -> object:
        """
        diagonal(self, mat2)

        :param self: :class:`Mat`
        :param mat2: :class:`Mat`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def left_hermite(self, neg: int) -> object:
        """
        left_hermite(self, neg)

        :param self: :class:`Mat`
        :param neg: :class:`int`
        :return: tuple: (:class:`Mat`, U (:class:`Mat`), Q (:class:`Mat`))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lin_to_aff(self) -> object:
        """
        lin_to_aff(self)

        :param self: :class:`Mat`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def inverse_product(self, right: Mat) -> object:
        """
        inverse_product(self, right)

        :param self: :class:`Mat`
        :param right: :class:`Mat`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def product(self, right: Mat) -> object:
        """
        product(self, right)

        :param self: :class:`Mat`
        :param right: :class:`Mat`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def transpose(self) -> object:
        """
        transpose(self)

        :param self: :class:`Mat`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def right_inverse(self) -> object:
        """
        right_inverse(self)

        :param self: :class:`Mat`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def right_kernel(self) -> object:
        """
        right_kernel(self)

        :param self: :class:`Mat`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def normalize(self) -> object:
        """
        normalize(self)

        :param self: :class:`Mat`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def normalize_row(self, row: int) -> object:
        """
        normalize_row(self, row)

        :param self: :class:`Mat`
        :param row: :class:`int`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_cols(self, col: int, n: int) -> object:
        """
        drop_cols(self, col, n)

        :param self: :class:`Mat`
        :param col: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_rows(self, row: int, n: int) -> object:
        """
        drop_rows(self, row, n)

        :param self: :class:`Mat`
        :param row: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_cols(self, col: int, n: int) -> object:
        """
        insert_cols(self, col, n)

        :param self: :class:`Mat`
        :param col: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_rows(self, row: int, n: int) -> object:
        """
        insert_rows(self, row, n)

        :param self: :class:`Mat`
        :param row: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def move_cols(self, dst_col: int, src_col: int, n: int) -> object:
        """
        move_cols(self, dst_col, src_col, n)

        :param self: :class:`Mat`
        :param dst_col: :class:`unsigned`
        :param src_col: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_rows(self, n: int) -> object:
        """
        add_rows(self, n)

        :param self: :class:`Mat`
        :param n: :class:`unsigned`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_zero_cols(self, first: int, n: int) -> object:
        """
        insert_zero_cols(self, first, n)

        :param self: :class:`Mat`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_zero_cols(self, n: int) -> object:
        """
        add_zero_cols(self, n)

        :param self: :class:`Mat`
        :param n: :class:`unsigned`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_zero_rows(self, row: int, n: int) -> object:
        """
        insert_zero_rows(self, row, n)

        :param self: :class:`Mat`
        :param row: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_zero_rows(self, n: int) -> object:
        """
        add_zero_rows(self, n)

        :param self: :class:`Mat`
        :param n: :class:`unsigned`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def col_add(self, dst_col: int, src_col: int) -> None:
        """
        col_add(self, dst_col, src_col)

        :param self: :class:`Mat`
        :param dst_col: :class:`int`
        :param src_col: :class:`int`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def unimodular_complete(self, row: int) -> object:
        """
        unimodular_complete(self, row)

        :param self: :class:`Mat`
        :param row: :class:`int`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def row_basis(self) -> object:
        """
        row_basis(self)

        :param self: :class:`Mat`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def row_basis_extension(self, mat2: Mat) -> object:
        """
        row_basis_extension(self, mat2)

        :param self: :class:`Mat`
        :param mat2: :class:`Mat`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_row_vec(vec: Vec) -> object:
        """
        from_row_vec(vec)

        :param vec: :class:`Vec`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, bot: Mat) -> object:
        """
        concat(self, bot)

        :param self: :class:`Mat`
        :param bot: :class:`Mat`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def vec_concat(self, bot: Vec) -> object:
        """
        vec_concat(self, bot)

        :param self: :class:`Mat`
        :param bot: :class:`Vec`
        :return: :class:`Mat`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_equal(self, mat2: Mat) -> bool:
        """
        is_equal(self, mat2)

        :param self: :class:`Mat`
        :param mat2: :class:`Mat`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_linearly_independent_rows(self, mat2: Mat) -> bool:
        """
        has_linearly_independent_rows(self, mat2)

        :param self: :class:`Mat`
        :param mat2: :class:`Mat`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def rank(self) -> int:
        """
        rank(self)

        :param self: :class:`Mat`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def initial_non_zero_cols(self) -> int:
        """
        initial_non_zero_cols(self)

        :param self: :class:`Mat`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`Mat`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class MultiAff:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    @overload
    def as_set(self) -> object:
        """
        as_set(self)

        :param self: :class:`MultiAff`
        :return: :class:`Set`
        """

    @overload
    def as_set(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def as_map(self) -> object:
        """
        as_map(self)

        :param self: :class:`MultiAff`
        :return: :class:`Map`
        """

    @overload
    def as_map(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`MultiAff`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_ctx(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def get_ctx(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`MultiAff`
        :return: :class:`Space`
        """

    @overload
    def get_space(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def get_space(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def get_domain_space(self) -> object:
        """
        get_domain_space(self)

        :param self: :class:`MultiAff`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_domain_space(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def get_list(self) -> object:
        """
        get_list(self)

        :param self: :class:`MultiAff`
        :return: :class:`AffList`
        """

    @staticmethod
    def from_aff_list(space: Space, list: AffList) -> object:
        """
        from_aff_list(space, list)

        :param space: :class:`Space`
        :param list: :class:`AffList`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`MultiAff`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def copy(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def copy(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def plain_is_equal(self, multi2: MultiAff) -> bool:
        """
        plain_is_equal(self, multi2)

        :param self: :class:`MultiAff`
        :param multi2: :class:`MultiAff`
        :return: bool
        """

    @overload
    def plain_is_equal(self, arg: PwMultiAff, /) -> bool:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def plain_is_equal(self, arg: UnionPwMultiAff, /) -> bool:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`MultiAff`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def reset_user(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def reset_user(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`MultiAff`
        :return: isl_size
        """

    @overload
    def get_at(self, pos: int) -> object:
        """
        get_at(self, pos)

        :param self: :class:`MultiAff`
        :param pos: :class:`int`
        :return: :class:`Aff`
        """

    @overload
    def get_at(self, arg: int, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def get_aff(self, pos: int) -> object:
        """
        get_aff(self, pos)

        :param self: :class:`MultiAff`
        :param pos: :class:`int`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, pos: int, el: Aff) -> object:
        """
        set_at(self, pos, el)

        :param self: :class:`MultiAff`
        :param pos: :class:`int`
        :param el: :class:`Aff`
        :return: :class:`MultiAff`
        """

    def set_aff(self, pos: int, el: Aff) -> object:
        """
        set_aff(self, pos, el)

        :param self: :class:`MultiAff`
        :param pos: :class:`int`
        :param el: :class:`Aff`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_splice(self, pos: int, multi2: MultiAff) -> object:
        """
        range_splice(self, pos, multi2)

        :param self: :class:`MultiAff`
        :param pos: :class:`unsigned`
        :param multi2: :class:`MultiAff`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def flatten_range(self) -> object:
        """
        flatten_range(self)

        :param self: :class:`MultiAff`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def flat_range_product(self, multi2: MultiAff) -> object:
        """
        flat_range_product(self, multi2)

        :param self: :class:`MultiAff`
        :param multi2: :class:`MultiAff`
        :return: :class:`MultiAff`
        """

    @overload
    def flat_range_product(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def flat_range_product(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def range_product(self, multi2: MultiAff) -> object:
        """
        range_product(self, multi2)

        :param self: :class:`MultiAff`
        :param multi2: :class:`MultiAff`
        :return: :class:`MultiAff`
        """

    @overload
    def range_product(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def range_product(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def factor_range(self) -> object:
        """
        factor_range(self)

        :param self: :class:`MultiAff`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_is_wrapping(self) -> bool:
        """
        range_is_wrapping(self)

        :param self: :class:`MultiAff`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def range_factor_domain(self) -> object:
        """
        range_factor_domain(self)

        :param self: :class:`MultiAff`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def range_factor_domain(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def range_factor_domain(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def range_factor_range(self) -> object:
        """
        range_factor_range(self)

        :param self: :class:`MultiAff`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def range_factor_range(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def range_factor_range(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`MultiAff`
        :param model: :class:`Space`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def align_params(self, arg: Space, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def align_params(self, arg: Space, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def from_range(self) -> object:
        """
        from_range(self)

        :param self: :class:`MultiAff`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def identity_multi_aff(self) -> object:
        """
        identity_multi_aff(self)

        :param self: :class:`MultiAff`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def identity(space: Space) -> object:
        """
        identity(space)

        :param space: :class:`Space`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def identity_on_domain_space(space: Space) -> object:
        """
        identity_on_domain_space(space)

        :param space: :class:`Space`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_cmp(self, multi2: MultiAff) -> int:
        """
        plain_cmp(self, multi2)

        :param self: :class:`MultiAff`
        :param multi2: :class:`MultiAff`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def scale_val(self, v: object) -> object:
        """
        scale_val(self, v)

        :param self: :class:`MultiAff`
        :param v: :class:`Val`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def scale_val(self, arg: object, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def scale_val(self, arg: object, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def scale_down_val(self, v: object) -> object:
        """
        scale_down_val(self, v)

        :param self: :class:`MultiAff`
        :param v: :class:`Val`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def scale_down_val(self, arg: object, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def scale_down_val(self, arg: object, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def scale_multi_val(self, mv: MultiVal) -> object:
        """
        scale_multi_val(self, mv)

        :param self: :class:`MultiAff`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def scale_multi_val(self, arg: MultiVal, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def scale_multi_val(self, arg: MultiVal, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def scale_down_multi_val(self, mv: MultiVal) -> object:
        """
        scale_down_multi_val(self, mv)

        :param self: :class:`MultiAff`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def scale_down_multi_val(self, arg: MultiVal, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def mod_multi_val(self, mv: MultiVal) -> object:
        """
        mod_multi_val(self, mv)

        :param self: :class:`MultiAff`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def add(self, multi2: MultiAff) -> object:
        """
        add(self, multi2)

        :param self: :class:`MultiAff`
        :param multi2: :class:`MultiAff`
        :return: :class:`MultiAff`
        """

    @overload
    def add(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def add(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def sub(self, multi2: MultiAff) -> object:
        """
        sub(self, multi2)

        :param self: :class:`MultiAff`
        :param multi2: :class:`MultiAff`
        :return: :class:`MultiAff`
        """

    @overload
    def sub(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def sub(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`MultiAff`
        :return: :class:`MultiAff`
        """

    @overload
    def neg(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def neg(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def add_constant_val(self, v: object) -> object:
        """
        add_constant_val(self, v)

        :param self: :class:`MultiAff`
        :param v: :class:`Val`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def add_constant_val(self, arg: object, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def add_constant_multi_val(self, mv: MultiVal) -> object:
        """
        add_constant_multi_val(self, mv)

        :param self: :class:`MultiAff`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def add_constant_multi_val(self, arg: MultiVal, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @staticmethod
    def zero(space: Space) -> object:
        """
        zero(space)

        :param space: :class:`Space`
        :return: :class:`MultiAff`
        """

    @overload
    def involves_nan(self) -> bool:
        """
        involves_nan(self)

        :param self: :class:`MultiAff`
        :return: bool
        """

    @overload
    def involves_nan(self) -> bool:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def involves_nan(self) -> bool:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`MultiAff`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dim(self, arg: dim_type, /) -> int:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def dim(self, arg: dim_type, /) -> int:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def drop_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_dims(self, type, first, n)

        :param self: :class:`MultiAff`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def drop_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def drop_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def involves_dims(self, type: dim_type, first: int, n: int) -> bool:
        """
        involves_dims(self, type, first, n)

        :param self: :class:`MultiAff`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def involves_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> bool:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def insert_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        insert_dims(self, type, first, n)

        :param self: :class:`MultiAff`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_dims(self, type: dim_type, n: int) -> object:
        """
        add_dims(self, type, n)

        :param self: :class:`MultiAff`
        :param type: :class:`dim_type`
        :param n: :class:`unsigned`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def project_domain_on_params(self) -> object:
        """
        project_domain_on_params(self)

        :param self: :class:`MultiAff`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def project_domain_on_params(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def insert_domain(self, domain: Space) -> object:
        """
        insert_domain(self, domain)

        :param self: :class:`MultiAff`
        :param domain: :class:`Space`
        :return: :class:`MultiAff`
        """

    @overload
    def insert_domain(self, arg: Space, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def involves_locals(self) -> bool:
        """
        involves_locals(self)

        :param self: :class:`MultiAff`
        :return: bool
        """

    @overload
    def involves_locals(self) -> bool:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def involves_locals(self) -> bool:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`MultiAff`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def find_dim_by_name(self, arg0: dim_type, arg1: str, /) -> int:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def find_dim_by_name(self, arg0: dim_type, arg1: str, /) -> int:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def find_dim_by_id(self, type: dim_type, id: Id) -> int:
        """
        find_dim_by_id(self, type, id)

        :param self: :class:`MultiAff`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_dim_id(self, type: dim_type, pos: int) -> object:
        """
        get_dim_id(self, type, pos)

        :param self: :class:`MultiAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_dim_id(self, arg0: dim_type, arg1: int, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def set_dim_name(self, type: dim_type, pos: int, s: str) -> object:
        """
        set_dim_name(self, type, pos, s)

        :param self: :class:`MultiAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param s: string
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_dim_name(self, arg0: dim_type, arg1: int, arg2: str, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def set_dim_id(self, type: dim_type, pos: int, id: Id) -> object:
        """
        set_dim_id(self, type, pos, id)

        :param self: :class:`MultiAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param id: :class:`Id`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_dim_id(self, arg0: dim_type, arg1: int, arg2: Id, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def get_tuple_name(self, type: dim_type) -> object:
        """
        get_tuple_name(self, type)

        :param self: :class:`MultiAff`
        :param type: :class:`dim_type`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_tuple_name(self, arg: dim_type, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def has_range_tuple_id(self) -> bool:
        """
        has_range_tuple_id(self)

        :param self: :class:`MultiAff`
        :return: bool
        """

    @overload
    def has_range_tuple_id(self) -> bool:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def has_tuple_id(self, type: dim_type) -> bool:
        """
        has_tuple_id(self, type)

        :param self: :class:`MultiAff`
        :param type: :class:`dim_type`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def has_tuple_id(self, arg: dim_type, /) -> bool:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def get_range_tuple_id(self) -> object:
        """
        get_range_tuple_id(self)

        :param self: :class:`MultiAff`
        :return: :class:`Id`
        """

    @overload
    def get_range_tuple_id(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def get_tuple_id(self, type: dim_type) -> object:
        """
        get_tuple_id(self, type)

        :param self: :class:`MultiAff`
        :param type: :class:`dim_type`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_tuple_id(self, arg: dim_type, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def set_tuple_name(self, type: dim_type, s: str) -> object:
        """
        set_tuple_name(self, type, s)

        :param self: :class:`MultiAff`
        :param type: :class:`dim_type`
        :param s: string
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_range_tuple_id(self, id: Id) -> object:
        """
        set_range_tuple_id(self, id)

        :param self: :class:`MultiAff`
        :param id: :class:`Id`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_range_tuple_id(self, arg: Id, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def set_tuple_id(self, type: dim_type, id: Id) -> object:
        """
        set_tuple_id(self, type, id)

        :param self: :class:`MultiAff`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_tuple_id(self, arg0: dim_type, arg1: Id, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def reset_range_tuple_id(self) -> object:
        """
        reset_range_tuple_id(self)

        :param self: :class:`MultiAff`
        :return: :class:`MultiAff`
        """

    @overload
    def reset_tuple_id(self, type: dim_type) -> object:
        """
        reset_tuple_id(self, type)

        :param self: :class:`MultiAff`
        :param type: :class:`dim_type`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def reset_tuple_id(self, arg: dim_type, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def product(self, multi2: MultiAff) -> object:
        """
        product(self, multi2)

        :param self: :class:`MultiAff`
        :param multi2: :class:`MultiAff`
        :return: :class:`MultiAff`
        """

    @overload
    def product(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def splice(self, in_pos: int, out_pos: int, multi2: MultiAff) -> object:
        """
        splice(self, in_pos, out_pos, multi2)

        :param self: :class:`MultiAff`
        :param in_pos: :class:`unsigned`
        :param out_pos: :class:`unsigned`
        :param multi2: :class:`MultiAff`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def bind_domain(self, tuple: MultiId) -> object:
        """
        bind_domain(self, tuple)

        :param self: :class:`MultiAff`
        :param tuple: :class:`MultiId`
        :return: :class:`MultiAff`
        """

    @overload
    def bind_domain(self, arg: MultiId, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def bind_domain_wrapped_domain(self, tuple: MultiId) -> object:
        """
        bind_domain_wrapped_domain(self, tuple)

        :param self: :class:`MultiAff`
        :param tuple: :class:`MultiId`
        :return: :class:`MultiAff`
        """

    @overload
    def bind_domain_wrapped_domain(self, arg: MultiId, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def unbind_params_insert_domain(self, domain: MultiId) -> object:
        """
        unbind_params_insert_domain(self, domain)

        :param self: :class:`MultiAff`
        :param domain: :class:`MultiId`
        :return: :class:`MultiAff`
        """

    @overload
    def domain_reverse(self) -> object:
        """
        domain_reverse(self)

        :param self: :class:`MultiAff`
        :return: :class:`MultiAff`
        """

    @overload
    def domain_reverse(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @staticmethod
    def from_aff(aff: Aff) -> object:
        """
        from_aff(aff)

        :param aff: :class:`Aff`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def domain_map(space: Space) -> object:
        """
        domain_map(space)

        :param space: :class:`Space`
        :return: :class:`MultiAff`
        """

    @staticmethod
    def range_map(space: Space) -> object:
        """
        range_map(space)

        :param space: :class:`Space`
        :return: :class:`MultiAff`
        """

    @staticmethod
    def project_out_map(space: Space, type: dim_type, first: int, n: int) -> object:
        """
        project_out_map(space, type, first, n)

        :param space: :class:`Space`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def multi_val_on_domain_space(space: Space, mv: MultiVal) -> object:
        """
        multi_val_on_domain_space(space, mv)

        :param space: :class:`Space`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def multi_val_on_space(space: Space, mv: MultiVal) -> object:
        """
        multi_val_on_space(space, mv)

        :param space: :class:`Space`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_constant_multi_val(self) -> object:
        """
        get_constant_multi_val(self)

        :param self: :class:`MultiAff`
        :return: :class:`MultiVal`
        """

    def floor(self) -> object:
        """
        floor(self)

        :param self: :class:`MultiAff`
        :return: :class:`MultiAff`
        """

    @overload
    def gist_params(self, context: Set) -> object:
        """
        gist_params(self, context)

        :param self: :class:`MultiAff`
        :param context: :class:`Set`
        :return: :class:`MultiAff`
        """

    @overload
    def gist_params(self, arg: Set, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def gist_params(self, arg: Set, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def gist(self, context: Set) -> object:
        """
        gist(self, context)

        :param self: :class:`MultiAff`
        :param context: :class:`Set`
        :return: :class:`MultiAff`
        """

    @overload
    def gist(self, arg: Set, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def gist(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def lift(self) -> object:
        """
        lift(self)

        :param self: :class:`MultiAff`
        :return: tuple: (:class:`MultiAff`, ls (:class:`LocalSpace`))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def pullback_multi_aff(self, ma2: MultiAff) -> object:
        """
        pullback_multi_aff(self, ma2)

        :param self: :class:`MultiAff`
        :param ma2: :class:`MultiAff`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def pullback_multi_aff(self, arg: MultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def move_dims(self, dst_type: dim_type, dst_pos: int, src_type: dim_type, src_pos: int, n: int) -> object:
        """
        move_dims(self, dst_type, dst_pos, src_type, src_pos, n)

        :param self: :class:`MultiAff`
        :param dst_type: :class:`dim_type`
        :param dst_pos: :class:`unsigned`
        :param src_type: :class:`dim_type`
        :param src_pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_lt_set(self, ma2: MultiAff) -> object:
        """
        lex_lt_set(self, ma2)

        :param self: :class:`MultiAff`
        :param ma2: :class:`MultiAff`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_le_set(self, ma2: MultiAff) -> object:
        """
        lex_le_set(self, ma2)

        :param self: :class:`MultiAff`
        :param ma2: :class:`MultiAff`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_gt_set(self, ma2: MultiAff) -> object:
        """
        lex_gt_set(self, ma2)

        :param self: :class:`MultiAff`
        :param ma2: :class:`MultiAff`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_ge_set(self, ma2: MultiAff) -> object:
        """
        lex_ge_set(self, ma2)

        :param self: :class:`MultiAff`
        :param ma2: :class:`MultiAff`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def bind(self, tuple: MultiId) -> object:
        """
        bind(self, tuple)

        :param self: :class:`MultiAff`
        :param tuple: :class:`MultiId`
        :return: :class:`BasicSet`
        """

    @overload
    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`MultiAff`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def to_str(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def to_str(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`MultiAff`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dump(self) -> None:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    @overload
    def dump(self) -> None:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def to_pw_multi_aff(self) -> object:
        """
        to_pw_multi_aff(self)

        :param self: :class:`MultiAff`
        :return: :class:`PwMultiAff`
        """

    def flatten_domain(self) -> object:
        """
        flatten_domain(self)

        :param self: :class:`MultiAff`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def to_multi_pw_aff(self) -> object:
        """
        to_multi_pw_aff(self)

        :param self: :class:`MultiAff`
        :return: :class:`MultiPwAff`
        """

    @overload
    def to_multi_pw_aff(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def to_multi_union_pw_aff(self) -> object:
        """
        to_multi_union_pw_aff(self)

        :param self: :class:`MultiAff`
        :return: :class:`MultiUnionPwAff`
        """

    def involves_param_id(self, arg: Id, /) -> bool:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def get_pw_aff(self, arg: int, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def set_pw_aff(self, arg0: int, arg1: PwAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def has_tuple_name(self, arg: dim_type, /) -> bool:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def domain(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def get_dim_name(self, arg0: dim_type, arg1: int, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def is_equal(self, arg: PwMultiAff, /) -> bool:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def union_add(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def union_lexmin(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def union_lexmax(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def intersect_params(self, arg: Set, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def intersect_domain(self, arg: Set, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def intersect_domain_wrapped_domain(self, arg: Set, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def intersect_domain_wrapped_range(self, arg: Set, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def subtract_domain(self, arg: Set, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def drop_unused_params(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def coalesce(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def pullback_pw_multi_aff(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def preimage_domain_wrapped_domain_pw_multi_aff(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def n_piece(self) -> int:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def foreach_piece(self, arg: object, /) -> stat:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def every_piece(self, arg: object, /) -> bool:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def isa_multi_aff(self) -> bool:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def as_multi_aff(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def to_union_pw_multi_aff(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def to_list(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def min_multi_val(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def max_multi_val(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`PwMultiAff`"""

    def get_union_pw_aff(self, arg: int, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def add_pw_multi_aff(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def get_pw_multi_aff_list(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def pullback_union_pw_multi_aff(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def apply_union_pw_multi_aff(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def preimage_domain_wrapped_domain_union_pw_multi_aff(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def n_pw_multi_aff(self) -> int:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def foreach_pw_multi_aff(self, arg: object, /) -> stat:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def every_pw_multi_aff(self, arg: object, /) -> bool:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def extract_pw_multi_aff(self, arg: Space, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def isa_pw_multi_aff(self) -> bool:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def as_pw_multi_aff(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def plain_is_empty(self) -> bool:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def intersect_domain_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def intersect_domain_space(self, arg: Space, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def subtract_domain_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def subtract_domain_space(self, arg: Space, /) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def as_union_map(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

    def as_multi_union_pw_aff(self) -> object:
        """Upcast from :class:`MultiAff` to :class:`UnionPwMultiAff`"""

class MultiId:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`MultiId`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`MultiId`
        :return: :class:`Space`
        """

    def get_domain_space(self) -> object:
        """
        get_domain_space(self)

        :param self: :class:`MultiId`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_list(self) -> object:
        """
        get_list(self)

        :param self: :class:`MultiId`
        :return: :class:`IdList`
        """

    @staticmethod
    def from_id_list(space: Space, list: IdList) -> object:
        """
        from_id_list(space, list)

        :param space: :class:`Space`
        :param list: :class:`IdList`
        :return: :class:`MultiId`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`MultiId`
        :return: :class:`MultiId`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_is_equal(self, multi2: MultiId) -> bool:
        """
        plain_is_equal(self, multi2)

        :param self: :class:`MultiId`
        :param multi2: :class:`MultiId`
        :return: bool
        """

    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`MultiId`
        :return: :class:`MultiId`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`MultiId`
        :return: isl_size
        """

    def get_at(self, pos: int) -> object:
        """
        get_at(self, pos)

        :param self: :class:`MultiId`
        :param pos: :class:`int`
        :return: :class:`Id`
        """

    def get_id(self, pos: int) -> object:
        """
        get_id(self, pos)

        :param self: :class:`MultiId`
        :param pos: :class:`int`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, pos: int, el: Id) -> object:
        """
        set_at(self, pos, el)

        :param self: :class:`MultiId`
        :param pos: :class:`int`
        :param el: :class:`Id`
        :return: :class:`MultiId`
        """

    def set_id(self, pos: int, el: Id) -> object:
        """
        set_id(self, pos, el)

        :param self: :class:`MultiId`
        :param pos: :class:`int`
        :param el: :class:`Id`
        :return: :class:`MultiId`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_splice(self, pos: int, multi2: MultiId) -> object:
        """
        range_splice(self, pos, multi2)

        :param self: :class:`MultiId`
        :param pos: :class:`unsigned`
        :param multi2: :class:`MultiId`
        :return: :class:`MultiId`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def flatten_range(self) -> object:
        """
        flatten_range(self)

        :param self: :class:`MultiId`
        :return: :class:`MultiId`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def flat_range_product(self, multi2: MultiId) -> object:
        """
        flat_range_product(self, multi2)

        :param self: :class:`MultiId`
        :param multi2: :class:`MultiId`
        :return: :class:`MultiId`
        """

    def range_product(self, multi2: MultiId) -> object:
        """
        range_product(self, multi2)

        :param self: :class:`MultiId`
        :param multi2: :class:`MultiId`
        :return: :class:`MultiId`
        """

    def factor_range(self) -> object:
        """
        factor_range(self)

        :param self: :class:`MultiId`
        :return: :class:`MultiId`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_is_wrapping(self) -> bool:
        """
        range_is_wrapping(self)

        :param self: :class:`MultiId`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_factor_domain(self) -> object:
        """
        range_factor_domain(self)

        :param self: :class:`MultiId`
        :return: :class:`MultiId`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_factor_range(self) -> object:
        """
        range_factor_range(self)

        :param self: :class:`MultiId`
        :return: :class:`MultiId`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`MultiId`
        :param model: :class:`Space`
        :return: :class:`MultiId`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def from_range(self) -> object:
        """
        from_range(self)

        :param self: :class:`MultiId`
        :return: :class:`MultiId`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`MultiId`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`MultiId`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`MultiId`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class MultiPwAff:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`Space`
        """

    def get_domain_space(self) -> object:
        """
        get_domain_space(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_list(self) -> object:
        """
        get_list(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`PwAffList`
        """

    @staticmethod
    def from_pw_aff_list(space: Space, list: PwAffList) -> object:
        """
        from_pw_aff_list(space, list)

        :param space: :class:`Space`
        :param list: :class:`PwAffList`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_is_equal(self, multi2: MultiPwAff) -> bool:
        """
        plain_is_equal(self, multi2)

        :param self: :class:`MultiPwAff`
        :param multi2: :class:`MultiPwAff`
        :return: bool
        """

    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`MultiPwAff`
        :return: isl_size
        """

    def get_at(self, pos: int) -> object:
        """
        get_at(self, pos)

        :param self: :class:`MultiPwAff`
        :param pos: :class:`int`
        :return: :class:`PwAff`
        """

    def get_pw_aff(self, pos: int) -> object:
        """
        get_pw_aff(self, pos)

        :param self: :class:`MultiPwAff`
        :param pos: :class:`int`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, pos: int, el: PwAff) -> object:
        """
        set_at(self, pos, el)

        :param self: :class:`MultiPwAff`
        :param pos: :class:`int`
        :param el: :class:`PwAff`
        :return: :class:`MultiPwAff`
        """

    def set_pw_aff(self, pos: int, el: PwAff) -> object:
        """
        set_pw_aff(self, pos, el)

        :param self: :class:`MultiPwAff`
        :param pos: :class:`int`
        :param el: :class:`PwAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_splice(self, pos: int, multi2: MultiPwAff) -> object:
        """
        range_splice(self, pos, multi2)

        :param self: :class:`MultiPwAff`
        :param pos: :class:`unsigned`
        :param multi2: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def flatten_range(self) -> object:
        """
        flatten_range(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def flat_range_product(self, multi2: MultiPwAff) -> object:
        """
        flat_range_product(self, multi2)

        :param self: :class:`MultiPwAff`
        :param multi2: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`
        """

    def range_product(self, multi2: MultiPwAff) -> object:
        """
        range_product(self, multi2)

        :param self: :class:`MultiPwAff`
        :param multi2: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`
        """

    def factor_range(self) -> object:
        """
        factor_range(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_is_wrapping(self) -> bool:
        """
        range_is_wrapping(self)

        :param self: :class:`MultiPwAff`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_factor_domain(self) -> object:
        """
        range_factor_domain(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_factor_range(self) -> object:
        """
        range_factor_range(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`MultiPwAff`
        :param model: :class:`Space`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def from_range(self) -> object:
        """
        from_range(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def identity_multi_pw_aff(self) -> object:
        """
        identity_multi_pw_aff(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def identity(space: Space) -> object:
        """
        identity(space)

        :param space: :class:`Space`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def identity_on_domain_space(space: Space) -> object:
        """
        identity_on_domain_space(space)

        :param space: :class:`Space`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_val(self, v: object) -> object:
        """
        scale_val(self, v)

        :param self: :class:`MultiPwAff`
        :param v: :class:`Val`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_down_val(self, v: object) -> object:
        """
        scale_down_val(self, v)

        :param self: :class:`MultiPwAff`
        :param v: :class:`Val`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_multi_val(self, mv: MultiVal) -> object:
        """
        scale_multi_val(self, mv)

        :param self: :class:`MultiPwAff`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_down_multi_val(self, mv: MultiVal) -> object:
        """
        scale_down_multi_val(self, mv)

        :param self: :class:`MultiPwAff`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def mod_multi_val(self, mv: MultiVal) -> object:
        """
        mod_multi_val(self, mv)

        :param self: :class:`MultiPwAff`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, multi2: MultiPwAff) -> object:
        """
        add(self, multi2)

        :param self: :class:`MultiPwAff`
        :param multi2: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`
        """

    def sub(self, multi2: MultiPwAff) -> object:
        """
        sub(self, multi2)

        :param self: :class:`MultiPwAff`
        :param multi2: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`
        """

    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`
        """

    def min(self, multi2: MultiPwAff) -> object:
        """
        min(self, multi2)

        :param self: :class:`MultiPwAff`
        :param multi2: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`
        """

    def max(self, multi2: MultiPwAff) -> object:
        """
        max(self, multi2)

        :param self: :class:`MultiPwAff`
        :param multi2: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`
        """

    def add_constant_val(self, v: object) -> object:
        """
        add_constant_val(self, v)

        :param self: :class:`MultiPwAff`
        :param v: :class:`Val`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_constant_multi_val(self, mv: MultiVal) -> object:
        """
        add_constant_multi_val(self, mv)

        :param self: :class:`MultiPwAff`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def zero(space: Space) -> object:
        """
        zero(space)

        :param space: :class:`Space`
        :return: :class:`MultiPwAff`
        """

    def involves_nan(self) -> bool:
        """
        involves_nan(self)

        :param self: :class:`MultiPwAff`
        :return: bool
        """

    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`MultiPwAff`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_dims(self, type, first, n)

        :param self: :class:`MultiPwAff`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_dims(self, type: dim_type, first: int, n: int) -> bool:
        """
        involves_dims(self, type, first, n)

        :param self: :class:`MultiPwAff`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        insert_dims(self, type, first, n)

        :param self: :class:`MultiPwAff`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_dims(self, type: dim_type, n: int) -> object:
        """
        add_dims(self, type, n)

        :param self: :class:`MultiPwAff`
        :param type: :class:`dim_type`
        :param n: :class:`unsigned`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def project_domain_on_params(self) -> object:
        """
        project_domain_on_params(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`MultiPwAff`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def find_dim_by_id(self, type: dim_type, id: Id) -> int:
        """
        find_dim_by_id(self, type, id)

        :param self: :class:`MultiPwAff`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_dim_id(self, type: dim_type, pos: int) -> object:
        """
        get_dim_id(self, type, pos)

        :param self: :class:`MultiPwAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_name(self, type: dim_type, pos: int, s: str) -> object:
        """
        set_dim_name(self, type, pos, s)

        :param self: :class:`MultiPwAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param s: string
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_id(self, type: dim_type, pos: int, id: Id) -> object:
        """
        set_dim_id(self, type, pos, id)

        :param self: :class:`MultiPwAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param id: :class:`Id`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_domain(self, domain: Space) -> object:
        """
        insert_domain(self, domain)

        :param self: :class:`MultiPwAff`
        :param domain: :class:`Space`
        :return: :class:`MultiPwAff`
        """

    def get_tuple_name(self, type: dim_type) -> object:
        """
        get_tuple_name(self, type)

        :param self: :class:`MultiPwAff`
        :param type: :class:`dim_type`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_range_tuple_id(self) -> bool:
        """
        has_range_tuple_id(self)

        :param self: :class:`MultiPwAff`
        :return: bool
        """

    def has_tuple_id(self, type: dim_type) -> bool:
        """
        has_tuple_id(self, type)

        :param self: :class:`MultiPwAff`
        :param type: :class:`dim_type`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_range_tuple_id(self) -> object:
        """
        get_range_tuple_id(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`Id`
        """

    def get_tuple_id(self, type: dim_type) -> object:
        """
        get_tuple_id(self, type)

        :param self: :class:`MultiPwAff`
        :param type: :class:`dim_type`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_tuple_name(self, type: dim_type, s: str) -> object:
        """
        set_tuple_name(self, type, s)

        :param self: :class:`MultiPwAff`
        :param type: :class:`dim_type`
        :param s: string
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_range_tuple_id(self, id: Id) -> object:
        """
        set_range_tuple_id(self, id)

        :param self: :class:`MultiPwAff`
        :param id: :class:`Id`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_tuple_id(self, type: dim_type, id: Id) -> object:
        """
        set_tuple_id(self, type, id)

        :param self: :class:`MultiPwAff`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_range_tuple_id(self) -> object:
        """
        reset_range_tuple_id(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`
        """

    def reset_tuple_id(self, type: dim_type) -> object:
        """
        reset_tuple_id(self, type)

        :param self: :class:`MultiPwAff`
        :param type: :class:`dim_type`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def product(self, multi2: MultiPwAff) -> object:
        """
        product(self, multi2)

        :param self: :class:`MultiPwAff`
        :param multi2: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`
        """

    def splice(self, in_pos: int, out_pos: int, multi2: MultiPwAff) -> object:
        """
        splice(self, in_pos, out_pos, multi2)

        :param self: :class:`MultiPwAff`
        :param in_pos: :class:`unsigned`
        :param out_pos: :class:`unsigned`
        :param multi2: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def bind_domain(self, tuple: MultiId) -> object:
        """
        bind_domain(self, tuple)

        :param self: :class:`MultiPwAff`
        :param tuple: :class:`MultiId`
        :return: :class:`MultiPwAff`
        """

    def bind_domain_wrapped_domain(self, tuple: MultiId) -> object:
        """
        bind_domain_wrapped_domain(self, tuple)

        :param self: :class:`MultiPwAff`
        :param tuple: :class:`MultiId`
        :return: :class:`MultiPwAff`
        """

    def involves_param_id(self, id: Id) -> bool:
        """
        involves_param_id(self, id)

        :param self: :class:`MultiPwAff`
        :param id: :class:`Id`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_param_id_list(self, list: IdList) -> bool:
        """
        involves_param_id_list(self, list)

        :param self: :class:`MultiPwAff`
        :param list: :class:`IdList`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def unbind_params_insert_domain(self, domain: MultiId) -> object:
        """
        unbind_params_insert_domain(self, domain)

        :param self: :class:`MultiPwAff`
        :param domain: :class:`MultiId`
        :return: :class:`MultiPwAff`
        """

    def domain_reverse(self) -> object:
        """
        domain_reverse(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`
        """

    def __hash__(self) -> int:
        """
        get_hash(self)

        :param self: :class:`MultiPwAff`
        :return: uint32_t 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_aff(aff: Aff) -> object:
        """
        from_aff(aff)

        :param aff: :class:`Aff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_multi_aff(ma: MultiAff) -> object:
        """
        from_multi_aff(ma)

        :param ma: :class:`MultiAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_pw_aff(pa: PwAff) -> object:
        """
        from_pw_aff(pa)

        :param pa: :class:`PwAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def domain(self) -> object:
        """
        domain(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`Set`
        """

    def intersect_params(self, set: Set) -> object:
        """
        intersect_params(self, set)

        :param self: :class:`MultiPwAff`
        :param set: :class:`Set`
        :return: :class:`MultiPwAff`
        """

    def intersect_domain(self, domain: Set) -> object:
        """
        intersect_domain(self, domain)

        :param self: :class:`MultiPwAff`
        :param domain: :class:`Set`
        :return: :class:`MultiPwAff`
        """

    def coalesce(self) -> object:
        """
        coalesce(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`
        """

    def gist(self, set: Set) -> object:
        """
        gist(self, set)

        :param self: :class:`MultiPwAff`
        :param set: :class:`Set`
        :return: :class:`MultiPwAff`
        """

    def gist_params(self, set: Set) -> object:
        """
        gist_params(self, set)

        :param self: :class:`MultiPwAff`
        :param set: :class:`Set`
        :return: :class:`MultiPwAff`
        """

    def is_cst(self) -> bool:
        """
        is_cst(self)

        :param self: :class:`MultiPwAff`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_equal(self, mpa2: MultiPwAff) -> bool:
        """
        is_equal(self, mpa2)

        :param self: :class:`MultiPwAff`
        :param mpa2: :class:`MultiPwAff`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def pullback_multi_aff(self, ma: MultiAff) -> object:
        """
        pullback_multi_aff(self, ma)

        :param self: :class:`MultiPwAff`
        :param ma: :class:`MultiAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def pullback_pw_multi_aff(self, pma: PwMultiAff) -> object:
        """
        pullback_pw_multi_aff(self, pma)

        :param self: :class:`MultiPwAff`
        :param pma: :class:`PwMultiAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def pullback_multi_pw_aff(self, mpa2: MultiPwAff) -> object:
        """
        pullback_multi_pw_aff(self, mpa2)

        :param self: :class:`MultiPwAff`
        :param mpa2: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def union_add(self, mpa2: MultiPwAff) -> object:
        """
        union_add(self, mpa2)

        :param self: :class:`MultiPwAff`
        :param mpa2: :class:`MultiPwAff`
        :return: :class:`MultiPwAff`
        """

    def move_dims(self, dst_type: dim_type, dst_pos: int, src_type: dim_type, src_pos: int, n: int) -> object:
        """
        move_dims(self, dst_type, dst_pos, src_type, src_pos, n)

        :param self: :class:`MultiPwAff`
        :param dst_type: :class:`dim_type`
        :param dst_pos: :class:`unsigned`
        :param src_type: :class:`dim_type`
        :param src_pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def isa_multi_aff(self) -> bool:
        """
        isa_multi_aff(self)

        :param self: :class:`MultiPwAff`
        :return: bool
        """

    def as_multi_aff(self) -> object:
        """
        as_multi_aff(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`MultiAff`
        """

    def as_set(self) -> object:
        """
        as_set(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`Set`
        """

    def as_map(self) -> object:
        """
        as_map(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`Map`
        """

    @staticmethod
    def from_pw_multi_aff(pma: PwMultiAff) -> object:
        """
        from_pw_multi_aff(pma)

        :param pma: :class:`PwMultiAff`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def eq_map(self, mpa2: MultiPwAff) -> object:
        """
        eq_map(self, mpa2)

        :param self: :class:`MultiPwAff`
        :param mpa2: :class:`MultiPwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_le_map(self, mpa2: MultiPwAff) -> object:
        """
        lex_le_map(self, mpa2)

        :param self: :class:`MultiPwAff`
        :param mpa2: :class:`MultiPwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_lt_map(self, mpa2: MultiPwAff) -> object:
        """
        lex_lt_map(self, mpa2)

        :param self: :class:`MultiPwAff`
        :param mpa2: :class:`MultiPwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_ge_map(self, mpa2: MultiPwAff) -> object:
        """
        lex_ge_map(self, mpa2)

        :param self: :class:`MultiPwAff`
        :param mpa2: :class:`MultiPwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_gt_map(self, mpa2: MultiPwAff) -> object:
        """
        lex_gt_map(self, mpa2)

        :param self: :class:`MultiPwAff`
        :param mpa2: :class:`MultiPwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def bind(self, tuple: MultiId) -> object:
        """
        bind(self, tuple)

        :param self: :class:`MultiPwAff`
        :param tuple: :class:`MultiId`
        :return: :class:`Set`
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`MultiPwAff`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`MultiPwAff`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def min_multi_val(self) -> object:
        """
        min_multi_val(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`MultiVal`
        """

    def max_multi_val(self) -> object:
        """
        max_multi_val(self)

        :param self: :class:`MultiPwAff`
        :return: :class:`MultiVal`
        """

class MultiUnionPwAff:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`Space`
        """

    def get_domain_space(self) -> object:
        """
        get_domain_space(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_list(self) -> object:
        """
        get_list(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`UnionPwAffList`
        """

    @staticmethod
    def from_union_pw_aff_list(space: Space, list: UnionPwAffList) -> object:
        """
        from_union_pw_aff_list(space, list)

        :param space: :class:`Space`
        :param list: :class:`UnionPwAffList`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_is_equal(self, multi2: MultiUnionPwAff) -> bool:
        """
        plain_is_equal(self, multi2)

        :param self: :class:`MultiUnionPwAff`
        :param multi2: :class:`MultiUnionPwAff`
        :return: bool
        """

    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`MultiUnionPwAff`
        :return: isl_size
        """

    def get_at(self, pos: int) -> object:
        """
        get_at(self, pos)

        :param self: :class:`MultiUnionPwAff`
        :param pos: :class:`int`
        :return: :class:`UnionPwAff`
        """

    def get_union_pw_aff(self, pos: int) -> object:
        """
        get_union_pw_aff(self, pos)

        :param self: :class:`MultiUnionPwAff`
        :param pos: :class:`int`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, pos: int, el: UnionPwAff) -> object:
        """
        set_at(self, pos, el)

        :param self: :class:`MultiUnionPwAff`
        :param pos: :class:`int`
        :param el: :class:`UnionPwAff`
        :return: :class:`MultiUnionPwAff`
        """

    def set_union_pw_aff(self, pos: int, el: UnionPwAff) -> object:
        """
        set_union_pw_aff(self, pos, el)

        :param self: :class:`MultiUnionPwAff`
        :param pos: :class:`int`
        :param el: :class:`UnionPwAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_splice(self, pos: int, multi2: MultiUnionPwAff) -> object:
        """
        range_splice(self, pos, multi2)

        :param self: :class:`MultiUnionPwAff`
        :param pos: :class:`unsigned`
        :param multi2: :class:`MultiUnionPwAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def flatten_range(self) -> object:
        """
        flatten_range(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def flat_range_product(self, multi2: MultiUnionPwAff) -> object:
        """
        flat_range_product(self, multi2)

        :param self: :class:`MultiUnionPwAff`
        :param multi2: :class:`MultiUnionPwAff`
        :return: :class:`MultiUnionPwAff`
        """

    def range_product(self, multi2: MultiUnionPwAff) -> object:
        """
        range_product(self, multi2)

        :param self: :class:`MultiUnionPwAff`
        :param multi2: :class:`MultiUnionPwAff`
        :return: :class:`MultiUnionPwAff`
        """

    def factor_range(self) -> object:
        """
        factor_range(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_is_wrapping(self) -> bool:
        """
        range_is_wrapping(self)

        :param self: :class:`MultiUnionPwAff`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_factor_domain(self) -> object:
        """
        range_factor_domain(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_factor_range(self) -> object:
        """
        range_factor_range(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`MultiUnionPwAff`
        :param model: :class:`Space`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def from_range(self) -> object:
        """
        from_range(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_val(self, v: object) -> object:
        """
        scale_val(self, v)

        :param self: :class:`MultiUnionPwAff`
        :param v: :class:`Val`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_down_val(self, v: object) -> object:
        """
        scale_down_val(self, v)

        :param self: :class:`MultiUnionPwAff`
        :param v: :class:`Val`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_multi_val(self, mv: MultiVal) -> object:
        """
        scale_multi_val(self, mv)

        :param self: :class:`MultiUnionPwAff`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_down_multi_val(self, mv: MultiVal) -> object:
        """
        scale_down_multi_val(self, mv)

        :param self: :class:`MultiUnionPwAff`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def mod_multi_val(self, mv: MultiVal) -> object:
        """
        mod_multi_val(self, mv)

        :param self: :class:`MultiUnionPwAff`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, multi2: MultiUnionPwAff) -> object:
        """
        add(self, multi2)

        :param self: :class:`MultiUnionPwAff`
        :param multi2: :class:`MultiUnionPwAff`
        :return: :class:`MultiUnionPwAff`
        """

    def sub(self, multi2: MultiUnionPwAff) -> object:
        """
        sub(self, multi2)

        :param self: :class:`MultiUnionPwAff`
        :param multi2: :class:`MultiUnionPwAff`
        :return: :class:`MultiUnionPwAff`
        """

    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`MultiUnionPwAff`
        """

    @staticmethod
    def zero(space: Space) -> object:
        """
        zero(space)

        :param space: :class:`Space`
        :return: :class:`MultiUnionPwAff`
        """

    def involves_nan(self) -> bool:
        """
        involves_nan(self)

        :param self: :class:`MultiUnionPwAff`
        :return: bool
        """

    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`MultiUnionPwAff`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_dims(self, type, first, n)

        :param self: :class:`MultiUnionPwAff`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`MultiUnionPwAff`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def find_dim_by_id(self, type: dim_type, id: Id) -> int:
        """
        find_dim_by_id(self, type, id)

        :param self: :class:`MultiUnionPwAff`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_dim_id(self, type: dim_type, pos: int) -> object:
        """
        get_dim_id(self, type, pos)

        :param self: :class:`MultiUnionPwAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_name(self, type: dim_type, pos: int, s: str) -> object:
        """
        set_dim_name(self, type, pos, s)

        :param self: :class:`MultiUnionPwAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param s: string
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_id(self, type: dim_type, pos: int, id: Id) -> object:
        """
        set_dim_id(self, type, pos, id)

        :param self: :class:`MultiUnionPwAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param id: :class:`Id`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_tuple_name(self, type: dim_type) -> object:
        """
        get_tuple_name(self, type)

        :param self: :class:`MultiUnionPwAff`
        :param type: :class:`dim_type`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_range_tuple_id(self) -> bool:
        """
        has_range_tuple_id(self)

        :param self: :class:`MultiUnionPwAff`
        :return: bool
        """

    def has_tuple_id(self, type: dim_type) -> bool:
        """
        has_tuple_id(self, type)

        :param self: :class:`MultiUnionPwAff`
        :param type: :class:`dim_type`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_range_tuple_id(self) -> object:
        """
        get_range_tuple_id(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`Id`
        """

    def get_tuple_id(self, type: dim_type) -> object:
        """
        get_tuple_id(self, type)

        :param self: :class:`MultiUnionPwAff`
        :param type: :class:`dim_type`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_tuple_name(self, type: dim_type, s: str) -> object:
        """
        set_tuple_name(self, type, s)

        :param self: :class:`MultiUnionPwAff`
        :param type: :class:`dim_type`
        :param s: string
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_range_tuple_id(self, id: Id) -> object:
        """
        set_range_tuple_id(self, id)

        :param self: :class:`MultiUnionPwAff`
        :param id: :class:`Id`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_tuple_id(self, type: dim_type, id: Id) -> object:
        """
        set_tuple_id(self, type, id)

        :param self: :class:`MultiUnionPwAff`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_range_tuple_id(self) -> object:
        """
        reset_range_tuple_id(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`MultiUnionPwAff`
        """

    def reset_tuple_id(self, type: dim_type) -> object:
        """
        reset_tuple_id(self, type)

        :param self: :class:`MultiUnionPwAff`
        :param type: :class:`dim_type`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_multi_aff(ma: MultiAff) -> object:
        """
        from_multi_aff(ma)

        :param ma: :class:`MultiAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_union_pw_aff(upa: UnionPwAff) -> object:
        """
        from_union_pw_aff(upa)

        :param upa: :class:`UnionPwAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_multi_pw_aff(mpa: MultiPwAff) -> object:
        """
        from_multi_pw_aff(mpa)

        :param mpa: :class:`MultiPwAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def multi_val_on_domain(domain: UnionSet, mv: MultiVal) -> object:
        """
        multi_val_on_domain(domain, mv)

        :param domain: :class:`UnionSet`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def multi_aff_on_domain(domain: UnionSet, ma: MultiAff) -> object:
        """
        multi_aff_on_domain(domain, ma)

        :param domain: :class:`UnionSet`
        :param ma: :class:`MultiAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def pw_multi_aff_on_domain(domain: UnionSet, pma: PwMultiAff) -> object:
        """
        pw_multi_aff_on_domain(domain, pma)

        :param domain: :class:`UnionSet`
        :param pma: :class:`PwMultiAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def floor(self) -> object:
        """
        floor(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain(self, uset: UnionSet) -> object:
        """
        intersect_domain(self, uset)

        :param self: :class:`MultiUnionPwAff`
        :param uset: :class:`UnionSet`
        :return: :class:`MultiUnionPwAff`
        """

    def intersect_params(self, params: Set) -> object:
        """
        intersect_params(self, params)

        :param self: :class:`MultiUnionPwAff`
        :param params: :class:`Set`
        :return: :class:`MultiUnionPwAff`
        """

    def intersect_range(self, set: Set) -> object:
        """
        intersect_range(self, set)

        :param self: :class:`MultiUnionPwAff`
        :param set: :class:`Set`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def domain(self) -> object:
        """
        domain(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`UnionSet`
        """

    def coalesce(self) -> object:
        """
        coalesce(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`MultiUnionPwAff`
        """

    def gist(self, context: UnionSet) -> object:
        """
        gist(self, context)

        :param self: :class:`MultiUnionPwAff`
        :param context: :class:`UnionSet`
        :return: :class:`MultiUnionPwAff`
        """

    def gist_params(self, context: Set) -> object:
        """
        gist_params(self, context)

        :param self: :class:`MultiUnionPwAff`
        :param context: :class:`Set`
        :return: :class:`MultiUnionPwAff`
        """

    def apply_aff(self, aff: Aff) -> object:
        """
        apply_aff(self, aff)

        :param self: :class:`MultiUnionPwAff`
        :param aff: :class:`Aff`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def apply_multi_aff(self, ma: MultiAff) -> object:
        """
        apply_multi_aff(self, ma)

        :param self: :class:`MultiUnionPwAff`
        :param ma: :class:`MultiAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def apply_pw_aff(self, pa: PwAff) -> object:
        """
        apply_pw_aff(self, pa)

        :param self: :class:`MultiUnionPwAff`
        :param pa: :class:`PwAff`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def apply_pw_multi_aff(self, pma: PwMultiAff) -> object:
        """
        apply_pw_multi_aff(self, pma)

        :param self: :class:`MultiUnionPwAff`
        :param pma: :class:`PwMultiAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def pullback_union_pw_multi_aff(self, upma: UnionPwMultiAff) -> object:
        """
        pullback_union_pw_multi_aff(self, upma)

        :param self: :class:`MultiUnionPwAff`
        :param upma: :class:`UnionPwMultiAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def union_add(self, mupa2: MultiUnionPwAff) -> object:
        """
        union_add(self, mupa2)

        :param self: :class:`MultiUnionPwAff`
        :param mupa2: :class:`MultiUnionPwAff`
        :return: :class:`MultiUnionPwAff`
        """

    @staticmethod
    def from_union_pw_multi_aff(upma: UnionPwMultiAff) -> object:
        """
        from_union_pw_multi_aff(upma)

        :param upma: :class:`UnionPwMultiAff`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_union_map(umap: UnionMap) -> object:
        """
        from_union_map(umap)

        :param umap: :class:`UnionMap`
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def zero_union_set(self) -> object:
        """
        zero_union_set(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def bind(self, tuple: MultiId) -> object:
        """
        bind(self, tuple)

        :param self: :class:`MultiUnionPwAff`
        :param tuple: :class:`MultiId`
        :return: :class:`UnionSet`
        """

    def extract_multi_pw_aff(self, space: Space) -> object:
        """
        extract_multi_pw_aff(self, space)

        :param self: :class:`MultiUnionPwAff`
        :param space: :class:`Space`
        :return: :class:`MultiPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`MultiUnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`MultiUnionPwAff`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`MultiUnionPwAff`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def min_multi_val(self) -> object:
        """
        min_multi_val(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def max_multi_val(self) -> object:
        """
        max_multi_val(self)

        :param self: :class:`MultiUnionPwAff`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class MultiVal:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`MultiVal`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`MultiVal`
        :return: :class:`Space`
        """

    def get_domain_space(self) -> object:
        """
        get_domain_space(self)

        :param self: :class:`MultiVal`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_list(self) -> object:
        """
        get_list(self)

        :param self: :class:`MultiVal`
        :return: :class:`ValList`
        """

    @staticmethod
    def from_val_list(space: Space, list: ValList) -> object:
        """
        from_val_list(space, list)

        :param space: :class:`Space`
        :param list: :class:`ValList`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`MultiVal`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_is_equal(self, multi2: MultiVal) -> bool:
        """
        plain_is_equal(self, multi2)

        :param self: :class:`MultiVal`
        :param multi2: :class:`MultiVal`
        :return: bool
        """

    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`MultiVal`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`MultiVal`
        :return: isl_size
        """

    def get_at(self, pos: int) -> object:
        """
        get_at(self, pos)

        :param self: :class:`MultiVal`
        :param pos: :class:`int`
        :return: :class:`Val`
        """

    def get_val(self, pos: int) -> object:
        """
        get_val(self, pos)

        :param self: :class:`MultiVal`
        :param pos: :class:`int`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, pos: int, el: object) -> object:
        """
        set_at(self, pos, el)

        :param self: :class:`MultiVal`
        :param pos: :class:`int`
        :param el: :class:`Val`
        :return: :class:`MultiVal`
        """

    def set_val(self, pos: int, el: object) -> object:
        """
        set_val(self, pos, el)

        :param self: :class:`MultiVal`
        :param pos: :class:`int`
        :param el: :class:`Val`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_splice(self, pos: int, multi2: MultiVal) -> object:
        """
        range_splice(self, pos, multi2)

        :param self: :class:`MultiVal`
        :param pos: :class:`unsigned`
        :param multi2: :class:`MultiVal`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def flatten_range(self) -> object:
        """
        flatten_range(self)

        :param self: :class:`MultiVal`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def flat_range_product(self, multi2: MultiVal) -> object:
        """
        flat_range_product(self, multi2)

        :param self: :class:`MultiVal`
        :param multi2: :class:`MultiVal`
        :return: :class:`MultiVal`
        """

    def range_product(self, multi2: MultiVal) -> object:
        """
        range_product(self, multi2)

        :param self: :class:`MultiVal`
        :param multi2: :class:`MultiVal`
        :return: :class:`MultiVal`
        """

    def factor_range(self) -> object:
        """
        factor_range(self)

        :param self: :class:`MultiVal`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_is_wrapping(self) -> bool:
        """
        range_is_wrapping(self)

        :param self: :class:`MultiVal`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_factor_domain(self) -> object:
        """
        range_factor_domain(self)

        :param self: :class:`MultiVal`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_factor_range(self) -> object:
        """
        range_factor_range(self)

        :param self: :class:`MultiVal`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`MultiVal`
        :param model: :class:`Space`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def from_range(self) -> object:
        """
        from_range(self)

        :param self: :class:`MultiVal`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_val(self, v: object) -> object:
        """
        scale_val(self, v)

        :param self: :class:`MultiVal`
        :param v: :class:`Val`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_down_val(self, v: object) -> object:
        """
        scale_down_val(self, v)

        :param self: :class:`MultiVal`
        :param v: :class:`Val`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_multi_val(self, mv: MultiVal) -> object:
        """
        scale_multi_val(self, mv)

        :param self: :class:`MultiVal`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_down_multi_val(self, mv: MultiVal) -> object:
        """
        scale_down_multi_val(self, mv)

        :param self: :class:`MultiVal`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def mod_multi_val(self, mv: MultiVal) -> object:
        """
        mod_multi_val(self, mv)

        :param self: :class:`MultiVal`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, multi2: MultiVal) -> object:
        """
        add(self, multi2)

        :param self: :class:`MultiVal`
        :param multi2: :class:`MultiVal`
        :return: :class:`MultiVal`
        """

    def sub(self, multi2: MultiVal) -> object:
        """
        sub(self, multi2)

        :param self: :class:`MultiVal`
        :param multi2: :class:`MultiVal`
        :return: :class:`MultiVal`
        """

    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`MultiVal`
        :return: :class:`MultiVal`
        """

    def min(self, multi2: MultiVal) -> object:
        """
        min(self, multi2)

        :param self: :class:`MultiVal`
        :param multi2: :class:`MultiVal`
        :return: :class:`MultiVal`
        """

    def max(self, multi2: MultiVal) -> object:
        """
        max(self, multi2)

        :param self: :class:`MultiVal`
        :param multi2: :class:`MultiVal`
        :return: :class:`MultiVal`
        """

    @staticmethod
    def zero(space: Space) -> object:
        """
        zero(space)

        :param space: :class:`Space`
        :return: :class:`MultiVal`
        """

    def involves_nan(self) -> bool:
        """
        involves_nan(self)

        :param self: :class:`MultiVal`
        :return: bool
        """

    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`MultiVal`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_dims(self, type, first, n)

        :param self: :class:`MultiVal`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_dims(self, type: dim_type, first: int, n: int) -> bool:
        """
        involves_dims(self, type, first, n)

        :param self: :class:`MultiVal`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        insert_dims(self, type, first, n)

        :param self: :class:`MultiVal`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_dims(self, type: dim_type, n: int) -> object:
        """
        add_dims(self, type, n)

        :param self: :class:`MultiVal`
        :param type: :class:`dim_type`
        :param n: :class:`unsigned`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def project_domain_on_params(self) -> object:
        """
        project_domain_on_params(self)

        :param self: :class:`MultiVal`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`MultiVal`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def find_dim_by_id(self, type: dim_type, id: Id) -> int:
        """
        find_dim_by_id(self, type, id)

        :param self: :class:`MultiVal`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_dim_id(self, type: dim_type, pos: int) -> object:
        """
        get_dim_id(self, type, pos)

        :param self: :class:`MultiVal`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_name(self, type: dim_type, pos: int, s: str) -> object:
        """
        set_dim_name(self, type, pos, s)

        :param self: :class:`MultiVal`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param s: string
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_id(self, type: dim_type, pos: int, id: Id) -> object:
        """
        set_dim_id(self, type, pos, id)

        :param self: :class:`MultiVal`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param id: :class:`Id`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_tuple_name(self, type: dim_type) -> object:
        """
        get_tuple_name(self, type)

        :param self: :class:`MultiVal`
        :param type: :class:`dim_type`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_range_tuple_id(self) -> bool:
        """
        has_range_tuple_id(self)

        :param self: :class:`MultiVal`
        :return: bool
        """

    def has_tuple_id(self, type: dim_type) -> bool:
        """
        has_tuple_id(self, type)

        :param self: :class:`MultiVal`
        :param type: :class:`dim_type`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_range_tuple_id(self) -> object:
        """
        get_range_tuple_id(self)

        :param self: :class:`MultiVal`
        :return: :class:`Id`
        """

    def get_tuple_id(self, type: dim_type) -> object:
        """
        get_tuple_id(self, type)

        :param self: :class:`MultiVal`
        :param type: :class:`dim_type`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_tuple_name(self, type: dim_type, s: str) -> object:
        """
        set_tuple_name(self, type, s)

        :param self: :class:`MultiVal`
        :param type: :class:`dim_type`
        :param s: string
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_range_tuple_id(self, id: Id) -> object:
        """
        set_range_tuple_id(self, id)

        :param self: :class:`MultiVal`
        :param id: :class:`Id`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_tuple_id(self, type: dim_type, id: Id) -> object:
        """
        set_tuple_id(self, type, id)

        :param self: :class:`MultiVal`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_range_tuple_id(self) -> object:
        """
        reset_range_tuple_id(self)

        :param self: :class:`MultiVal`
        :return: :class:`MultiVal`
        """

    def reset_tuple_id(self, type: dim_type) -> object:
        """
        reset_tuple_id(self, type)

        :param self: :class:`MultiVal`
        :param type: :class:`dim_type`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def product(self, multi2: MultiVal) -> object:
        """
        product(self, multi2)

        :param self: :class:`MultiVal`
        :param multi2: :class:`MultiVal`
        :return: :class:`MultiVal`
        """

    def splice(self, in_pos: int, out_pos: int, multi2: MultiVal) -> object:
        """
        splice(self, in_pos, out_pos, multi2)

        :param self: :class:`MultiVal`
        :param in_pos: :class:`unsigned`
        :param out_pos: :class:`unsigned`
        :param multi2: :class:`MultiVal`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_zero(self) -> bool:
        """
        is_zero(self)

        :param self: :class:`MultiVal`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_val(self, v: object) -> object:
        """
        add_val(self, v)

        :param self: :class:`MultiVal`
        :param v: :class:`Val`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def mod_val(self, v: object) -> object:
        """
        mod_val(self, v)

        :param self: :class:`MultiVal`
        :param v: :class:`Val`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`MultiVal`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`MultiVal`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Point:
    def to_set(self) -> object:
        """
        to_set(self)

        :param self: :class:`Point`
        :return: :class:`Set`
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Point`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`Point`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def zero(space: Space) -> object:
        """
        zero(space)

        :param space: :class:`Space`
        :return: :class:`Point`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`Point`
        :return: :class:`Point`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_coordinate_val(self, type: dim_type, pos: int) -> object:
        """
        get_coordinate_val(self, type, pos)

        :param self: :class:`Point`
        :param type: :class:`dim_type`
        :param pos: :class:`int`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_coordinate_val(self, type: dim_type, pos: int, v: object) -> object:
        """
        set_coordinate_val(self, type, pos, v)

        :param self: :class:`Point`
        :param type: :class:`dim_type`
        :param pos: :class:`int`
        :param v: :class:`Val`
        :return: :class:`Point`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_multi_val(self) -> object:
        """
        get_multi_val(self)

        :param self: :class:`Point`
        :return: :class:`MultiVal`
        """

    def add_ui(self, type: dim_type, pos: int, val: int) -> object:
        """
        add_ui(self, type, pos, val)

        :param self: :class:`Point`
        :param type: :class:`dim_type`
        :param pos: :class:`int`
        :param val: :class:`unsigned`
        :return: :class:`Point`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sub_ui(self, type: dim_type, pos: int, val: int) -> object:
        """
        sub_ui(self, type, pos, val)

        :param self: :class:`Point`
        :param type: :class:`dim_type`
        :param pos: :class:`int`
        :param val: :class:`unsigned`
        :return: :class:`Point`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def void(space: Space) -> object:
        """
        void(space)

        :param space: :class:`Space`
        :return: :class:`Point`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_void(self) -> bool:
        """
        is_void(self)

        :param self: :class:`Point`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`Point`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`Point`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Printer:
    def print_id_list(self, list: IdList) -> object:
        """
        print_id_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`IdList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_id(self, id: Id) -> object:
        """
        print_id(self, id)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param id: :class:`Id`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_multi_id(self, mi: MultiId) -> object:
        """
        print_multi_id(self, mi)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param mi: :class:`MultiId`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_space(self, space: Space) -> object:
        """
        print_space(self, space)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param space: :class:`Space`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_basic_set(self, bset: BasicSet) -> object:
        """
        print_basic_set(self, bset)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param bset: :class:`BasicSet`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_set(self, map: Set) -> object:
        """
        print_set(self, map)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param map: :class:`Set`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_basic_map(self, bmap: BasicMap) -> object:
        """
        print_basic_map(self, bmap)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param bmap: :class:`BasicMap`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_map(self, map: Map) -> object:
        """
        print_map(self, map)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param map: :class:`Map`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_basic_map_list(self, list: BasicMapList) -> object:
        """
        print_basic_map_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`BasicMapList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_map_list(self, list: MapList) -> object:
        """
        print_map_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`MapList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_basic_set_list(self, list: BasicSetList) -> object:
        """
        print_basic_set_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`BasicSetList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_set_list(self, list: SetList) -> object:
        """
        print_set_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`SetList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_local_space(self, ls: LocalSpace) -> object:
        """
        print_local_space(self, ls)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param ls: :class:`LocalSpace`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_aff(self, aff: Aff) -> object:
        """
        print_aff(self, aff)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param aff: :class:`Aff`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_pw_aff(self, pwaff: PwAff) -> object:
        """
        print_pw_aff(self, pwaff)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param pwaff: :class:`PwAff`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_multi_aff(self, maff: MultiAff) -> object:
        """
        print_multi_aff(self, maff)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param maff: :class:`MultiAff`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_pw_multi_aff(self, pma: PwMultiAff) -> object:
        """
        print_pw_multi_aff(self, pma)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param pma: :class:`PwMultiAff`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_union_pw_multi_aff(self, upma: UnionPwMultiAff) -> object:
        """
        print_union_pw_multi_aff(self, upma)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param upma: :class:`UnionPwMultiAff`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_multi_pw_aff(self, mpa: MultiPwAff) -> object:
        """
        print_multi_pw_aff(self, mpa)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param mpa: :class:`MultiPwAff`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_union_pw_aff(self, upa: UnionPwAff) -> object:
        """
        print_union_pw_aff(self, upa)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param upa: :class:`UnionPwAff`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_multi_union_pw_aff(self, mupa: MultiUnionPwAff) -> object:
        """
        print_multi_union_pw_aff(self, mupa)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param mupa: :class:`MultiUnionPwAff`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_aff_list(self, list: AffList) -> object:
        """
        print_aff_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`AffList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_pw_aff_list(self, list: PwAffList) -> object:
        """
        print_pw_aff_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`PwAffList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_pw_multi_aff_list(self, list: PwMultiAffList) -> object:
        """
        print_pw_multi_aff_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`PwMultiAffList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_union_pw_aff_list(self, list: UnionPwAffList) -> object:
        """
        print_union_pw_aff_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`UnionPwAffList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_union_pw_multi_aff_list(self, list: UnionPwMultiAffList) -> object:
        """
        print_union_pw_multi_aff_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`UnionPwMultiAffList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_qpolynomial(self, qp: QPolynomial) -> object:
        """
        print_qpolynomial(self, qp)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param qp: :class:`QPolynomial`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_pw_qpolynomial(self, pwqp: PwQPolynomial) -> object:
        """
        print_pw_qpolynomial(self, pwqp)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param pwqp: :class:`PwQPolynomial`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_qpolynomial_fold(self, fold: QPolynomialFold) -> object:
        """
        print_qpolynomial_fold(self, fold)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param fold: :class:`QPolynomialFold`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_pw_qpolynomial_fold(self, pwf: PwQPolynomialFold) -> object:
        """
        print_pw_qpolynomial_fold(self, pwf)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param pwf: :class:`PwQPolynomialFold`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_union_pw_qpolynomial(self, upwqp: UnionPwQPolynomial) -> object:
        """
        print_union_pw_qpolynomial(self, upwqp)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param upwqp: :class:`UnionPwQPolynomial`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_union_pw_qpolynomial_fold(self, upwf: UnionPwQPolynomialFold) -> object:
        """
        print_union_pw_qpolynomial_fold(self, upwf)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param upwf: :class:`UnionPwQPolynomialFold`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_qpolynomial_list(self, list: QPolynomialList) -> object:
        """
        print_qpolynomial_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`QPolynomialList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_pw_qpolynomial_list(self, list: PwQPolynomialList) -> object:
        """
        print_pw_qpolynomial_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`PwQPolynomialList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_pw_qpolynomial_fold_list(self, list: PwQPolynomialFoldList) -> object:
        """
        print_pw_qpolynomial_fold_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`PwQPolynomialFoldList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_union_map(self, umap: UnionMap) -> object:
        """
        print_union_map(self, umap)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param umap: :class:`UnionMap`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_union_map_list(self, list: UnionMapList) -> object:
        """
        print_union_map_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`UnionMapList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_union_set(self, uset: UnionSet) -> object:
        """
        print_union_set(self, uset)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param uset: :class:`UnionSet`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_union_set_list(self, list: UnionSetList) -> object:
        """
        print_union_set_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`UnionSetList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def to_str(ctx: Context) -> object:
        """
        to_str(ctx)

        :param ctx: :class:`Context`
        :return: :class:`Printer`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Printer`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_str(self) -> object:
        """
        get_str(self)

        :param self: :class:`Printer`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_indent(self, indent: int) -> object:
        """
        set_indent(self, indent)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param indent: :class:`int`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def indent(self, indent: int) -> object:
        """
        indent(self, indent)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param indent: :class:`int`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_output_format(self, output_format: int) -> object:
        """
        set_output_format(self, output_format)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param output_format: :class:`int`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_output_format(self) -> int:
        """
        get_output_format(self)

        :param self: :class:`Printer`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_yaml_style(self, yaml_style: int) -> object:
        """
        set_yaml_style(self, yaml_style)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param yaml_style: :class:`int`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_yaml_style(self) -> int:
        """
        get_yaml_style(self)

        :param self: :class:`Printer`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_indent_prefix(self, prefix: str) -> object:
        """
        set_indent_prefix(self, prefix)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param prefix: string
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_prefix(self, prefix: str) -> object:
        """
        set_prefix(self, prefix)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param prefix: string
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_suffix(self, suffix: str) -> object:
        """
        set_suffix(self, suffix)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param suffix: string
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_isl_int_width(self, width: int) -> object:
        """
        set_isl_int_width(self, width)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param width: :class:`int`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_note(self, id: Id) -> bool:
        """
        has_note(self, id)

        :param self: :class:`Printer`
        :param id: :class:`Id`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_note(self, id: Id) -> object:
        """
        get_note(self, id)

        :param self: :class:`Printer`
        :param id: :class:`Id`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_note(self, id: Id, note: Id) -> object:
        """
        set_note(self, id, note)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param id: :class:`Id`
        :param note: :class:`Id`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def start_line(self) -> object:
        """
        start_line(self)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def end_line(self) -> object:
        """
        end_line(self)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_double(self, d: float) -> object:
        """
        print_double(self, d)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param d: :class:`double`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_int(self, i: int) -> object:
        """
        print_int(self, i)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param i: :class:`int`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_str(self, s: str) -> object:
        """
        print_str(self, s)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param s: string
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def yaml_start_mapping(self) -> object:
        """
        yaml_start_mapping(self)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def yaml_end_mapping(self) -> object:
        """
        yaml_end_mapping(self)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def yaml_start_sequence(self) -> object:
        """
        yaml_start_sequence(self)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def yaml_end_sequence(self) -> object:
        """
        yaml_end_sequence(self)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def yaml_next(self) -> object:
        """
        yaml_next(self)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def flush(self) -> object:
        """
        flush(self)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_point(self, pnt: Point) -> object:
        """
        print_point(self, pnt)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param pnt: :class:`Point`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_constraint_list(self, list: ConstraintList) -> object:
        """
        print_constraint_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`ConstraintList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_constraint(self, c: Constraint) -> object:
        """
        print_constraint(self, c)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param c: :class:`Constraint`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_val(self, v: object) -> object:
        """
        print_val(self, v)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param v: :class:`Val`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_multi_val(self, mv: MultiVal) -> object:
        """
        print_multi_val(self, mv)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param mv: :class:`MultiVal`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_val_list(self, list: ValList) -> object:
        """
        print_val_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`ValList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_vec(self, vec: Vec) -> object:
        """
        print_vec(self, vec)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param vec: :class:`Vec`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_schedule_constraints(self, sc: ScheduleConstraints) -> object:
        """
        print_schedule_constraints(self, sc)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param sc: :class:`ScheduleConstraints`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_schedule(self, schedule: Schedule) -> object:
        """
        print_schedule(self, schedule)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param schedule: :class:`Schedule`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_schedule_node(self, node: ScheduleNode) -> object:
        """
        print_schedule_node(self, node)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param node: :class:`ScheduleNode`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_union_access_info(self, access: UnionAccessInfo) -> object:
        """
        print_union_access_info(self, access)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param access: :class:`UnionAccessInfo`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_union_flow(self, flow: UnionFlow) -> object:
        """
        print_union_flow(self, flow)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param flow: :class:`UnionFlow`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_ast_expr(self, expr: AstExpr) -> object:
        """
        print_ast_expr(self, expr)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param expr: :class:`AstExpr`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_ast_node(self, node: AstNode) -> object:
        """
        print_ast_node(self, node)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param node: :class:`AstNode`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def ast_op_type_set_print_name(self, type: ast_expr_op_type, name: str) -> object:
        """
        ast_op_type_set_print_name(self, type, name)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param type: :class:`ast_expr_op_type`
        :param name: string
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_ast_expr_list(self, list: AstExprList) -> object:
        """
        print_ast_expr_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`AstExprList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def print_ast_node_list(self, list: AstNodeList) -> object:
        """
        print_ast_node_list(self, list)

        :param self: :class:`Printer` (mutated in-place) (mutated in-place)
        :param list: :class:`AstNodeList`
        :return: :class:`Printer` (self)

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class PwAff:
    @overload
    def __init__(self, arg: Aff, /) -> None: ...

    @overload
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    @overload
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`PwAff`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_ctx(self) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def __hash__(self) -> int:
        """
        get_hash(self)

        :param self: :class:`PwAff`
        :return: uint32_t 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_domain_space(self) -> object:
        """
        get_domain_space(self)

        :param self: :class:`PwAff`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`PwAff`
        :return: :class:`Space`
        """

    @overload
    def get_space(self) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @staticmethod
    def from_aff(aff: Aff) -> object:
        """
        from_aff(aff)

        :param aff: :class:`Aff`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def empty(space: Space) -> object:
        """
        empty(space)

        :param space: :class:`Space`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(set: Set, aff: Aff) -> object:
        """
        alloc(set, aff)

        :param set: :class:`Set`
        :param aff: :class:`Aff`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def zero_on_domain(ls: LocalSpace) -> object:
        """
        zero_on_domain(ls)

        :param ls: :class:`LocalSpace`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def var_on_domain(ls: LocalSpace, type: dim_type, pos: int) -> object:
        """
        var_on_domain(ls, type, pos)

        :param ls: :class:`LocalSpace`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def nan_on_domain_space(space: Space) -> object:
        """
        nan_on_domain_space(space)

        :param space: :class:`Space`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def nan_on_domain(ls: LocalSpace) -> object:
        """
        nan_on_domain(ls)

        :param ls: :class:`LocalSpace`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def val_on_domain(domain: Set, v: object) -> object:
        """
        val_on_domain(domain, v)

        :param domain: :class:`Set`
        :param v: :class:`Val`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def param_on_domain_id(domain: Set, id: Id) -> object:
        """
        param_on_domain_id(domain, id)

        :param domain: :class:`Set`
        :param id: :class:`Id`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_dim_name(self, type: dim_type, pos: int) -> object:
        """
        get_dim_name(self, type, pos)

        :param self: :class:`PwAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_dim_id(self, type: dim_type, pos: int) -> bool:
        """
        has_dim_id(self, type, pos)

        :param self: :class:`PwAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_dim_id(self, type: dim_type, pos: int) -> object:
        """
        get_dim_id(self, type, pos)

        :param self: :class:`PwAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_id(self, type: dim_type, pos: int, id: Id) -> object:
        """
        set_dim_id(self, type, pos, id)

        :param self: :class:`PwAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param id: :class:`Id`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`PwAff`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def find_dim_by_name(self, arg0: dim_type, arg1: str, /) -> int:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def is_empty(self) -> bool:
        """
        is_empty(self)

        :param self: :class:`PwAff`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def involves_nan(self) -> bool:
        """
        involves_nan(self)

        :param self: :class:`PwAff`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def involves_nan(self) -> bool:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def plain_cmp(self, pa2: PwAff) -> int:
        """
        plain_cmp(self, pa2)

        :param self: :class:`PwAff`
        :param pa2: :class:`PwAff`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def plain_is_equal(self, pwaff2: PwAff) -> bool:
        """
        plain_is_equal(self, pwaff2)

        :param self: :class:`PwAff`
        :param pwaff2: :class:`PwAff`
        :return: bool
        """

    @overload
    def plain_is_equal(self, arg: UnionPwAff, /) -> bool:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def is_equal(self, pa2: PwAff) -> bool:
        """
        is_equal(self, pa2)

        :param self: :class:`PwAff`
        :param pa2: :class:`PwAff`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def union_min(self, pwaff2: PwAff) -> object:
        """
        union_min(self, pwaff2)

        :param self: :class:`PwAff`
        :param pwaff2: :class:`PwAff`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def union_max(self, pwaff2: PwAff) -> object:
        """
        union_max(self, pwaff2)

        :param self: :class:`PwAff`
        :param pwaff2: :class:`PwAff`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def union_add(self, pwaff2: PwAff) -> object:
        """
        union_add(self, pwaff2)

        :param self: :class:`PwAff`
        :param pwaff2: :class:`PwAff`
        :return: :class:`PwAff`
        """

    @overload
    def union_add(self, arg: UnionPwAff, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @overload
    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`PwAff`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def copy(self) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @overload
    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`PwAff`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dim(self, arg: dim_type, /) -> int:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def involves_param_id(self, id: Id) -> bool:
        """
        involves_param_id(self, id)

        :param self: :class:`PwAff`
        :param id: :class:`Id`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_dims(self, type: dim_type, first: int, n: int) -> bool:
        """
        involves_dims(self, type, first, n)

        :param self: :class:`PwAff`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_cst(self) -> bool:
        """
        is_cst(self)

        :param self: :class:`PwAff`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_domain(self, domain: Space) -> object:
        """
        insert_domain(self, domain)

        :param self: :class:`PwAff`
        :param domain: :class:`Space`
        :return: :class:`PwAff`
        """

    def project_domain_on_params(self) -> object:
        """
        project_domain_on_params(self)

        :param self: :class:`PwAff`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`PwAff`
        :param model: :class:`Space`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def align_params(self, arg: Space, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @overload
    def drop_unused_params(self) -> object:
        """
        drop_unused_params(self)

        :param self: :class:`PwAff`
        :return: :class:`PwAff`
        """

    @overload
    def drop_unused_params(self) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def has_tuple_id(self, type: dim_type) -> bool:
        """
        has_tuple_id(self, type)

        :param self: :class:`PwAff`
        :param type: :class:`dim_type`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_tuple_id(self, type: dim_type) -> object:
        """
        get_tuple_id(self, type)

        :param self: :class:`PwAff`
        :param type: :class:`dim_type`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_tuple_id(self, type: dim_type, id: Id) -> object:
        """
        set_tuple_id(self, type, id)

        :param self: :class:`PwAff`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_tuple_id(self, type: dim_type) -> object:
        """
        reset_tuple_id(self, type)

        :param self: :class:`PwAff`
        :param type: :class:`dim_type`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`PwAff`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def reset_user(self) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def params(self) -> object:
        """
        params(self)

        :param self: :class:`PwAff`
        :return: :class:`Set`
        """

    @overload
    def domain(self) -> object:
        """
        domain(self)

        :param self: :class:`PwAff`
        :return: :class:`Set`
        """

    @overload
    def domain(self) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def from_range(self) -> object:
        """
        from_range(self)

        :param self: :class:`PwAff`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def min(self, pwaff2: PwAff) -> object:
        """
        min(self, pwaff2)

        :param self: :class:`PwAff`
        :param pwaff2: :class:`PwAff`
        :return: :class:`PwAff`
        """

    def max(self, pwaff2: PwAff) -> object:
        """
        max(self, pwaff2)

        :param self: :class:`PwAff`
        :param pwaff2: :class:`PwAff`
        :return: :class:`PwAff`
        """

    def mul(self, pwaff2: PwAff) -> object:
        """
        mul(self, pwaff2)

        :param self: :class:`PwAff`
        :param pwaff2: :class:`PwAff`
        :return: :class:`PwAff`
        """

    def div(self, pa2: PwAff) -> object:
        """
        div(self, pa2)

        :param self: :class:`PwAff`
        :param pa2: :class:`PwAff`
        :return: :class:`PwAff`
        """

    @overload
    def add(self, pwaff2: PwAff) -> object:
        """
        add(self, pwaff2)

        :param self: :class:`PwAff`
        :param pwaff2: :class:`PwAff`
        :return: :class:`PwAff`
        """

    @overload
    def add(self, arg: UnionPwAff, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @overload
    def sub(self, pwaff2: PwAff) -> object:
        """
        sub(self, pwaff2)

        :param self: :class:`PwAff`
        :param pwaff2: :class:`PwAff`
        :return: :class:`PwAff`
        """

    @overload
    def sub(self, arg: UnionPwAff, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @overload
    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`PwAff`
        :return: :class:`PwAff`
        """

    @overload
    def neg(self) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def ceil(self) -> object:
        """
        ceil(self)

        :param self: :class:`PwAff`
        :return: :class:`PwAff`
        """

    @overload
    def floor(self) -> object:
        """
        floor(self)

        :param self: :class:`PwAff`
        :return: :class:`PwAff`
        """

    @overload
    def floor(self) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @overload
    def mod_val(self, mod: object) -> object:
        """
        mod_val(self, mod)

        :param self: :class:`PwAff`
        :param mod: :class:`Val`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def mod_val(self, arg: object, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def tdiv_q(self, pa2: PwAff) -> object:
        """
        tdiv_q(self, pa2)

        :param self: :class:`PwAff`
        :param pa2: :class:`PwAff`
        :return: :class:`PwAff`
        """

    def tdiv_r(self, pa2: PwAff) -> object:
        """
        tdiv_r(self, pa2)

        :param self: :class:`PwAff`
        :param pa2: :class:`PwAff`
        :return: :class:`PwAff`
        """

    @overload
    def intersect_params(self, set: Set) -> object:
        """
        intersect_params(self, set)

        :param self: :class:`PwAff`
        :param set: :class:`Set`
        :return: :class:`PwAff`
        """

    @overload
    def intersect_params(self, arg: Set, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @overload
    def intersect_domain(self, set: Set) -> object:
        """
        intersect_domain(self, set)

        :param self: :class:`PwAff`
        :param set: :class:`Set`
        :return: :class:`PwAff`
        """

    @overload
    def intersect_domain(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @overload
    def intersect_domain_wrapped_domain(self, set: Set) -> object:
        """
        intersect_domain_wrapped_domain(self, set)

        :param self: :class:`PwAff`
        :param set: :class:`Set`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def intersect_domain_wrapped_domain(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @overload
    def intersect_domain_wrapped_range(self, set: Set) -> object:
        """
        intersect_domain_wrapped_range(self, set)

        :param self: :class:`PwAff`
        :param set: :class:`Set`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def intersect_domain_wrapped_range(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @overload
    def subtract_domain(self, set: Set) -> object:
        """
        subtract_domain(self, set)

        :param self: :class:`PwAff`
        :param set: :class:`Set`
        :return: :class:`PwAff`
        """

    @overload
    def subtract_domain(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def cond(self, pwaff_true: PwAff, pwaff_false: PwAff) -> object:
        """
        cond(self, pwaff_true, pwaff_false)

        :param self: :class:`PwAff`
        :param pwaff_true: :class:`PwAff`
        :param pwaff_false: :class:`PwAff`
        :return: :class:`PwAff`
        """

    def add_constant_val(self, v: object) -> object:
        """
        add_constant_val(self, v)

        :param self: :class:`PwAff`
        :param v: :class:`Val`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def scale_val(self, v: object) -> object:
        """
        scale_val(self, v)

        :param self: :class:`PwAff`
        :param v: :class:`Val`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def scale_val(self, arg: object, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @overload
    def scale_down_val(self, f: object) -> object:
        """
        scale_down_val(self, f)

        :param self: :class:`PwAff`
        :param f: :class:`Val`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def scale_down_val(self, arg: object, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def domain_reverse(self) -> object:
        """
        domain_reverse(self)

        :param self: :class:`PwAff`
        :return: :class:`PwAff`
        """

    def insert_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        insert_dims(self, type, first, n)

        :param self: :class:`PwAff`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_dims(self, type: dim_type, n: int) -> object:
        """
        add_dims(self, type, n)

        :param self: :class:`PwAff`
        :param type: :class:`dim_type`
        :param n: :class:`unsigned`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def move_dims(self, dst_type: dim_type, dst_pos: int, src_type: dim_type, src_pos: int, n: int) -> object:
        """
        move_dims(self, dst_type, dst_pos, src_type, src_pos, n)

        :param self: :class:`PwAff`
        :param dst_type: :class:`dim_type`
        :param dst_pos: :class:`unsigned`
        :param src_type: :class:`dim_type`
        :param src_pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def drop_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_dims(self, type, first, n)

        :param self: :class:`PwAff`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def drop_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @overload
    def coalesce(self) -> object:
        """
        coalesce(self)

        :param self: :class:`PwAff`
        :return: :class:`PwAff`
        """

    @overload
    def coalesce(self) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @overload
    def gist(self, context: Set) -> object:
        """
        gist(self, context)

        :param self: :class:`PwAff`
        :param context: :class:`Set`
        :return: :class:`PwAff`
        """

    @overload
    def gist(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @overload
    def gist_params(self, context: Set) -> object:
        """
        gist_params(self, context)

        :param self: :class:`PwAff`
        :param context: :class:`Set`
        :return: :class:`PwAff`
        """

    @overload
    def gist_params(self, arg: Set, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def eval(self, pnt: Point) -> object:
        """
        eval(self, pnt)

        :param self: :class:`PwAff`
        :param pnt: :class:`Point`
        :return: :class:`Val`
        """

    def pullback_multi_aff(self, ma: MultiAff) -> object:
        """
        pullback_multi_aff(self, ma)

        :param self: :class:`PwAff`
        :param ma: :class:`MultiAff`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def pullback_pw_multi_aff(self, pma: PwMultiAff) -> object:
        """
        pullback_pw_multi_aff(self, pma)

        :param self: :class:`PwAff`
        :param pma: :class:`PwMultiAff`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def pullback_multi_pw_aff(self, mpa: MultiPwAff) -> object:
        """
        pullback_multi_pw_aff(self, mpa)

        :param self: :class:`PwAff`
        :param mpa: :class:`MultiPwAff`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_piece(self) -> int:
        """
        n_piece(self)

        :param self: :class:`PwAff`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_piece(self, fn: object) -> stat:
        """
        foreach_piece(self, fn)

        :param self: :class:`PwAff`
        :param fn: callback(set, aff)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def every_piece(self, test: object) -> bool:
        """
        every_piece(self, test)

        :param self: :class:`PwAff`
        :param test: callback(set, aff)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def isa_aff(self) -> bool:
        """
        isa_aff(self)

        :param self: :class:`PwAff`
        :return: bool
        """

    def as_aff(self) -> object:
        """
        as_aff(self)

        :param self: :class:`PwAff`
        :return: :class:`Aff`
        """

    def as_map(self) -> object:
        """
        as_map(self)

        :param self: :class:`PwAff`
        :return: :class:`Map`
        """

    def pos_set(self) -> object:
        """
        pos_set(self)

        :param self: :class:`PwAff`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def nonneg_set(self) -> object:
        """
        nonneg_set(self)

        :param self: :class:`PwAff`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def zero_set(self) -> object:
        """
        zero_set(self)

        :param self: :class:`PwAff`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def non_zero_set(self) -> object:
        """
        non_zero_set(self)

        :param self: :class:`PwAff`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def eq_set(self, pwaff2: PwAff) -> object:
        """
        eq_set(self, pwaff2)

        :param self: :class:`PwAff`
        :param pwaff2: :class:`PwAff`
        :return: :class:`Set`
        """

    def ne_set(self, pwaff2: PwAff) -> object:
        """
        ne_set(self, pwaff2)

        :param self: :class:`PwAff`
        :param pwaff2: :class:`PwAff`
        :return: :class:`Set`
        """

    def le_set(self, pwaff2: PwAff) -> object:
        """
        le_set(self, pwaff2)

        :param self: :class:`PwAff`
        :param pwaff2: :class:`PwAff`
        :return: :class:`Set`
        """

    def lt_set(self, pwaff2: PwAff) -> object:
        """
        lt_set(self, pwaff2)

        :param self: :class:`PwAff`
        :param pwaff2: :class:`PwAff`
        :return: :class:`Set`
        """

    def ge_set(self, pwaff2: PwAff) -> object:
        """
        ge_set(self, pwaff2)

        :param self: :class:`PwAff`
        :param pwaff2: :class:`PwAff`
        :return: :class:`Set`
        """

    def gt_set(self, pwaff2: PwAff) -> object:
        """
        gt_set(self, pwaff2)

        :param self: :class:`PwAff`
        :param pwaff2: :class:`PwAff`
        :return: :class:`Set`
        """

    def eq_map(self, pa2: PwAff) -> object:
        """
        eq_map(self, pa2)

        :param self: :class:`PwAff`
        :param pa2: :class:`PwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def le_map(self, pa2: PwAff) -> object:
        """
        le_map(self, pa2)

        :param self: :class:`PwAff`
        :param pa2: :class:`PwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lt_map(self, pa2: PwAff) -> object:
        """
        lt_map(self, pa2)

        :param self: :class:`PwAff`
        :param pa2: :class:`PwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def ge_map(self, pa2: PwAff) -> object:
        """
        ge_map(self, pa2)

        :param self: :class:`PwAff`
        :param pa2: :class:`PwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gt_map(self, pa2: PwAff) -> object:
        """
        gt_map(self, pa2)

        :param self: :class:`PwAff`
        :param pa2: :class:`PwAff`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def bind_domain(self, tuple: MultiId) -> object:
        """
        bind_domain(self, tuple)

        :param self: :class:`PwAff`
        :param tuple: :class:`MultiId`
        :return: :class:`PwAff`
        """

    def bind_domain_wrapped_domain(self, tuple: MultiId) -> object:
        """
        bind_domain_wrapped_domain(self, tuple)

        :param self: :class:`PwAff`
        :param tuple: :class:`MultiId`
        :return: :class:`PwAff`
        """

    @overload
    def bind_id(self, id: Id) -> object:
        """
        bind_id(self, id)

        :param self: :class:`PwAff`
        :param id: :class:`Id`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def bind_id(self, arg: Id, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`PwAff`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def to_str(self) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @overload
    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`PwAff`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dump(self) -> None:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def to_union_pw_aff(self) -> object:
        """
        to_union_pw_aff(self)

        :param self: :class:`PwAff`
        :return: :class:`UnionPwAff`
        """

    @overload
    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`PwAff`
        :return: :class:`PwAffList`
        """

    @overload
    def to_list(self) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @overload
    def min_val(self) -> object:
        """
        min_val(self)

        :param self: :class:`PwAff`
        :return: :class:`Val`
        """

    @overload
    def min_val(self) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    @overload
    def max_val(self) -> object:
        """
        max_val(self)

        :param self: :class:`PwAff`
        :return: :class:`Val`
        """

    @overload
    def max_val(self) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def get_pw_aff_list(self) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def set_dim_name(self, arg0: dim_type, arg1: int, arg2: str, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def add_pw_aff(self, arg: PwAff, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def n_pw_aff(self) -> int:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def foreach_pw_aff(self, arg: object, /) -> stat:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def every_pw_aff(self, arg: object, /) -> bool:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def extract_pw_aff(self, arg: Space, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def pullback_union_pw_multi_aff(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def intersect_domain_space(self, arg: Space, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def intersect_domain_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def subtract_domain_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def subtract_domain_space(self, arg: Space, /) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

    def zero_union_set(self) -> object:
        """Upcast from :class:`PwAff` to :class:`UnionPwAff`"""

class PwAffList:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def min(self) -> object:
        """
        min(self)

        :param self: :class:`PwAffList`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def max(self) -> object:
        """
        max(self)

        :param self: :class:`PwAffList`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def eq_set(self, list2: PwAffList) -> object:
        """
        eq_set(self, list2)

        :param self: :class:`PwAffList`
        :param list2: :class:`PwAffList`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def ne_set(self, list2: PwAffList) -> object:
        """
        ne_set(self, list2)

        :param self: :class:`PwAffList`
        :param list2: :class:`PwAffList`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def le_set(self, list2: PwAffList) -> object:
        """
        le_set(self, list2)

        :param self: :class:`PwAffList`
        :param list2: :class:`PwAffList`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lt_set(self, list2: PwAffList) -> object:
        """
        lt_set(self, list2)

        :param self: :class:`PwAffList`
        :param list2: :class:`PwAffList`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def ge_set(self, list2: PwAffList) -> object:
        """
        ge_set(self, list2)

        :param self: :class:`PwAffList`
        :param list2: :class:`PwAffList`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gt_set(self, list2: PwAffList) -> object:
        """
        gt_set(self, list2)

        :param self: :class:`PwAffList`
        :param list2: :class:`PwAffList`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`PwAffList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_pw_aff(el: PwAff) -> object:
        """
        from_pw_aff(el)

        :param el: :class:`PwAff`
        :return: :class:`PwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`PwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`PwAffList`
        :return: :class:`PwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: PwAff) -> object:
        """
        add(self, el)

        :param self: :class:`PwAffList`
        :param el: :class:`PwAff`
        :return: :class:`PwAffList`
        """

    def insert(self, pos: int, el: PwAff) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`PwAffList`
        :param pos: :class:`unsigned`
        :param el: :class:`PwAff`
        :return: :class:`PwAffList`
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`PwAffList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`PwAffList`
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`PwAffList`
        :return: :class:`PwAffList`
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`PwAffList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`PwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`PwAffList`
        :return: :class:`PwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: PwAffList) -> object:
        """
        concat(self, list2)

        :param self: :class:`PwAffList`
        :param list2: :class:`PwAffList`
        :return: :class:`PwAffList`
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`PwAffList`
        :return: isl_size
        """

    def n_pw_aff(self) -> int:
        """
        n_pw_aff(self)

        :param self: :class:`PwAffList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`PwAffList`
        :param index: :class:`int`
        :return: :class:`PwAff`
        """

    def get_pw_aff(self, index: int) -> object:
        """
        get_pw_aff(self, index)

        :param self: :class:`PwAffList`
        :param index: :class:`int`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: PwAff) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`PwAffList`
        :param index: :class:`int`
        :param el: :class:`PwAff`
        :return: :class:`PwAffList`
        """

    def set_pw_aff(self, index: int, el: PwAff) -> object:
        """
        set_pw_aff(self, index, el)

        :param self: :class:`PwAffList`
        :param index: :class:`int`
        :param el: :class:`PwAff`
        :return: :class:`PwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`PwAffList`
        :param fn: callback(el)
        :return: isl_stat
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`PwAffList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`PwAffList`
        :param fn: callback(el)
        :return: :class:`PwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`PwAffList`
        :param cmp: callback(a, b)
        :return: :class:`PwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`PwAffList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`PwAffList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`PwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class PwMultiAff:
    @overload
    def __init__(self, arg: MultiAff, /) -> None: ...

    @overload
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    @staticmethod
    def zero(space: Space) -> object:
        """
        zero(space)

        :param space: :class:`Space`
        :return: :class:`PwMultiAff`
        """

    @staticmethod
    def identity_on_domain_space(space: Space) -> object:
        """
        identity_on_domain_space(space)

        :param space: :class:`Space`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def identity(space: Space) -> object:
        """
        identity(space)

        :param space: :class:`Space`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def domain_map(space: Space) -> object:
        """
        domain_map(space)

        :param space: :class:`Space`
        :return: :class:`PwMultiAff`
        """

    @staticmethod
    def range_map(space: Space) -> object:
        """
        range_map(space)

        :param space: :class:`Space`
        :return: :class:`PwMultiAff`
        """

    @staticmethod
    def project_out_map(space: Space, type: dim_type, first: int, n: int) -> object:
        """
        project_out_map(space, type, first, n)

        :param space: :class:`Space`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_multi_aff(ma: MultiAff) -> object:
        """
        from_multi_aff(ma)

        :param ma: :class:`MultiAff`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_pw_aff(pa: PwAff) -> object:
        """
        from_pw_aff(pa)

        :param pa: :class:`PwAff`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(set: Set, maff: MultiAff) -> object:
        """
        alloc(set, maff)

        :param set: :class:`Set`
        :param maff: :class:`MultiAff`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def copy(self) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`PwMultiAff`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dim(self, arg: dim_type, /) -> int:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def involves_locals(self) -> bool:
        """
        involves_locals(self)

        :param self: :class:`PwMultiAff`
        :return: bool
        """

    @overload
    def involves_locals(self) -> bool:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def involves_param_id(self, id: Id) -> bool:
        """
        involves_param_id(self, id)

        :param self: :class:`PwMultiAff`
        :param id: :class:`Id`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_dims(self, type: dim_type, first: int, n: int) -> bool:
        """
        involves_dims(self, type, first, n)

        :param self: :class:`PwMultiAff`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, pos: int) -> object:
        """
        get_at(self, pos)

        :param self: :class:`PwMultiAff`
        :param pos: :class:`int`
        :return: :class:`PwAff`
        """

    def get_pw_aff(self, pos: int) -> object:
        """
        get_pw_aff(self, pos)

        :param self: :class:`PwMultiAff`
        :param pos: :class:`int`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_pw_aff(self, pos: int, pa: PwAff) -> object:
        """
        set_pw_aff(self, pos, pa)

        :param self: :class:`PwMultiAff`
        :param pos: :class:`unsigned`
        :param pa: :class:`PwAff`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_ctx(self) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def get_domain_space(self) -> object:
        """
        get_domain_space(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`Space`
        """

    @overload
    def get_space(self) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def has_tuple_name(self, type: dim_type) -> bool:
        """
        has_tuple_name(self, type)

        :param self: :class:`PwMultiAff`
        :param type: :class:`dim_type`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_tuple_name(self, type: dim_type) -> object:
        """
        get_tuple_name(self, type)

        :param self: :class:`PwMultiAff`
        :param type: :class:`dim_type`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_range_tuple_id(self) -> object:
        """
        get_range_tuple_id(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`Id`
        """

    def get_tuple_id(self, type: dim_type) -> object:
        """
        get_tuple_id(self, type)

        :param self: :class:`PwMultiAff`
        :param type: :class:`dim_type`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_range_tuple_id(self) -> bool:
        """
        has_range_tuple_id(self)

        :param self: :class:`PwMultiAff`
        :return: bool
        """

    def has_tuple_id(self, type: dim_type) -> bool:
        """
        has_tuple_id(self, type)

        :param self: :class:`PwMultiAff`
        :param type: :class:`dim_type`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_tuple_id(self, type: dim_type, id: Id) -> object:
        """
        set_tuple_id(self, type, id)

        :param self: :class:`PwMultiAff`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_range_tuple_id(self, id: Id) -> object:
        """
        set_range_tuple_id(self, id)

        :param self: :class:`PwMultiAff`
        :param id: :class:`Id`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_tuple_id(self, type: dim_type) -> object:
        """
        reset_tuple_id(self, type)

        :param self: :class:`PwMultiAff`
        :param type: :class:`dim_type`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def reset_user(self) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`PwMultiAff`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def find_dim_by_name(self, arg0: dim_type, arg1: str, /) -> int:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def drop_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_dims(self, type, first, n)

        :param self: :class:`PwMultiAff`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def drop_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def domain(self) -> object:
        """
        domain(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`Set`
        """

    @overload
    def domain(self) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @staticmethod
    def empty(space: Space) -> object:
        """
        empty(space)

        :param space: :class:`Space`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_domain(set: Set) -> object:
        """
        from_domain(set)

        :param set: :class:`Set`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def multi_val_on_domain(domain: Set, mv: MultiVal) -> object:
        """
        multi_val_on_domain(domain, mv)

        :param domain: :class:`Set`
        :param mv: :class:`MultiVal`
        :return: :class:`PwMultiAff`
        """

    def get_dim_name(self, type: dim_type, pos: int) -> object:
        """
        get_dim_name(self, type, pos)

        :param self: :class:`PwMultiAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_dim_id(self, type: dim_type, pos: int) -> object:
        """
        get_dim_id(self, type, pos)

        :param self: :class:`PwMultiAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_id(self, type: dim_type, pos: int, id: Id) -> object:
        """
        set_dim_id(self, type, pos, id)

        :param self: :class:`PwMultiAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param id: :class:`Id`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def involves_nan(self) -> bool:
        """
        involves_nan(self)

        :param self: :class:`PwMultiAff`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def involves_nan(self) -> bool:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def plain_is_equal(self, pma2: PwMultiAff) -> bool:
        """
        plain_is_equal(self, pma2)

        :param self: :class:`PwMultiAff`
        :param pma2: :class:`PwMultiAff`
        :return: bool
        """

    @overload
    def plain_is_equal(self, arg: UnionPwMultiAff, /) -> bool:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def is_equal(self, pma2: PwMultiAff) -> bool:
        """
        is_equal(self, pma2)

        :param self: :class:`PwMultiAff`
        :param pma2: :class:`PwMultiAff`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def fix_si(self, type: dim_type, pos: int, value: int) -> object:
        """
        fix_si(self, type, pos, value)

        :param self: :class:`PwMultiAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param value: :class:`int`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def union_add(self, pma2: PwMultiAff) -> object:
        """
        union_add(self, pma2)

        :param self: :class:`PwMultiAff`
        :param pma2: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`
        """

    @overload
    def union_add(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def domain_reverse(self) -> object:
        """
        domain_reverse(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`
        """

    @overload
    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def neg(self) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def add(self, pma2: PwMultiAff) -> object:
        """
        add(self, pma2)

        :param self: :class:`PwMultiAff`
        :param pma2: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`
        """

    @overload
    def add(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def sub(self, pma2: PwMultiAff) -> object:
        """
        sub(self, pma2)

        :param self: :class:`PwMultiAff`
        :param pma2: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`
        """

    @overload
    def sub(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def add_constant_val(self, v: object) -> object:
        """
        add_constant_val(self, v)

        :param self: :class:`PwMultiAff`
        :param v: :class:`Val`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_constant_multi_val(self, mv: MultiVal) -> object:
        """
        add_constant_multi_val(self, mv)

        :param self: :class:`PwMultiAff`
        :param mv: :class:`MultiVal`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def scale_val(self, v: object) -> object:
        """
        scale_val(self, v)

        :param self: :class:`PwMultiAff`
        :param v: :class:`Val`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def scale_val(self, arg: object, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def scale_down_val(self, v: object) -> object:
        """
        scale_down_val(self, v)

        :param self: :class:`PwMultiAff`
        :param v: :class:`Val`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def scale_down_val(self, arg: object, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def scale_multi_val(self, mv: MultiVal) -> object:
        """
        scale_multi_val(self, mv)

        :param self: :class:`PwMultiAff`
        :param mv: :class:`MultiVal`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def scale_multi_val(self, arg: MultiVal, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def scale_down_multi_val(self, mv: MultiVal) -> object:
        """
        scale_down_multi_val(self, mv)

        :param self: :class:`PwMultiAff`
        :param mv: :class:`MultiVal`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def union_lexmin(self, pma2: PwMultiAff) -> object:
        """
        union_lexmin(self, pma2)

        :param self: :class:`PwMultiAff`
        :param pma2: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def union_lexmax(self, pma2: PwMultiAff) -> object:
        """
        union_lexmax(self, pma2)

        :param self: :class:`PwMultiAff`
        :param pma2: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def range_product(self, pma2: PwMultiAff) -> object:
        """
        range_product(self, pma2)

        :param self: :class:`PwMultiAff`
        :param pma2: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`
        """

    @overload
    def range_product(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def flat_range_product(self, pma2: PwMultiAff) -> object:
        """
        flat_range_product(self, pma2)

        :param self: :class:`PwMultiAff`
        :param pma2: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`
        """

    @overload
    def flat_range_product(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def product(self, pma2: PwMultiAff) -> object:
        """
        product(self, pma2)

        :param self: :class:`PwMultiAff`
        :param pma2: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`
        """

    @overload
    def range_factor_domain(self) -> object:
        """
        range_factor_domain(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`
        """

    @overload
    def range_factor_domain(self) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def range_factor_range(self) -> object:
        """
        range_factor_range(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`
        """

    @overload
    def range_factor_range(self) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def intersect_params(self, set: Set) -> object:
        """
        intersect_params(self, set)

        :param self: :class:`PwMultiAff`
        :param set: :class:`Set`
        :return: :class:`PwMultiAff`
        """

    @overload
    def intersect_params(self, arg: Set, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def intersect_domain(self, set: Set) -> object:
        """
        intersect_domain(self, set)

        :param self: :class:`PwMultiAff`
        :param set: :class:`Set`
        :return: :class:`PwMultiAff`
        """

    @overload
    def intersect_domain(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def intersect_domain_wrapped_domain(self, set: Set) -> object:
        """
        intersect_domain_wrapped_domain(self, set)

        :param self: :class:`PwMultiAff`
        :param set: :class:`Set`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def intersect_domain_wrapped_domain(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def intersect_domain_wrapped_range(self, set: Set) -> object:
        """
        intersect_domain_wrapped_range(self, set)

        :param self: :class:`PwMultiAff`
        :param set: :class:`Set`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def intersect_domain_wrapped_range(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def subtract_domain(self, set: Set) -> object:
        """
        subtract_domain(self, set)

        :param self: :class:`PwMultiAff`
        :param set: :class:`Set`
        :return: :class:`PwMultiAff`
        """

    @overload
    def subtract_domain(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def insert_domain(self, domain: Space) -> object:
        """
        insert_domain(self, domain)

        :param self: :class:`PwMultiAff`
        :param domain: :class:`Space`
        :return: :class:`PwMultiAff`
        """

    def project_domain_on_params(self) -> object:
        """
        project_domain_on_params(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`PwMultiAff`
        :param model: :class:`Space`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def align_params(self, arg: Space, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def drop_unused_params(self) -> object:
        """
        drop_unused_params(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`
        """

    @overload
    def drop_unused_params(self) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def coalesce(self) -> object:
        """
        coalesce(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`
        """

    @overload
    def coalesce(self) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def gist_params(self, set: Set) -> object:
        """
        gist_params(self, set)

        :param self: :class:`PwMultiAff`
        :param set: :class:`Set`
        :return: :class:`PwMultiAff`
        """

    @overload
    def gist_params(self, arg: Set, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @overload
    def gist(self, set: Set) -> object:
        """
        gist(self, set)

        :param self: :class:`PwMultiAff`
        :param set: :class:`Set`
        :return: :class:`PwMultiAff`
        """

    @overload
    def gist(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def pullback_multi_aff(self, ma: MultiAff) -> object:
        """
        pullback_multi_aff(self, ma)

        :param self: :class:`PwMultiAff`
        :param ma: :class:`MultiAff`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def pullback_pw_multi_aff(self, pma2: PwMultiAff) -> object:
        """
        pullback_pw_multi_aff(self, pma2)

        :param self: :class:`PwMultiAff`
        :param pma2: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def preimage_domain_wrapped_domain_pw_multi_aff(self, pma2: PwMultiAff) -> object:
        """
        preimage_domain_wrapped_domain_pw_multi_aff(self, pma2)

        :param self: :class:`PwMultiAff`
        :param pma2: :class:`PwMultiAff`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_piece(self) -> int:
        """
        n_piece(self)

        :param self: :class:`PwMultiAff`
        :return: isl_size
        """

    def foreach_piece(self, fn: object) -> stat:
        """
        foreach_piece(self, fn)

        :param self: :class:`PwMultiAff`
        :param fn: callback(set, maff)
        :return: isl_stat
        """

    def every_piece(self, test: object) -> bool:
        """
        every_piece(self, test)

        :param self: :class:`PwMultiAff`
        :param test: callback(set, ma)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def isa_multi_aff(self) -> bool:
        """
        isa_multi_aff(self)

        :param self: :class:`PwMultiAff`
        :return: bool
        """

    def as_multi_aff(self) -> object:
        """
        as_multi_aff(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`MultiAff`
        """

    def as_map(self) -> object:
        """
        as_map(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`Map`
        """

    def as_set(self) -> object:
        """
        as_set(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`Set`
        """

    @overload
    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`PwMultiAff`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def to_str(self) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    @staticmethod
    def from_set(set: Set) -> object:
        """
        from_set(set)

        :param set: :class:`Set`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_map(map: Map) -> object:
        """
        from_map(map)

        :param map: :class:`Map`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def bind_domain(self, tuple: MultiId) -> object:
        """
        bind_domain(self, tuple)

        :param self: :class:`PwMultiAff`
        :param tuple: :class:`MultiId`
        :return: :class:`PwMultiAff`
        """

    def bind_domain_wrapped_domain(self, tuple: MultiId) -> object:
        """
        bind_domain_wrapped_domain(self, tuple)

        :param self: :class:`PwMultiAff`
        :param tuple: :class:`MultiId`
        :return: :class:`PwMultiAff`
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`PwMultiAff`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dump(self) -> None:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def to_union_pw_multi_aff(self) -> object:
        """
        to_union_pw_multi_aff(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`UnionPwMultiAff`
        """

    @staticmethod
    def from_multi_pw_aff(mpa: MultiPwAff) -> object:
        """
        from_multi_pw_aff(mpa)

        :param mpa: :class:`MultiPwAff`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_multi_pw_aff(self) -> object:
        """
        to_multi_pw_aff(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`MultiPwAff`
        """

    @overload
    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`PwMultiAffList`
        """

    @overload
    def to_list(self) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def min_multi_val(self) -> object:
        """
        min_multi_val(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`MultiVal`
        """

    def max_multi_val(self) -> object:
        """
        max_multi_val(self)

        :param self: :class:`PwMultiAff`
        :return: :class:`MultiVal`
        """

    def get_union_pw_aff(self, arg: int, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def add_pw_multi_aff(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def get_pw_multi_aff_list(self) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def set_dim_name(self, arg0: dim_type, arg1: int, arg2: str, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def pullback_union_pw_multi_aff(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def apply_union_pw_multi_aff(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def preimage_domain_wrapped_domain_union_pw_multi_aff(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def n_pw_multi_aff(self) -> int:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def foreach_pw_multi_aff(self, arg: object, /) -> stat:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def every_pw_multi_aff(self, arg: object, /) -> bool:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def extract_pw_multi_aff(self, arg: Space, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def isa_pw_multi_aff(self) -> bool:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def as_pw_multi_aff(self) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def plain_is_empty(self) -> bool:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def intersect_domain_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def intersect_domain_space(self, arg: Space, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def subtract_domain_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def subtract_domain_space(self, arg: Space, /) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def as_union_map(self) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

    def as_multi_union_pw_aff(self) -> object:
        """Upcast from :class:`PwMultiAff` to :class:`UnionPwMultiAff`"""

class PwMultiAffList:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`PwMultiAffList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_pw_multi_aff(el: PwMultiAff) -> object:
        """
        from_pw_multi_aff(el)

        :param el: :class:`PwMultiAff`
        :return: :class:`PwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`PwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`PwMultiAffList`
        :return: :class:`PwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: PwMultiAff) -> object:
        """
        add(self, el)

        :param self: :class:`PwMultiAffList`
        :param el: :class:`PwMultiAff`
        :return: :class:`PwMultiAffList`
        """

    def insert(self, pos: int, el: PwMultiAff) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`PwMultiAffList`
        :param pos: :class:`unsigned`
        :param el: :class:`PwMultiAff`
        :return: :class:`PwMultiAffList`
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`PwMultiAffList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`PwMultiAffList`
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`PwMultiAffList`
        :return: :class:`PwMultiAffList`
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`PwMultiAffList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`PwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`PwMultiAffList`
        :return: :class:`PwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: PwMultiAffList) -> object:
        """
        concat(self, list2)

        :param self: :class:`PwMultiAffList`
        :param list2: :class:`PwMultiAffList`
        :return: :class:`PwMultiAffList`
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`PwMultiAffList`
        :return: isl_size
        """

    def n_pw_multi_aff(self) -> int:
        """
        n_pw_multi_aff(self)

        :param self: :class:`PwMultiAffList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`PwMultiAffList`
        :param index: :class:`int`
        :return: :class:`PwMultiAff`
        """

    def get_pw_multi_aff(self, index: int) -> object:
        """
        get_pw_multi_aff(self, index)

        :param self: :class:`PwMultiAffList`
        :param index: :class:`int`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: PwMultiAff) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`PwMultiAffList`
        :param index: :class:`int`
        :param el: :class:`PwMultiAff`
        :return: :class:`PwMultiAffList`
        """

    def set_pw_multi_aff(self, index: int, el: PwMultiAff) -> object:
        """
        set_pw_multi_aff(self, index, el)

        :param self: :class:`PwMultiAffList`
        :param index: :class:`int`
        :param el: :class:`PwMultiAff`
        :return: :class:`PwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`PwMultiAffList`
        :param fn: callback(el)
        :return: isl_stat
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`PwMultiAffList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`PwMultiAffList`
        :param fn: callback(el)
        :return: :class:`PwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`PwMultiAffList`
        :param cmp: callback(a, b)
        :return: :class:`PwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`PwMultiAffList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`PwMultiAffList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`PwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class PwQPolynomial:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`PwQPolynomial`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_nan(self) -> bool:
        """
        involves_nan(self)

        :param self: :class:`PwQPolynomial`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_is_equal(self, pwqp2: PwQPolynomial) -> bool:
        """
        plain_is_equal(self, pwqp2)

        :param self: :class:`PwQPolynomial`
        :param pwqp2: :class:`PwQPolynomial`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def zero(space: Space) -> object:
        """
        zero(space)

        :param space: :class:`Space`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(set: Set, qp: QPolynomial) -> object:
        """
        alloc(set, qp)

        :param set: :class:`Set`
        :param qp: :class:`QPolynomial`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_qpolynomial(qp: QPolynomial) -> object:
        """
        from_qpolynomial(qp)

        :param qp: :class:`QPolynomial`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_zero(self) -> bool:
        """
        is_zero(self)

        :param self: :class:`PwQPolynomial`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_domain_space(self) -> object:
        """
        get_domain_space(self)

        :param self: :class:`PwQPolynomial`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`PwQPolynomial`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_domain_space(self, space: Space) -> object:
        """
        reset_domain_space(self, space)

        :param self: :class:`PwQPolynomial`
        :param space: :class:`Space`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`PwQPolynomial`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_param_id(self, id: Id) -> bool:
        """
        involves_param_id(self, id)

        :param self: :class:`PwQPolynomial`
        :param id: :class:`Id`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_dims(self, type: dim_type, first: int, n: int) -> bool:
        """
        involves_dims(self, type, first, n)

        :param self: :class:`PwQPolynomial`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_equal_space(self, pwqp2: PwQPolynomial) -> bool:
        """
        has_equal_space(self, pwqp2)

        :param self: :class:`PwQPolynomial`
        :param pwqp2: :class:`PwQPolynomial`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_name(self, type: dim_type, pos: int, s: str) -> object:
        """
        set_dim_name(self, type, pos, s)

        :param self: :class:`PwQPolynomial`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param s: string
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`PwQPolynomial`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def domain(self) -> object:
        """
        domain(self)

        :param self: :class:`PwQPolynomial`
        :return: :class:`Set`
        """

    def intersect_domain(self, set: Set) -> object:
        """
        intersect_domain(self, set)

        :param self: :class:`PwQPolynomial`
        :param set: :class:`Set`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain_wrapped_domain(self, set: Set) -> object:
        """
        intersect_domain_wrapped_domain(self, set)

        :param self: :class:`PwQPolynomial`
        :param set: :class:`Set`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain_wrapped_range(self, set: Set) -> object:
        """
        intersect_domain_wrapped_range(self, set)

        :param self: :class:`PwQPolynomial`
        :param set: :class:`Set`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_params(self, set: Set) -> object:
        """
        intersect_params(self, set)

        :param self: :class:`PwQPolynomial`
        :param set: :class:`Set`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def subtract_domain(self, set: Set) -> object:
        """
        subtract_domain(self, set)

        :param self: :class:`PwQPolynomial`
        :param set: :class:`Set`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def project_domain_on_params(self) -> object:
        """
        project_domain_on_params(self)

        :param self: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def from_range(self) -> object:
        """
        from_range(self)

        :param self: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_dims(self, type, first, n)

        :param self: :class:`PwQPolynomial`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def split_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        split_dims(self, type, first, n)

        :param self: :class:`PwQPolynomial`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_unused_params(self) -> object:
        """
        drop_unused_params(self)

        :param self: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, pwqp2: PwQPolynomial) -> object:
        """
        add(self, pwqp2)

        :param self: :class:`PwQPolynomial`
        :param pwqp2: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sub(self, pwqp2: PwQPolynomial) -> object:
        """
        sub(self, pwqp2)

        :param self: :class:`PwQPolynomial`
        :param pwqp2: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_disjoint(self, pwqp2: PwQPolynomial) -> object:
        """
        add_disjoint(self, pwqp2)

        :param self: :class:`PwQPolynomial`
        :param pwqp2: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def mul(self, pwqp2: PwQPolynomial) -> object:
        """
        mul(self, pwqp2)

        :param self: :class:`PwQPolynomial`
        :param pwqp2: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_val(self, v: object) -> object:
        """
        scale_val(self, v)

        :param self: :class:`PwQPolynomial`
        :param v: :class:`Val`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_down_val(self, v: object) -> object:
        """
        scale_down_val(self, v)

        :param self: :class:`PwQPolynomial`
        :param v: :class:`Val`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def pow(self, exponent: int) -> object:
        """
        pow(self, exponent)

        :param self: :class:`PwQPolynomial`
        :param exponent: :class:`unsigned`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def domain_reverse(self) -> object:
        """
        domain_reverse(self)

        :param self: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        insert_dims(self, type, first, n)

        :param self: :class:`PwQPolynomial`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_dims(self, type: dim_type, n: int) -> object:
        """
        add_dims(self, type, n)

        :param self: :class:`PwQPolynomial`
        :param type: :class:`dim_type`
        :param n: :class:`unsigned`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def move_dims(self, dst_type: dim_type, dst_pos: int, src_type: dim_type, src_pos: int, n: int) -> object:
        """
        move_dims(self, dst_type, dst_pos, src_type, src_pos, n)

        :param self: :class:`PwQPolynomial`
        :param dst_type: :class:`dim_type`
        :param dst_pos: :class:`unsigned`
        :param src_type: :class:`dim_type`
        :param src_pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def fix_val(self, type: dim_type, n: int, v: object) -> object:
        """
        fix_val(self, type, n, v)

        :param self: :class:`PwQPolynomial`
        :param type: :class:`dim_type`
        :param n: :class:`unsigned`
        :param v: :class:`Val`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def eval(self, pnt: Point) -> object:
        """
        eval(self, pnt)

        :param self: :class:`PwQPolynomial`
        :param pnt: :class:`Point`
        :return: :class:`Val`
        """

    def max(self) -> object:
        """
        max(self)

        :param self: :class:`PwQPolynomial`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def min(self) -> object:
        """
        min(self)

        :param self: :class:`PwQPolynomial`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_piece(self) -> int:
        """
        n_piece(self)

        :param self: :class:`PwQPolynomial`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_piece(self, fn: object) -> stat:
        """
        foreach_piece(self, fn)

        :param self: :class:`PwQPolynomial`
        :param fn: callback(set, qp)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def every_piece(self, test: object) -> bool:
        """
        every_piece(self, test)

        :param self: :class:`PwQPolynomial`
        :param test: callback(set, qp)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_lifted_piece(self, fn: object) -> stat:
        """
        foreach_lifted_piece(self, fn)

        :param self: :class:`PwQPolynomial`
        :param fn: callback(set, qp)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def isa_qpolynomial(self) -> bool:
        """
        isa_qpolynomial(self)

        :param self: :class:`PwQPolynomial`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def as_qpolynomial(self) -> object:
        """
        as_qpolynomial(self)

        :param self: :class:`PwQPolynomial`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_pw_aff(pwaff: PwAff) -> object:
        """
        from_pw_aff(pwaff)

        :param pwaff: :class:`PwAff`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`PwQPolynomial`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`PwQPolynomial`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def coalesce(self) -> object:
        """
        coalesce(self)

        :param self: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gist(self, context: Set) -> object:
        """
        gist(self, context)

        :param self: :class:`PwQPolynomial`
        :param context: :class:`Set`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gist_params(self, context: Set) -> object:
        """
        gist_params(self, context)

        :param self: :class:`PwQPolynomial`
        :param context: :class:`Set`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def split_periods(self, max_periods: int) -> object:
        """
        split_periods(self, max_periods)

        :param self: :class:`PwQPolynomial`
        :param max_periods: :class:`int`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def bound(self, type: fold) -> object:
        """
        bound(self, type)

        :param self: :class:`PwQPolynomial`
        :param type: :class:`fold`
        :return: tuple: (:class:`PwQPolynomialFold`, tight (Bool))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_polynomial(self, sign: int) -> object:
        """
        to_polynomial(self, sign)

        :param self: :class:`PwQPolynomial`
        :param sign: :class:`int`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_union_pw_qpolynomial(self) -> object:
        """
        to_union_pw_qpolynomial(self)

        :param self: :class:`PwQPolynomial`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class PwQPolynomialFold:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def fix_val(self, type: dim_type, n: int, v: object) -> object:
        """
        fix_val(self, type, n, v)

        :param self: :class:`PwQPolynomialFold`
        :param type: :class:`dim_type`
        :param n: :class:`unsigned`
        :param v: :class:`Val`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`PwQPolynomialFold`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_type(self) -> fold:
        """
        get_type(self)

        :param self: :class:`PwQPolynomialFold`
        :return: isl_fold 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_nan(self) -> bool:
        """
        involves_nan(self)

        :param self: :class:`PwQPolynomialFold`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_is_equal(self, pwf2: PwQPolynomialFold) -> bool:
        """
        plain_is_equal(self, pwf2)

        :param self: :class:`PwQPolynomialFold`
        :param pwf2: :class:`PwQPolynomialFold`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_pw_qpolynomial(type: fold, pwqp: PwQPolynomial) -> object:
        """
        from_pw_qpolynomial(type, pwqp)

        :param type: :class:`fold`
        :param pwqp: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(type: fold, set: Set, fold: QPolynomialFold) -> object:
        """
        alloc(type, set, fold)

        :param type: :class:`fold`
        :param set: :class:`Set`
        :param fold: :class:`QPolynomialFold`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_qpolynomial_fold(fold: QPolynomialFold) -> object:
        """
        from_qpolynomial_fold(fold)

        :param fold: :class:`QPolynomialFold`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`PwQPolynomialFold`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_zero(self) -> bool:
        """
        is_zero(self)

        :param self: :class:`PwQPolynomialFold`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_domain_space(self) -> object:
        """
        get_domain_space(self)

        :param self: :class:`PwQPolynomialFold`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`PwQPolynomialFold`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_space(self, space: Space) -> object:
        """
        reset_space(self, space)

        :param self: :class:`PwQPolynomialFold`
        :param space: :class:`Space`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`PwQPolynomialFold`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_param_id(self, id: Id) -> bool:
        """
        involves_param_id(self, id)

        :param self: :class:`PwQPolynomialFold`
        :param id: :class:`Id`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_equal_space(self, pwf2: PwQPolynomialFold) -> bool:
        """
        has_equal_space(self, pwf2)

        :param self: :class:`PwQPolynomialFold`
        :param pwf2: :class:`PwQPolynomialFold`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`PwQPolynomialFold`
        :return: size_t 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def zero(space: Space, type: fold) -> object:
        """
        zero(space, type)

        :param space: :class:`Space`
        :param type: :class:`fold`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_name(self, type: dim_type, pos: int, s: str) -> object:
        """
        set_dim_name(self, type, pos, s)

        :param self: :class:`PwQPolynomialFold`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param s: string
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`PwQPolynomialFold`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`PwQPolynomialFold`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def domain(self) -> object:
        """
        domain(self)

        :param self: :class:`PwQPolynomialFold`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain(self, set: Set) -> object:
        """
        intersect_domain(self, set)

        :param self: :class:`PwQPolynomialFold`
        :param set: :class:`Set`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain_wrapped_domain(self, set: Set) -> object:
        """
        intersect_domain_wrapped_domain(self, set)

        :param self: :class:`PwQPolynomialFold`
        :param set: :class:`Set`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain_wrapped_range(self, set: Set) -> object:
        """
        intersect_domain_wrapped_range(self, set)

        :param self: :class:`PwQPolynomialFold`
        :param set: :class:`Set`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_params(self, set: Set) -> object:
        """
        intersect_params(self, set)

        :param self: :class:`PwQPolynomialFold`
        :param set: :class:`Set`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def subtract_domain(self, set: Set) -> object:
        """
        subtract_domain(self, set)

        :param self: :class:`PwQPolynomialFold`
        :param set: :class:`Set`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, pwf2: PwQPolynomialFold) -> object:
        """
        add(self, pwf2)

        :param self: :class:`PwQPolynomialFold`
        :param pwf2: :class:`PwQPolynomialFold`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def fold(self, pwf2: PwQPolynomialFold) -> object:
        """
        fold(self, pwf2)

        :param self: :class:`PwQPolynomialFold`
        :param pwf2: :class:`PwQPolynomialFold`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_disjoint(self, pwf2: PwQPolynomialFold) -> object:
        """
        add_disjoint(self, pwf2)

        :param self: :class:`PwQPolynomialFold`
        :param pwf2: :class:`PwQPolynomialFold`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_val(self, v: object) -> object:
        """
        scale_val(self, v)

        :param self: :class:`PwQPolynomialFold`
        :param v: :class:`Val`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_down_val(self, v: object) -> object:
        """
        scale_down_val(self, v)

        :param self: :class:`PwQPolynomialFold`
        :param v: :class:`Val`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def project_domain_on_params(self) -> object:
        """
        project_domain_on_params(self)

        :param self: :class:`PwQPolynomialFold`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def from_range(self) -> object:
        """
        from_range(self)

        :param self: :class:`PwQPolynomialFold`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_dims(self, type, first, n)

        :param self: :class:`PwQPolynomialFold`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def move_dims(self, dst_type: dim_type, dst_pos: int, src_type: dim_type, src_pos: int, n: int) -> object:
        """
        move_dims(self, dst_type, dst_pos, src_type, src_pos, n)

        :param self: :class:`PwQPolynomialFold`
        :param dst_type: :class:`dim_type`
        :param dst_pos: :class:`unsigned`
        :param src_type: :class:`dim_type`
        :param src_pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_unused_params(self) -> object:
        """
        drop_unused_params(self)

        :param self: :class:`PwQPolynomialFold`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def eval(self, pnt: Point) -> object:
        """
        eval(self, pnt)

        :param self: :class:`PwQPolynomialFold`
        :param pnt: :class:`Point`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_piece(self) -> int:
        """
        n_piece(self)

        :param self: :class:`PwQPolynomialFold`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_piece(self, fn: object) -> stat:
        """
        foreach_piece(self, fn)

        :param self: :class:`PwQPolynomialFold`
        :param fn: callback(set, fold)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def every_piece(self, test: object) -> bool:
        """
        every_piece(self, test)

        :param self: :class:`PwQPolynomialFold`
        :param test: callback(set, fold)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_lifted_piece(self, fn: object) -> stat:
        """
        foreach_lifted_piece(self, fn)

        :param self: :class:`PwQPolynomialFold`
        :param fn: callback(set, fold)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def isa_qpolynomial_fold(self) -> bool:
        """
        isa_qpolynomial_fold(self)

        :param self: :class:`PwQPolynomialFold`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def as_qpolynomial_fold(self) -> object:
        """
        as_qpolynomial_fold(self)

        :param self: :class:`PwQPolynomialFold`
        :return: :class:`QPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`PwQPolynomialFold`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def coalesce(self) -> object:
        """
        coalesce(self)

        :param self: :class:`PwQPolynomialFold`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gist(self, context: Set) -> object:
        """
        gist(self, context)

        :param self: :class:`PwQPolynomialFold`
        :param context: :class:`Set`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gist_params(self, context: Set) -> object:
        """
        gist_params(self, context)

        :param self: :class:`PwQPolynomialFold`
        :param context: :class:`Set`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def max(self) -> object:
        """
        max(self)

        :param self: :class:`PwQPolynomialFold`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def min(self) -> object:
        """
        min(self)

        :param self: :class:`PwQPolynomialFold`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def bound(self) -> object:
        """
        bound(self)

        :param self: :class:`PwQPolynomialFold`
        :return: tuple: (:class:`PwQPolynomialFold`, tight (Bool))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_union_pw_qpolynomial_fold(self) -> object:
        """
        to_union_pw_qpolynomial_fold(self)

        :param self: :class:`PwQPolynomialFold`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`PwQPolynomialFold`
        :return: :class:`PwQPolynomialFoldList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class PwQPolynomialFoldList:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`PwQPolynomialFoldList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_pw_qpolynomial_fold(el: PwQPolynomialFold) -> object:
        """
        from_pw_qpolynomial_fold(el)

        :param el: :class:`PwQPolynomialFold`
        :return: :class:`PwQPolynomialFoldList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`PwQPolynomialFoldList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`PwQPolynomialFoldList`
        :return: :class:`PwQPolynomialFoldList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: PwQPolynomialFold) -> object:
        """
        add(self, el)

        :param self: :class:`PwQPolynomialFoldList`
        :param el: :class:`PwQPolynomialFold`
        :return: :class:`PwQPolynomialFoldList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert(self, pos: int, el: PwQPolynomialFold) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`PwQPolynomialFoldList`
        :param pos: :class:`unsigned`
        :param el: :class:`PwQPolynomialFold`
        :return: :class:`PwQPolynomialFoldList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`PwQPolynomialFoldList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`PwQPolynomialFoldList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`PwQPolynomialFoldList`
        :return: :class:`PwQPolynomialFoldList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`PwQPolynomialFoldList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`PwQPolynomialFoldList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`PwQPolynomialFoldList`
        :return: :class:`PwQPolynomialFoldList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: PwQPolynomialFoldList) -> object:
        """
        concat(self, list2)

        :param self: :class:`PwQPolynomialFoldList`
        :param list2: :class:`PwQPolynomialFoldList`
        :return: :class:`PwQPolynomialFoldList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`PwQPolynomialFoldList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_pw_qpolynomial_fold(self) -> int:
        """
        n_pw_qpolynomial_fold(self)

        :param self: :class:`PwQPolynomialFoldList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`PwQPolynomialFoldList`
        :param index: :class:`int`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_pw_qpolynomial_fold(self, index: int) -> object:
        """
        get_pw_qpolynomial_fold(self, index)

        :param self: :class:`PwQPolynomialFoldList`
        :param index: :class:`int`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: PwQPolynomialFold) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`PwQPolynomialFoldList`
        :param index: :class:`int`
        :param el: :class:`PwQPolynomialFold`
        :return: :class:`PwQPolynomialFoldList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_pw_qpolynomial_fold(self, index: int, el: PwQPolynomialFold) -> object:
        """
        set_pw_qpolynomial_fold(self, index, el)

        :param self: :class:`PwQPolynomialFoldList`
        :param index: :class:`int`
        :param el: :class:`PwQPolynomialFold`
        :return: :class:`PwQPolynomialFoldList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`PwQPolynomialFoldList`
        :param fn: callback(el)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`PwQPolynomialFoldList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`PwQPolynomialFoldList`
        :param fn: callback(el)
        :return: :class:`PwQPolynomialFoldList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`PwQPolynomialFoldList`
        :param cmp: callback(a, b)
        :return: :class:`PwQPolynomialFoldList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`PwQPolynomialFoldList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`PwQPolynomialFoldList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class PwQPolynomialList:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`PwQPolynomialList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_pw_qpolynomial(el: PwQPolynomial) -> object:
        """
        from_pw_qpolynomial(el)

        :param el: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`PwQPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`PwQPolynomialList`
        :return: :class:`PwQPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: PwQPolynomial) -> object:
        """
        add(self, el)

        :param self: :class:`PwQPolynomialList`
        :param el: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert(self, pos: int, el: PwQPolynomial) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`PwQPolynomialList`
        :param pos: :class:`unsigned`
        :param el: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`PwQPolynomialList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`PwQPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`PwQPolynomialList`
        :return: :class:`PwQPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`PwQPolynomialList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`PwQPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`PwQPolynomialList`
        :return: :class:`PwQPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: PwQPolynomialList) -> object:
        """
        concat(self, list2)

        :param self: :class:`PwQPolynomialList`
        :param list2: :class:`PwQPolynomialList`
        :return: :class:`PwQPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`PwQPolynomialList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_pw_qpolynomial(self) -> int:
        """
        n_pw_qpolynomial(self)

        :param self: :class:`PwQPolynomialList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`PwQPolynomialList`
        :param index: :class:`int`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_pw_qpolynomial(self, index: int) -> object:
        """
        get_pw_qpolynomial(self, index)

        :param self: :class:`PwQPolynomialList`
        :param index: :class:`int`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: PwQPolynomial) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`PwQPolynomialList`
        :param index: :class:`int`
        :param el: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_pw_qpolynomial(self, index: int, el: PwQPolynomial) -> object:
        """
        set_pw_qpolynomial(self, index, el)

        :param self: :class:`PwQPolynomialList`
        :param index: :class:`int`
        :param el: :class:`PwQPolynomial`
        :return: :class:`PwQPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`PwQPolynomialList`
        :param fn: callback(el)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`PwQPolynomialList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`PwQPolynomialList`
        :param fn: callback(el)
        :return: :class:`PwQPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`PwQPolynomialList`
        :param cmp: callback(a, b)
        :return: :class:`PwQPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`PwQPolynomialList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`PwQPolynomialList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class QPolynomial:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`QPolynomial`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_domain_space(self) -> object:
        """
        get_domain_space(self)

        :param self: :class:`QPolynomial`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`QPolynomial`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`QPolynomial`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_dims(self, type: dim_type, first: int, n: int) -> bool:
        """
        involves_dims(self, type, first, n)

        :param self: :class:`QPolynomial`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_constant_val(self) -> object:
        """
        get_constant_val(self)

        :param self: :class:`QPolynomial`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_name(self, type: dim_type, pos: int, s: str) -> object:
        """
        set_dim_name(self, type, pos, s)

        :param self: :class:`QPolynomial`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param s: string
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def zero_on_domain(domain: Space) -> object:
        """
        zero_on_domain(domain)

        :param domain: :class:`Space`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def one_on_domain(domain: Space) -> object:
        """
        one_on_domain(domain)

        :param domain: :class:`Space`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def infty_on_domain(domain: Space) -> object:
        """
        infty_on_domain(domain)

        :param domain: :class:`Space`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def neginfty_on_domain(domain: Space) -> object:
        """
        neginfty_on_domain(domain)

        :param domain: :class:`Space`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def nan_on_domain(domain: Space) -> object:
        """
        nan_on_domain(domain)

        :param domain: :class:`Space`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def val_on_domain(space: Space, val: object) -> object:
        """
        val_on_domain(space, val)

        :param space: :class:`Space`
        :param val: :class:`Val`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def var_on_domain(domain: Space, type: dim_type, pos: int) -> object:
        """
        var_on_domain(domain, type, pos)

        :param domain: :class:`Space`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`QPolynomial`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_is_equal(self, qp2: QPolynomial) -> bool:
        """
        plain_is_equal(self, qp2)

        :param self: :class:`QPolynomial`
        :param qp2: :class:`QPolynomial`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_zero(self) -> bool:
        """
        is_zero(self)

        :param self: :class:`QPolynomial`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_nan(self) -> bool:
        """
        is_nan(self)

        :param self: :class:`QPolynomial`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_infty(self) -> bool:
        """
        is_infty(self)

        :param self: :class:`QPolynomial`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_neginfty(self) -> bool:
        """
        is_neginfty(self)

        :param self: :class:`QPolynomial`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sgn(self) -> int:
        """
        sgn(self)

        :param self: :class:`QPolynomial`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`QPolynomial`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, qp2: QPolynomial) -> object:
        """
        add(self, qp2)

        :param self: :class:`QPolynomial`
        :param qp2: :class:`QPolynomial`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sub(self, qp2: QPolynomial) -> object:
        """
        sub(self, qp2)

        :param self: :class:`QPolynomial`
        :param qp2: :class:`QPolynomial`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def mul(self, qp2: QPolynomial) -> object:
        """
        mul(self, qp2)

        :param self: :class:`QPolynomial`
        :param qp2: :class:`QPolynomial`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def pow(self, power: int) -> object:
        """
        pow(self, power)

        :param self: :class:`QPolynomial`
        :param power: :class:`unsigned`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_val(self, v: object) -> object:
        """
        scale_val(self, v)

        :param self: :class:`QPolynomial`
        :param v: :class:`Val`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_down_val(self, v: object) -> object:
        """
        scale_down_val(self, v)

        :param self: :class:`QPolynomial`
        :param v: :class:`Val`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def domain_reverse(self) -> object:
        """
        domain_reverse(self)

        :param self: :class:`QPolynomial`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        insert_dims(self, type, first, n)

        :param self: :class:`QPolynomial`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_dims(self, type: dim_type, n: int) -> object:
        """
        add_dims(self, type, n)

        :param self: :class:`QPolynomial`
        :param type: :class:`dim_type`
        :param n: :class:`unsigned`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def move_dims(self, dst_type: dim_type, dst_pos: int, src_type: dim_type, src_pos: int, n: int) -> object:
        """
        move_dims(self, dst_type, dst_pos, src_type, src_pos, n)

        :param self: :class:`QPolynomial`
        :param dst_type: :class:`dim_type`
        :param dst_pos: :class:`unsigned`
        :param src_type: :class:`dim_type`
        :param src_pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def project_domain_on_params(self) -> object:
        """
        project_domain_on_params(self)

        :param self: :class:`QPolynomial`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_dims(self, type, first, n)

        :param self: :class:`QPolynomial`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def as_polynomial_on_domain(self, bset: BasicSet, fn: object) -> stat:
        """
        as_polynomial_on_domain(self, bset, fn)

        :param self: :class:`QPolynomial`
        :param bset: :class:`BasicSet`
        :param fn: callback(bset, poly)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def homogenize(self) -> object:
        """
        homogenize(self)

        :param self: :class:`QPolynomial`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`QPolynomial`
        :param model: :class:`Space`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_term(self, fn: object) -> stat:
        """
        foreach_term(self, fn)

        :param self: :class:`QPolynomial`
        :param fn: callback(term)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def eval(self, pnt: Point) -> object:
        """
        eval(self, pnt)

        :param self: :class:`QPolynomial`
        :param pnt: :class:`Point`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gist_params(self, context: Set) -> object:
        """
        gist_params(self, context)

        :param self: :class:`QPolynomial`
        :param context: :class:`Set`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gist(self, context: Set) -> object:
        """
        gist(self, context)

        :param self: :class:`QPolynomial`
        :param context: :class:`Set`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_constraint(c: Constraint, type: dim_type, pos: int) -> object:
        """
        from_constraint(c, type, pos)

        :param c: :class:`Constraint`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_term(term: Term) -> object:
        """
        from_term(term)

        :param term: :class:`Term`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_aff(aff: Aff) -> object:
        """
        from_aff(aff)

        :param aff: :class:`Aff`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def isa_aff(self) -> bool:
        """
        isa_aff(self)

        :param self: :class:`QPolynomial`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def as_aff(self) -> object:
        """
        as_aff(self)

        :param self: :class:`QPolynomial`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`QPolynomial`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`QPolynomial`
        :return: :class:`QPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class QPolynomialFold:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`QPolynomialFold`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_type(self) -> fold:
        """
        get_type(self)

        :param self: :class:`QPolynomialFold`
        :return: isl_fold 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def empty(type: fold, space: Space) -> object:
        """
        empty(type, space)

        :param type: :class:`fold`
        :param space: :class:`Space`
        :return: :class:`QPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(type: fold, qp: QPolynomial) -> object:
        """
        alloc(type, qp)

        :param type: :class:`fold`
        :param qp: :class:`QPolynomial`
        :return: :class:`QPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`QPolynomialFold`
        :return: :class:`QPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_empty(self) -> bool:
        """
        is_empty(self)

        :param self: :class:`QPolynomialFold`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_nan(self) -> bool:
        """
        is_nan(self)

        :param self: :class:`QPolynomialFold`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_is_equal(self, fold2: QPolynomialFold) -> bool:
        """
        plain_is_equal(self, fold2)

        :param self: :class:`QPolynomialFold`
        :param fold2: :class:`QPolynomialFold`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_domain_space(self) -> object:
        """
        get_domain_space(self)

        :param self: :class:`QPolynomialFold`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`QPolynomialFold`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def fold(self, fold2: QPolynomialFold) -> object:
        """
        fold(self, fold2)

        :param self: :class:`QPolynomialFold`
        :param fold2: :class:`QPolynomialFold`
        :return: :class:`QPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_val(self, v: object) -> object:
        """
        scale_val(self, v)

        :param self: :class:`QPolynomialFold`
        :param v: :class:`Val`
        :return: :class:`QPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_down_val(self, v: object) -> object:
        """
        scale_down_val(self, v)

        :param self: :class:`QPolynomialFold`
        :param v: :class:`Val`
        :return: :class:`QPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def move_dims(self, dst_type: dim_type, dst_pos: int, src_type: dim_type, src_pos: int, n: int) -> object:
        """
        move_dims(self, dst_type, dst_pos, src_type, src_pos, n)

        :param self: :class:`QPolynomialFold`
        :param dst_type: :class:`dim_type`
        :param dst_pos: :class:`unsigned`
        :param src_type: :class:`dim_type`
        :param src_pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`QPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def eval(self, pnt: Point) -> object:
        """
        eval(self, pnt)

        :param self: :class:`QPolynomialFold`
        :param pnt: :class:`Point`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gist_params(self, context: Set) -> object:
        """
        gist_params(self, context)

        :param self: :class:`QPolynomialFold`
        :param context: :class:`Set`
        :return: :class:`QPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gist(self, context: Set) -> object:
        """
        gist(self, context)

        :param self: :class:`QPolynomialFold`
        :param context: :class:`Set`
        :return: :class:`QPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_qpolynomial(self, fn: object) -> stat:
        """
        foreach_qpolynomial(self, fn)

        :param self: :class:`QPolynomialFold`
        :param fn: callback(qp)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`QPolynomialFold`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class QPolynomialList:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`QPolynomialList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_qpolynomial(el: QPolynomial) -> object:
        """
        from_qpolynomial(el)

        :param el: :class:`QPolynomial`
        :return: :class:`QPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`QPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`QPolynomialList`
        :return: :class:`QPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: QPolynomial) -> object:
        """
        add(self, el)

        :param self: :class:`QPolynomialList`
        :param el: :class:`QPolynomial`
        :return: :class:`QPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert(self, pos: int, el: QPolynomial) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`QPolynomialList`
        :param pos: :class:`unsigned`
        :param el: :class:`QPolynomial`
        :return: :class:`QPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`QPolynomialList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`QPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`QPolynomialList`
        :return: :class:`QPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`QPolynomialList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`QPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`QPolynomialList`
        :return: :class:`QPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: QPolynomialList) -> object:
        """
        concat(self, list2)

        :param self: :class:`QPolynomialList`
        :param list2: :class:`QPolynomialList`
        :return: :class:`QPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`QPolynomialList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_qpolynomial(self) -> int:
        """
        n_qpolynomial(self)

        :param self: :class:`QPolynomialList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`QPolynomialList`
        :param index: :class:`int`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_qpolynomial(self, index: int) -> object:
        """
        get_qpolynomial(self, index)

        :param self: :class:`QPolynomialList`
        :param index: :class:`int`
        :return: :class:`QPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: QPolynomial) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`QPolynomialList`
        :param index: :class:`int`
        :param el: :class:`QPolynomial`
        :return: :class:`QPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_qpolynomial(self, index: int, el: QPolynomial) -> object:
        """
        set_qpolynomial(self, index, el)

        :param self: :class:`QPolynomialList`
        :param index: :class:`int`
        :param el: :class:`QPolynomial`
        :return: :class:`QPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`QPolynomialList`
        :param fn: callback(el)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`QPolynomialList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`QPolynomialList`
        :param fn: callback(el)
        :return: :class:`QPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`QPolynomialList`
        :param cmp: callback(a, b)
        :return: :class:`QPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`QPolynomialList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`QPolynomialList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Restriction:
    @staticmethod
    def empty(source_map: Map) -> object:
        """
        empty(source_map)

        :param source_map: :class:`Map`
        :return: :class:`Restriction`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def none(source_map: Map) -> object:
        """
        none(source_map)

        :param source_map: :class:`Map`
        :return: :class:`Restriction`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def input(source_restr: Set, sink_restr: Set) -> object:
        """
        input(source_restr, sink_restr)

        :param source_restr: :class:`Set`
        :param sink_restr: :class:`Set`
        :return: :class:`Restriction`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def output(source_restr: Set) -> object:
        """
        output(source_restr)

        :param source_restr: :class:`Set`
        :return: :class:`Restriction`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Restriction`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Schedule:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    @staticmethod
    def empty(space: Space) -> object:
        """
        empty(space)

        :param space: :class:`Space`
        :return: :class:`Schedule`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_domain(domain: UnionSet) -> object:
        """
        from_domain(domain)

        :param domain: :class:`UnionSet`
        :return: :class:`Schedule`
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`Schedule`
        :return: :class:`Schedule`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_map(self) -> object:
        """
        get_map(self)

        :param self: :class:`Schedule`
        :return: :class:`UnionMap`
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Schedule`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_is_equal(self, schedule2: Schedule) -> bool:
        """
        plain_is_equal(self, schedule2)

        :param self: :class:`Schedule`
        :param schedule2: :class:`Schedule`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_root(self) -> object:
        """
        get_root(self)

        :param self: :class:`Schedule`
        :return: :class:`ScheduleNode`
        """

    def get_domain(self) -> object:
        """
        get_domain(self)

        :param self: :class:`Schedule`
        :return: :class:`UnionSet`
        """

    def foreach_schedule_node_top_down(self, fn: object) -> stat:
        """
        foreach_schedule_node_top_down(self, fn)

        :param self: :class:`Schedule`
        :param fn: callback(node)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map_schedule_node_bottom_up(self, fn: object) -> object:
        """
        map_schedule_node_bottom_up(self, fn)

        :param self: :class:`Schedule`
        :param fn: callback(node)
        :return: :class:`Schedule`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_context(self, context: Set) -> object:
        """
        insert_context(self, context)

        :param self: :class:`Schedule`
        :param context: :class:`Set`
        :return: :class:`Schedule`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_partial_schedule(self, partial: MultiUnionPwAff) -> object:
        """
        insert_partial_schedule(self, partial)

        :param self: :class:`Schedule`
        :param partial: :class:`MultiUnionPwAff`
        :return: :class:`Schedule`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_guard(self, guard: Set) -> object:
        """
        insert_guard(self, guard)

        :param self: :class:`Schedule`
        :param guard: :class:`Set`
        :return: :class:`Schedule`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sequence(self, schedule2: Schedule) -> object:
        """
        sequence(self, schedule2)

        :param self: :class:`Schedule`
        :param schedule2: :class:`Schedule`
        :return: :class:`Schedule`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set(self, schedule2: Schedule) -> object:
        """
        set(self, schedule2)

        :param self: :class:`Schedule`
        :param schedule2: :class:`Schedule`
        :return: :class:`Schedule`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain(self, domain: UnionSet) -> object:
        """
        intersect_domain(self, domain)

        :param self: :class:`Schedule`
        :param domain: :class:`UnionSet`
        :return: :class:`Schedule`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gist_domain_params(self, context: Set) -> object:
        """
        gist_domain_params(self, context)

        :param self: :class:`Schedule`
        :param context: :class:`Set`
        :return: :class:`Schedule`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`Schedule`
        :return: :class:`Schedule`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def align_params(self, space: Space) -> object:
        """
        align_params(self, space)

        :param self: :class:`Schedule`
        :param space: :class:`Space`
        :return: :class:`Schedule`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def pullback_union_pw_multi_aff(self, upma: UnionPwMultiAff) -> object:
        """
        pullback_union_pw_multi_aff(self, upma)

        :param self: :class:`Schedule`
        :param upma: :class:`UnionPwMultiAff`
        :return: :class:`Schedule`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def expand(self, contraction: UnionPwMultiAff, expansion: Schedule) -> object:
        """
        expand(self, contraction, expansion)

        :param self: :class:`Schedule`
        :param contraction: :class:`UnionPwMultiAff`
        :param expansion: :class:`Schedule`
        :return: :class:`Schedule`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`Schedule`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`Schedule`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`Schedule`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class ScheduleConstraints:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`ScheduleConstraints`
        :return: :class:`ScheduleConstraints`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def on_domain(domain: UnionSet) -> object:
        """
        on_domain(domain)

        :param domain: :class:`UnionSet`
        :return: :class:`ScheduleConstraints`
        """

    def set_context(self, context: Set) -> object:
        """
        set_context(self, context)

        :param self: :class:`ScheduleConstraints`
        :param context: :class:`Set`
        :return: :class:`ScheduleConstraints`
        """

    def set_validity(self, validity: UnionMap) -> object:
        """
        set_validity(self, validity)

        :param self: :class:`ScheduleConstraints`
        :param validity: :class:`UnionMap`
        :return: :class:`ScheduleConstraints`
        """

    def set_coincidence(self, coincidence: UnionMap) -> object:
        """
        set_coincidence(self, coincidence)

        :param self: :class:`ScheduleConstraints`
        :param coincidence: :class:`UnionMap`
        :return: :class:`ScheduleConstraints`
        """

    def set_proximity(self, proximity: UnionMap) -> object:
        """
        set_proximity(self, proximity)

        :param self: :class:`ScheduleConstraints`
        :param proximity: :class:`UnionMap`
        :return: :class:`ScheduleConstraints`
        """

    def set_conditional_validity(self, condition: UnionMap, validity: UnionMap) -> object:
        """
        set_conditional_validity(self, condition, validity)

        :param self: :class:`ScheduleConstraints`
        :param condition: :class:`UnionMap`
        :param validity: :class:`UnionMap`
        :return: :class:`ScheduleConstraints`
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`ScheduleConstraints`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_domain(self) -> object:
        """
        get_domain(self)

        :param self: :class:`ScheduleConstraints`
        :return: :class:`UnionSet`
        """

    def get_context(self) -> object:
        """
        get_context(self)

        :param self: :class:`ScheduleConstraints`
        :return: :class:`Set`
        """

    def get_validity(self) -> object:
        """
        get_validity(self)

        :param self: :class:`ScheduleConstraints`
        :return: :class:`UnionMap`
        """

    def get_coincidence(self) -> object:
        """
        get_coincidence(self)

        :param self: :class:`ScheduleConstraints`
        :return: :class:`UnionMap`
        """

    def get_proximity(self) -> object:
        """
        get_proximity(self)

        :param self: :class:`ScheduleConstraints`
        :return: :class:`UnionMap`
        """

    def get_conditional_validity(self) -> object:
        """
        get_conditional_validity(self)

        :param self: :class:`ScheduleConstraints`
        :return: :class:`UnionMap`
        """

    def get_conditional_validity_condition(self) -> object:
        """
        get_conditional_validity_condition(self)

        :param self: :class:`ScheduleConstraints`
        :return: :class:`UnionMap`
        """

    def apply(self, umap: UnionMap) -> object:
        """
        apply(self, umap)

        :param self: :class:`ScheduleConstraints`
        :param umap: :class:`UnionMap`
        :return: :class:`ScheduleConstraints`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`ScheduleConstraints`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`ScheduleConstraints`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`ScheduleConstraints`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def compute_schedule(self) -> object:
        """
        compute_schedule(self)

        :param self: :class:`ScheduleConstraints`
        :return: :class:`Schedule`
        """

class ScheduleNode:
    @staticmethod
    def from_domain(domain: UnionSet) -> object:
        """
        from_domain(domain)

        :param domain: :class:`UnionSet`
        :return: :class:`ScheduleNode`
        """

    @staticmethod
    def from_extension(extension: UnionMap) -> object:
        """
        from_extension(extension)

        :param extension: :class:`UnionMap`
        :return: :class:`ScheduleNode`
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`ScheduleNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_equal(self, node2: ScheduleNode) -> bool:
        """
        is_equal(self, node2)

        :param self: :class:`ScheduleNode`
        :param node2: :class:`ScheduleNode`
        :return: bool
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_type(self) -> schedule_node_type:
        """
        get_type(self)

        :param self: :class:`ScheduleNode`
        :return: isl_schedule_node_type 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_parent_type(self) -> schedule_node_type:
        """
        get_parent_type(self)

        :param self: :class:`ScheduleNode`
        :return: isl_schedule_node_type 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_schedule(self) -> object:
        """
        get_schedule(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`Schedule`
        """

    def foreach_descendant_top_down(self, fn: object) -> stat:
        """
        foreach_descendant_top_down(self, fn)

        :param self: :class:`ScheduleNode`
        :param fn: callback(node)
        :return: isl_stat
        """

    def every_descendant(self, test: object) -> bool:
        """
        every_descendant(self, test)

        :param self: :class:`ScheduleNode`
        :param test: callback(node)
        :return: bool
        """

    def foreach_ancestor_top_down(self, fn: object) -> stat:
        """
        foreach_ancestor_top_down(self, fn)

        :param self: :class:`ScheduleNode`
        :param fn: callback(node)
        :return: isl_stat
        """

    def map_descendant_bottom_up(self, fn: object) -> object:
        """
        map_descendant_bottom_up(self, fn)

        :param self: :class:`ScheduleNode`
        :param fn: callback(node)
        :return: :class:`ScheduleNode`
        """

    def get_tree_depth(self) -> int:
        """
        get_tree_depth(self)

        :param self: :class:`ScheduleNode`
        :return: isl_size
        """

    def has_parent(self) -> bool:
        """
        has_parent(self)

        :param self: :class:`ScheduleNode`
        :return: bool
        """

    def has_children(self) -> bool:
        """
        has_children(self)

        :param self: :class:`ScheduleNode`
        :return: bool
        """

    def has_previous_sibling(self) -> bool:
        """
        has_previous_sibling(self)

        :param self: :class:`ScheduleNode`
        :return: bool
        """

    def has_next_sibling(self) -> bool:
        """
        has_next_sibling(self)

        :param self: :class:`ScheduleNode`
        :return: bool
        """

    def n_children(self) -> int:
        """
        n_children(self)

        :param self: :class:`ScheduleNode`
        :return: isl_size
        """

    def get_child_position(self) -> int:
        """
        get_child_position(self)

        :param self: :class:`ScheduleNode`
        :return: isl_size
        """

    def get_ancestor_child_position(self, ancestor: ScheduleNode) -> int:
        """
        get_ancestor_child_position(self, ancestor)

        :param self: :class:`ScheduleNode`
        :param ancestor: :class:`ScheduleNode`
        :return: isl_size
        """

    def get_child(self, pos: int) -> object:
        """
        get_child(self, pos)

        :param self: :class:`ScheduleNode`
        :param pos: :class:`int`
        :return: :class:`ScheduleNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_shared_ancestor(self, node2: ScheduleNode) -> object:
        """
        get_shared_ancestor(self, node2)

        :param self: :class:`ScheduleNode`
        :param node2: :class:`ScheduleNode`
        :return: :class:`ScheduleNode`
        """

    def root(self) -> object:
        """
        root(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`ScheduleNode`
        """

    def parent(self) -> object:
        """
        parent(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`ScheduleNode`
        """

    def grandparent(self) -> object:
        """
        grandparent(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`ScheduleNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def ancestor(self, generation: int) -> object:
        """
        ancestor(self, generation)

        :param self: :class:`ScheduleNode`
        :param generation: :class:`int`
        :return: :class:`ScheduleNode`
        """

    def child(self, pos: int) -> object:
        """
        child(self, pos)

        :param self: :class:`ScheduleNode`
        :param pos: :class:`int`
        :return: :class:`ScheduleNode`
        """

    def grandchild(self, pos1: int, pos2: int) -> object:
        """
        grandchild(self, pos1, pos2)

        :param self: :class:`ScheduleNode`
        :param pos1: :class:`int`
        :param pos2: :class:`int`
        :return: :class:`ScheduleNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def first_child(self) -> object:
        """
        first_child(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`ScheduleNode`
        """

    def previous_sibling(self) -> object:
        """
        previous_sibling(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`ScheduleNode`
        """

    def next_sibling(self) -> object:
        """
        next_sibling(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`ScheduleNode`
        """

    def is_subtree_anchored(self) -> bool:
        """
        is_subtree_anchored(self)

        :param self: :class:`ScheduleNode`
        :return: bool
        """

    def group(self, group_id: Id) -> object:
        """
        group(self, group_id)

        :param self: :class:`ScheduleNode`
        :param group_id: :class:`Id`
        :return: :class:`ScheduleNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sequence_splice_child(self, pos: int) -> object:
        """
        sequence_splice_child(self, pos)

        :param self: :class:`ScheduleNode`
        :param pos: :class:`int`
        :return: :class:`ScheduleNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sequence_splice_children(self) -> object:
        """
        sequence_splice_children(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`ScheduleNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def band_get_space(self) -> object:
        """
        band_get_space(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def band_get_partial_schedule(self) -> object:
        """
        band_get_partial_schedule(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`MultiUnionPwAff`
        """

    def band_get_partial_schedule_union_map(self) -> object:
        """
        band_get_partial_schedule_union_map(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def band_member_get_ast_loop_type(self, pos: int) -> ast_loop_type:
        """
        band_member_get_ast_loop_type(self, pos)

        :param self: :class:`ScheduleNode`
        :param pos: :class:`int`
        :return: isl_ast_loop_type 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def band_member_set_ast_loop_type(self, pos: int, type: ast_loop_type) -> object:
        """
        band_member_set_ast_loop_type(self, pos, type)

        :param self: :class:`ScheduleNode`
        :param pos: :class:`int`
        :param type: :class:`ast_loop_type`
        :return: :class:`ScheduleNode`
        """

    def band_member_get_isolate_ast_loop_type(self, pos: int) -> ast_loop_type:
        """
        band_member_get_isolate_ast_loop_type(self, pos)

        :param self: :class:`ScheduleNode`
        :param pos: :class:`int`
        :return: isl_ast_loop_type 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def band_member_set_isolate_ast_loop_type(self, pos: int, type: ast_loop_type) -> object:
        """
        band_member_set_isolate_ast_loop_type(self, pos, type)

        :param self: :class:`ScheduleNode`
        :param pos: :class:`int`
        :param type: :class:`ast_loop_type`
        :return: :class:`ScheduleNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def band_get_ast_build_options(self) -> object:
        """
        band_get_ast_build_options(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`UnionSet`
        """

    def band_set_ast_build_options(self, options: UnionSet) -> object:
        """
        band_set_ast_build_options(self, options)

        :param self: :class:`ScheduleNode`
        :param options: :class:`UnionSet`
        :return: :class:`ScheduleNode`
        """

    def band_get_ast_isolate_option(self) -> object:
        """
        band_get_ast_isolate_option(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`Set`
        """

    def band_n_member(self) -> int:
        """
        band_n_member(self)

        :param self: :class:`ScheduleNode`
        :return: isl_size
        """

    def band_member_get_coincident(self, pos: int) -> bool:
        """
        band_member_get_coincident(self, pos)

        :param self: :class:`ScheduleNode`
        :param pos: :class:`int`
        :return: bool
        """

    def band_member_set_coincident(self, pos: int, coincident: int) -> object:
        """
        band_member_set_coincident(self, pos, coincident)

        :param self: :class:`ScheduleNode`
        :param pos: :class:`int`
        :param coincident: :class:`int`
        :return: :class:`ScheduleNode`
        """

    def band_get_permutable(self) -> bool:
        """
        band_get_permutable(self)

        :param self: :class:`ScheduleNode`
        :return: bool
        """

    def band_set_permutable(self, permutable: int) -> object:
        """
        band_set_permutable(self, permutable)

        :param self: :class:`ScheduleNode`
        :param permutable: :class:`int`
        :return: :class:`ScheduleNode`
        """

    def band_scale(self, mv: MultiVal) -> object:
        """
        band_scale(self, mv)

        :param self: :class:`ScheduleNode`
        :param mv: :class:`MultiVal`
        :return: :class:`ScheduleNode`
        """

    def band_scale_down(self, mv: MultiVal) -> object:
        """
        band_scale_down(self, mv)

        :param self: :class:`ScheduleNode`
        :param mv: :class:`MultiVal`
        :return: :class:`ScheduleNode`
        """

    def band_mod(self, mv: MultiVal) -> object:
        """
        band_mod(self, mv)

        :param self: :class:`ScheduleNode`
        :param mv: :class:`MultiVal`
        :return: :class:`ScheduleNode`
        """

    def band_shift(self, shift: MultiUnionPwAff) -> object:
        """
        band_shift(self, shift)

        :param self: :class:`ScheduleNode`
        :param shift: :class:`MultiUnionPwAff`
        :return: :class:`ScheduleNode`
        """

    def band_tile(self, sizes: MultiVal) -> object:
        """
        band_tile(self, sizes)

        :param self: :class:`ScheduleNode`
        :param sizes: :class:`MultiVal`
        :return: :class:`ScheduleNode`
        """

    def band_sink(self) -> object:
        """
        band_sink(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`ScheduleNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def band_split(self, pos: int) -> object:
        """
        band_split(self, pos)

        :param self: :class:`ScheduleNode`
        :param pos: :class:`int`
        :return: :class:`ScheduleNode`
        """

    def context_get_context(self) -> object:
        """
        context_get_context(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`Set`
        """

    def domain_get_domain(self) -> object:
        """
        domain_get_domain(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`UnionSet`
        """

    def expansion_get_expansion(self) -> object:
        """
        expansion_get_expansion(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`UnionMap`
        """

    def expansion_get_contraction(self) -> object:
        """
        expansion_get_contraction(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`UnionPwMultiAff`
        """

    def extension_get_extension(self) -> object:
        """
        extension_get_extension(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`UnionMap`
        """

    def filter_get_filter(self) -> object:
        """
        filter_get_filter(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`UnionSet`
        """

    def guard_get_guard(self) -> object:
        """
        guard_get_guard(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`Set`
        """

    def mark_get_id(self) -> object:
        """
        mark_get_id(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_schedule_depth(self) -> int:
        """
        get_schedule_depth(self)

        :param self: :class:`ScheduleNode`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_domain(self) -> object:
        """
        get_domain(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_universe_domain(self) -> object:
        """
        get_universe_domain(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_prefix_schedule_multi_union_pw_aff(self) -> object:
        """
        get_prefix_schedule_multi_union_pw_aff(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`MultiUnionPwAff`
        """

    def get_prefix_schedule_union_pw_multi_aff(self) -> object:
        """
        get_prefix_schedule_union_pw_multi_aff(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`UnionPwMultiAff`
        """

    def get_prefix_schedule_union_map(self) -> object:
        """
        get_prefix_schedule_union_map(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`UnionMap`
        """

    def get_prefix_schedule_relation(self) -> object:
        """
        get_prefix_schedule_relation(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_subtree_schedule_union_map(self) -> object:
        """
        get_subtree_schedule_union_map(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_subtree_expansion(self) -> object:
        """
        get_subtree_expansion(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_subtree_contraction(self) -> object:
        """
        get_subtree_contraction(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_context(self, context: Set) -> object:
        """
        insert_context(self, context)

        :param self: :class:`ScheduleNode`
        :param context: :class:`Set`
        :return: :class:`ScheduleNode`
        """

    def insert_partial_schedule(self, schedule: MultiUnionPwAff) -> object:
        """
        insert_partial_schedule(self, schedule)

        :param self: :class:`ScheduleNode`
        :param schedule: :class:`MultiUnionPwAff`
        :return: :class:`ScheduleNode`
        """

    def insert_filter(self, filter: UnionSet) -> object:
        """
        insert_filter(self, filter)

        :param self: :class:`ScheduleNode`
        :param filter: :class:`UnionSet`
        :return: :class:`ScheduleNode`
        """

    def insert_guard(self, context: Set) -> object:
        """
        insert_guard(self, context)

        :param self: :class:`ScheduleNode`
        :param context: :class:`Set`
        :return: :class:`ScheduleNode`
        """

    def insert_mark(self, mark: Id) -> object:
        """
        insert_mark(self, mark)

        :param self: :class:`ScheduleNode`
        :param mark: :class:`Id`
        :return: :class:`ScheduleNode`
        """

    def insert_sequence(self, filters: UnionSetList) -> object:
        """
        insert_sequence(self, filters)

        :param self: :class:`ScheduleNode`
        :param filters: :class:`UnionSetList`
        :return: :class:`ScheduleNode`
        """

    def insert_set(self, filters: UnionSetList) -> object:
        """
        insert_set(self, filters)

        :param self: :class:`ScheduleNode`
        :param filters: :class:`UnionSetList`
        :return: :class:`ScheduleNode`
        """

    def cut(self) -> object:
        """
        cut(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`ScheduleNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def delete(self) -> object:
        """
        delete(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`ScheduleNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def order_before(self, filter: UnionSet) -> object:
        """
        order_before(self, filter)

        :param self: :class:`ScheduleNode`
        :param filter: :class:`UnionSet`
        :return: :class:`ScheduleNode`
        """

    def order_after(self, filter: UnionSet) -> object:
        """
        order_after(self, filter)

        :param self: :class:`ScheduleNode`
        :param filter: :class:`UnionSet`
        :return: :class:`ScheduleNode`
        """

    def graft_before(self, graft: ScheduleNode) -> object:
        """
        graft_before(self, graft)

        :param self: :class:`ScheduleNode`
        :param graft: :class:`ScheduleNode`
        :return: :class:`ScheduleNode`
        """

    def graft_after(self, graft: ScheduleNode) -> object:
        """
        graft_after(self, graft)

        :param self: :class:`ScheduleNode`
        :param graft: :class:`ScheduleNode`
        :return: :class:`ScheduleNode`
        """

    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`ScheduleNode`
        :return: :class:`ScheduleNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def align_params(self, space: Space) -> object:
        """
        align_params(self, space)

        :param self: :class:`ScheduleNode`
        :param space: :class:`Space`
        :return: :class:`ScheduleNode`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`ScheduleNode`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`ScheduleNode`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Set:
    @overload
    def __init__(self, arg: BasicSet, /) -> None: ...

    @overload
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def n_dim(self) -> int:
        """
        n_dim(self)

        :param self: :class:`Set`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_param(self) -> int:
        """
        n_param(self)

        :param self: :class:`Set`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def tuple_dim(self) -> int:
        """
        tuple_dim(self)

        :param self: :class:`Set`
        :return: isl_size
        """

    @overload
    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dim(self, arg: dim_type, /) -> int:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Set`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_ctx(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`Set`
        :return: :class:`Space`
        """

    @overload
    def get_space(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def reset_space(self, space: Space) -> object:
        """
        reset_space(self, space)

        :param self: :class:`Set`
        :param space: :class:`Space`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_tuple_name(self) -> bool:
        """
        has_tuple_name(self)

        :param self: :class:`Set`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_tuple_name(self) -> object:
        """
        get_tuple_name(self)

        :param self: :class:`Set`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_tuple_name(self, s: str) -> object:
        """
        set_tuple_name(self, s)

        :param self: :class:`Set`
        :param s: string
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_dim_name(self, type: dim_type, pos: int) -> bool:
        """
        has_dim_name(self, type, pos)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_dim_name(self, type: dim_type, pos: int) -> object:
        """
        get_dim_name(self, type, pos)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_name(self, type: dim_type, pos: int, s: str) -> object:
        """
        set_dim_name(self, type, pos, s)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param s: string
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_id(self, type: dim_type, pos: int, id: Id) -> object:
        """
        set_dim_id(self, type, pos, id)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param id: :class:`Id`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_dim_id(self, type: dim_type, pos: int) -> bool:
        """
        has_dim_id(self, type, pos)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_dim_id(self, type: dim_type, pos: int) -> object:
        """
        get_dim_id(self, type, pos)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_tuple_id(self, id: Id) -> object:
        """
        set_tuple_id(self, id)

        :param self: :class:`Set`
        :param id: :class:`Id`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_tuple_id(self) -> object:
        """
        reset_tuple_id(self)

        :param self: :class:`Set`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_tuple_id(self) -> bool:
        """
        has_tuple_id(self)

        :param self: :class:`Set`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_tuple_id(self) -> object:
        """
        get_tuple_id(self)

        :param self: :class:`Set`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`Set`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def reset_user(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def find_dim_by_id(self, type: dim_type, id: Id) -> int:
        """
        find_dim_by_id(self, type, id)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def remove_redundancies(self) -> object:
        """
        remove_redundancies(self)

        :param self: :class:`Set`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def remove_redundancies(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`Set`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dump(self) -> None:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def lower_bound_val(self, type: dim_type, pos: int, value: object) -> object:
        """
        lower_bound_val(self, type, pos, value)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param value: :class:`Val`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def upper_bound_val(self, type: dim_type, pos: int, value: object) -> object:
        """
        upper_bound_val(self, type, pos, value)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param value: :class:`Val`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lower_bound_multi_val(self, lower: MultiVal) -> object:
        """
        lower_bound_multi_val(self, lower)

        :param self: :class:`Set`
        :param lower: :class:`MultiVal`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def upper_bound_multi_val(self, upper: MultiVal) -> object:
        """
        upper_bound_multi_val(self, upper)

        :param self: :class:`Set`
        :param upper: :class:`MultiVal`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lower_bound_multi_pw_aff(self, lower: MultiPwAff) -> object:
        """
        lower_bound_multi_pw_aff(self, lower)

        :param self: :class:`Set`
        :param lower: :class:`MultiPwAff`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def upper_bound_multi_pw_aff(self, upper: MultiPwAff) -> object:
        """
        upper_bound_multi_pw_aff(self, upper)

        :param self: :class:`Set`
        :param upper: :class:`MultiPwAff`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def equate(self, type1: dim_type, pos1: int, type2: dim_type, pos2: int) -> object:
        """
        equate(self, type1, pos1, type2, pos2)

        :param self: :class:`Set`
        :param type1: :class:`dim_type`
        :param pos1: :class:`int`
        :param type2: :class:`dim_type`
        :param pos2: :class:`int`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def partial_lexmin(self, dom: Set) -> object:
        """
        partial_lexmin(self, dom)

        :param self: :class:`Set`
        :param dom: :class:`Set`
        :return: tuple: (:class:`Set`, empty (:class:`Set`))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def partial_lexmax(self, dom: Set) -> object:
        """
        partial_lexmax(self, dom)

        :param self: :class:`Set`
        :param dom: :class:`Set`
        :return: tuple: (:class:`Set`, empty (:class:`Set`))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def lexmin(self) -> object:
        """
        lexmin(self)

        :param self: :class:`Set`
        :return: :class:`Set`
        """

    @overload
    def lexmin(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def lexmax(self) -> object:
        """
        lexmax(self)

        :param self: :class:`Set`
        :return: :class:`Set`
        """

    @overload
    def lexmax(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def lexmin_pw_multi_aff(self) -> object:
        """
        lexmin_pw_multi_aff(self)

        :param self: :class:`Set`
        :return: :class:`PwMultiAff`
        """

    def lexmax_pw_multi_aff(self) -> object:
        """
        lexmax_pw_multi_aff(self)

        :param self: :class:`Set`
        :return: :class:`PwMultiAff`
        """

    def min_multi_pw_aff(self) -> object:
        """
        min_multi_pw_aff(self)

        :param self: :class:`Set`
        :return: :class:`MultiPwAff`
        """

    def max_multi_pw_aff(self) -> object:
        """
        max_multi_pw_aff(self)

        :param self: :class:`Set`
        :return: :class:`MultiPwAff`
        """

    def follows_at(self, set2: Set, pos: int) -> int:
        """
        follows_at(self, set2, pos)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :param pos: :class:`int`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def params(self) -> object:
        """
        params(self)

        :param self: :class:`Set`
        :return: :class:`Set`
        """

    @overload
    def params(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def from_params(self) -> object:
        """
        from_params(self)

        :param self: :class:`Set`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def bind(self, tuple: MultiId) -> object:
        """
        bind(self, tuple)

        :param self: :class:`Set`
        :param tuple: :class:`MultiId`
        :return: :class:`Set`
        """

    def unbind_params(self, tuple: MultiId) -> object:
        """
        unbind_params(self, tuple)

        :param self: :class:`Set`
        :param tuple: :class:`MultiId`
        :return: :class:`Set`
        """

    def unbind_params_insert_domain(self, domain: MultiId) -> object:
        """
        unbind_params_insert_domain(self, domain)

        :param self: :class:`Set`
        :param domain: :class:`MultiId`
        :return: :class:`Map`
        """

    @staticmethod
    def empty(space: Space) -> object:
        """
        empty(space)

        :param space: :class:`Space`
        :return: :class:`Set`
        """

    @staticmethod
    def universe(space: Space) -> object:
        """
        universe(space)

        :param space: :class:`Space`
        :return: :class:`Set`
        """

    @staticmethod
    def nat_universe(space: Space) -> object:
        """
        nat_universe(space)

        :param space: :class:`Space`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`Set`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def copy(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @staticmethod
    def from_basic_set(bset: BasicSet) -> object:
        """
        from_basic_set(bset)

        :param bset: :class:`BasicSet`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def sample(self) -> object:
        """
        sample(self)

        :param self: :class:`Set`
        :return: :class:`BasicSet`
        """

    @overload
    def sample(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def sample_point(self) -> object:
        """
        sample_point(self)

        :param self: :class:`Set`
        :return: :class:`Point`
        """

    @overload
    def sample_point(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def detect_equalities(self) -> object:
        """
        detect_equalities(self)

        :param self: :class:`Set`
        :return: :class:`Set`
        """

    @overload
    def detect_equalities(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def affine_hull(self) -> object:
        """
        affine_hull(self)

        :param self: :class:`Set`
        :return: :class:`BasicSet`
        """

    @overload
    def affine_hull(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def convex_hull(self) -> object:
        """
        convex_hull(self)

        :param self: :class:`Set`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def polyhedral_hull(self) -> object:
        """
        polyhedral_hull(self)

        :param self: :class:`Set`
        :return: :class:`BasicSet`
        """

    @overload
    def polyhedral_hull(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def simple_hull(self) -> object:
        """
        simple_hull(self)

        :param self: :class:`Set`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def simple_hull(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def unshifted_simple_hull(self) -> object:
        """
        unshifted_simple_hull(self)

        :param self: :class:`Set`
        :return: :class:`BasicSet`
        """

    def plain_unshifted_simple_hull(self) -> object:
        """
        plain_unshifted_simple_hull(self)

        :param self: :class:`Set`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def unshifted_simple_hull_from_set_list(self, list: SetList) -> object:
        """
        unshifted_simple_hull_from_set_list(self, list)

        :param self: :class:`Set`
        :param list: :class:`SetList`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def bounded_simple_hull(self) -> object:
        """
        bounded_simple_hull(self)

        :param self: :class:`Set`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def wrapped_reverse(self) -> object:
        """
        wrapped_reverse(self)

        :param self: :class:`Set`
        :return: :class:`Set`
        """

    def union_disjoint(self, set2: Set) -> object:
        """
        union_disjoint(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def union(self, set2: Set) -> object:
        """
        union(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: :class:`Set`
        """

    @overload
    def union(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def product(self, set2: Set) -> object:
        """
        product(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: :class:`Set`
        """

    @overload
    def product(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def flat_product(self, set2: Set) -> object:
        """
        flat_product(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def intersect(self, set2: Set) -> object:
        """
        intersect(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: :class:`Set`
        """

    @overload
    def intersect(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def intersect_params(self, params: Set) -> object:
        """
        intersect_params(self, params)

        :param self: :class:`Set`
        :param params: :class:`Set`
        :return: :class:`Set`
        """

    @overload
    def intersect_params(self, arg: Set, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def intersect_factor_domain(self, domain: Set) -> object:
        """
        intersect_factor_domain(self, domain)

        :param self: :class:`Set`
        :param domain: :class:`Set`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_factor_range(self, range: Set) -> object:
        """
        intersect_factor_range(self, range)

        :param self: :class:`Set`
        :param range: :class:`Set`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def subtract(self, set2: Set) -> object:
        """
        subtract(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: :class:`Set`
        """

    @overload
    def subtract(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def complement(self) -> object:
        """
        complement(self)

        :param self: :class:`Set`
        :return: :class:`Set`
        """

    @overload
    def apply(self, map: Map) -> object:
        """
        apply(self, map)

        :param self: :class:`Set`
        :param map: :class:`Map`
        :return: :class:`Set`
        """

    @overload
    def apply(self, arg: UnionMap, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def preimage_multi_aff(self, ma: MultiAff) -> object:
        """
        preimage_multi_aff(self, ma)

        :param self: :class:`Set`
        :param ma: :class:`MultiAff`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def preimage_multi_aff(self, arg: MultiAff, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def preimage_pw_multi_aff(self, pma: PwMultiAff) -> object:
        """
        preimage_pw_multi_aff(self, pma)

        :param self: :class:`Set`
        :param pma: :class:`PwMultiAff`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def preimage_pw_multi_aff(self, arg: PwMultiAff, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def preimage_multi_pw_aff(self, mpa: MultiPwAff) -> object:
        """
        preimage_multi_pw_aff(self, mpa)

        :param self: :class:`Set`
        :param mpa: :class:`MultiPwAff`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def fix_val(self, type: dim_type, pos: int, v: object) -> object:
        """
        fix_val(self, type, pos, v)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param v: :class:`Val`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def fix_dim_si(self, dim: int, value: int) -> object:
        """
        fix_dim_si(self, dim, value)

        :param self: :class:`Set`
        :param dim: :class:`unsigned`
        :param value: :class:`int`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_dims(self, type: dim_type, pos: int, n: int) -> object:
        """
        insert_dims(self, type, pos, n)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_dims(self, type: dim_type, n: int) -> object:
        """
        add_dims(self, type, n)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param n: :class:`unsigned`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def move_dims(self, dst_type: dim_type, dst_pos: int, src_type: dim_type, src_pos: int, n: int) -> object:
        """
        move_dims(self, dst_type, dst_pos, src_type, src_pos, n)

        :param self: :class:`Set`
        :param dst_type: :class:`dim_type`
        :param dst_pos: :class:`unsigned`
        :param src_type: :class:`dim_type`
        :param src_pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def project_out_param_id(self, id: Id) -> object:
        """
        project_out_param_id(self, id)

        :param self: :class:`Set`
        :param id: :class:`Id`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def project_out_param_id_list(self, list: IdList) -> object:
        """
        project_out_param_id_list(self, list)

        :param self: :class:`Set`
        :param list: :class:`IdList`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def project_out(self, type: dim_type, first: int, n: int) -> object:
        """
        project_out(self, type, first, n)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def project_out(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def project_out_all_params(self) -> object:
        """
        project_out_all_params(self)

        :param self: :class:`Set`
        :return: :class:`Set`
        """

    @overload
    def project_out_all_params(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def project_onto_map(self, type: dim_type, first: int, n: int) -> object:
        """
        project_onto_map(self, type, first, n)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def eliminate(self, type: dim_type, first: int, n: int) -> object:
        """
        eliminate(self, type, first, n)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def eliminate_dims(self, first: int, n: int) -> object:
        """
        eliminate_dims(self, first, n)

        :param self: :class:`Set`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def remove_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        remove_dims(self, type, first, n)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def remove_divs_involving_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        remove_divs_involving_dims(self, type, first, n)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def remove_unknown_divs(self) -> object:
        """
        remove_unknown_divs(self)

        :param self: :class:`Set`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def remove_divs(self) -> object:
        """
        remove_divs(self)

        :param self: :class:`Set`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def remove_divs(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def split_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        split_dims(self, type, first, n)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_constraints_involving_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_constraints_involving_dims(self, type, first, n)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_constraints_not_involving_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_constraints_not_involving_dims(self, type, first, n)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_locals(self) -> bool:
        """
        involves_locals(self)

        :param self: :class:`Set`
        :return: bool
        """

    def involves_dims(self, type: dim_type, first: int, n: int) -> bool:
        """
        involves_dims(self, type, first, n)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_is_empty(self) -> bool:
        """
        plain_is_empty(self)

        :param self: :class:`Set`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_is_universe(self) -> bool:
        """
        plain_is_universe(self)

        :param self: :class:`Set`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def is_params(self) -> bool:
        """
        is_params(self)

        :param self: :class:`Set`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def is_params(self) -> bool:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def is_empty(self) -> bool:
        """
        is_empty(self)

        :param self: :class:`Set`
        :return: bool
        """

    @overload
    def is_empty(self) -> bool:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def is_bounded(self) -> bool:
        """
        is_bounded(self)

        :param self: :class:`Set`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def is_subset(self, set2: Set) -> bool:
        """
        is_subset(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: bool
        """

    @overload
    def is_subset(self, arg: UnionSet, /) -> bool:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def is_strict_subset(self, set2: Set) -> bool:
        """
        is_strict_subset(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: bool
        """

    @overload
    def is_strict_subset(self, arg: UnionSet, /) -> bool:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def is_equal(self, set2: Set) -> bool:
        """
        is_equal(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: bool
        """

    @overload
    def is_equal(self, arg: UnionSet, /) -> bool:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def is_disjoint(self, set2: Set) -> bool:
        """
        is_disjoint(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: bool
        """

    @overload
    def is_disjoint(self, arg: UnionSet, /) -> bool:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def is_singleton(self) -> bool:
        """
        is_singleton(self)

        :param self: :class:`Set`
        :return: bool
        """

    def is_box(self) -> bool:
        """
        is_box(self)

        :param self: :class:`Set`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_equal_space(self, set2: Set) -> bool:
        """
        has_equal_space(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sum(self, set2: Set) -> object:
        """
        sum(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`Set`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def make_disjoint(self) -> object:
        """
        make_disjoint(self)

        :param self: :class:`Set`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def compute_divs(self) -> object:
        """
        compute_divs(self)

        :param self: :class:`Set`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def compute_divs(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def align_divs(self) -> object:
        """
        align_divs(self)

        :param self: :class:`Set`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_plain_multi_val_if_fixed(self) -> object:
        """
        get_plain_multi_val_if_fixed(self)

        :param self: :class:`Set`
        :return: :class:`MultiVal`
        """

    def plain_get_val_if_fixed(self, type: dim_type, pos: int) -> object:
        """
        plain_get_val_if_fixed(self, type, pos)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim_is_bounded(self, type: dim_type, pos: int) -> bool:
        """
        dim_is_bounded(self, type, pos)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim_has_lower_bound(self, type: dim_type, pos: int) -> bool:
        """
        dim_has_lower_bound(self, type, pos)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim_has_upper_bound(self, type: dim_type, pos: int) -> bool:
        """
        dim_has_upper_bound(self, type, pos)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim_has_any_lower_bound(self, type: dim_type, pos: int) -> bool:
        """
        dim_has_any_lower_bound(self, type, pos)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim_has_any_upper_bound(self, type: dim_type, pos: int) -> bool:
        """
        dim_has_any_upper_bound(self, type, pos)

        :param self: :class:`Set`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gist_basic_set(self, context: BasicSet) -> object:
        """
        gist_basic_set(self, context)

        :param self: :class:`Set`
        :param context: :class:`BasicSet`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def gist(self, context: Set) -> object:
        """
        gist(self, context)

        :param self: :class:`Set`
        :param context: :class:`Set`
        :return: :class:`Set`
        """

    @overload
    def gist(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def gist_params(self, context: Set) -> object:
        """
        gist_params(self, context)

        :param self: :class:`Set`
        :param context: :class:`Set`
        :return: :class:`Set`
        """

    @overload
    def gist_params(self, arg: Set, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def dim_residue_class_val(self, pos: int) -> object:
        """
        dim_residue_class_val(self, pos)

        :param self: :class:`Set`
        :param pos: :class:`int`
        :return: tuple: (modulo (:class:`Val`), residue (:class:`Val`))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_stride_info(self, pos: int) -> object:
        """
        get_stride_info(self, pos)

        :param self: :class:`Set`
        :param pos: :class:`int`
        :return: :class:`StrideInfo`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_stride(self, pos: int) -> object:
        """
        get_stride(self, pos)

        :param self: :class:`Set`
        :param pos: :class:`int`
        :return: :class:`Val`
        """

    def get_lattice_tile(self) -> object:
        """
        get_lattice_tile(self)

        :param self: :class:`Set`
        :return: :class:`FixedBox`
        """

    def get_simple_fixed_box_hull(self) -> object:
        """
        get_simple_fixed_box_hull(self)

        :param self: :class:`Set`
        :return: :class:`FixedBox`
        """

    @overload
    def coalesce(self) -> object:
        """
        coalesce(self)

        :param self: :class:`Set`
        :return: :class:`Set`
        """

    @overload
    def coalesce(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def plain_cmp(self, set2: Set) -> int:
        """
        plain_cmp(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_is_equal(self, set2: Set) -> bool:
        """
        plain_is_equal(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_is_disjoint(self, set2: Set) -> bool:
        """
        plain_is_disjoint(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __hash__(self) -> int:
        """
        get_hash(self)

        :param self: :class:`Set`
        :return: uint32_t 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_basic_set(self) -> int:
        """
        n_basic_set(self)

        :param self: :class:`Set`
        :return: isl_size
        """

    def foreach_basic_set(self, fn: object) -> stat:
        """
        foreach_basic_set(self, fn)

        :param self: :class:`Set`
        :param fn: callback(bset)
        :return: isl_stat
        """

    @overload
    def get_basic_set_list(self) -> object:
        """
        get_basic_set_list(self)

        :param self: :class:`Set`
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_basic_set_list(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def foreach_point(self, fn: object) -> stat:
        """
        foreach_point(self, fn)

        :param self: :class:`Set`
        :param fn: callback(pnt)
        :return: isl_stat
        """

    @overload
    def foreach_point(self, arg: object, /) -> stat:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def count_val(self) -> object:
        """
        count_val(self)

        :param self: :class:`Set`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_point(pnt: Point) -> object:
        """
        from_point(pnt)

        :param pnt: :class:`Point`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def box_from_points(pnt1: Point, pnt2: Point) -> object:
        """
        box_from_points(pnt1, pnt2)

        :param pnt1: :class:`Point`
        :param pnt2: :class:`Point`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def lift(self) -> object:
        """
        lift(self)

        :param self: :class:`Set`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def lift(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def lex_le_set(self, set2: Set) -> object:
        """
        lex_le_set(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_lt_set(self, set2: Set) -> object:
        """
        lex_lt_set(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_ge_set(self, set2: Set) -> object:
        """
        lex_ge_set(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_gt_set(self, set2: Set) -> object:
        """
        lex_gt_set(self, set2)

        :param self: :class:`Set`
        :param set2: :class:`Set`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`Set`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`Set`
        :param model: :class:`Space`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def align_params(self, arg: Space, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def drop_unused_params(self) -> object:
        """
        drop_unused_params(self)

        :param self: :class:`Set`
        :return: :class:`Set`
        """

    @overload
    def drop_unused_params(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @staticmethod
    def from_multi_aff(ma: MultiAff) -> object:
        """
        from_multi_aff(ma)

        :param ma: :class:`MultiAff`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def coefficients(self) -> object:
        """
        coefficients(self)

        :param self: :class:`Set`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def coefficients(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def solutions(self) -> object:
        """
        solutions(self)

        :param self: :class:`Set`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def solutions(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def dim_max(self, pos: int) -> object:
        """
        dim_max(self, pos)

        :param self: :class:`Set`
        :param pos: :class:`int`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim_min(self, pos: int) -> object:
        """
        dim_min(self, pos)

        :param self: :class:`Set`
        :param pos: :class:`int`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`Set`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def to_str(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def translation(self) -> object:
        """
        translation(self)

        :param self: :class:`Set`
        :return: :class:`Map`
        """

    @overload
    def identity(self) -> object:
        """
        identity(self)

        :param self: :class:`Set`
        :return: :class:`Map`
        """

    @overload
    def identity(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def is_wrapping(self) -> bool:
        """
        is_wrapping(self)

        :param self: :class:`Set`
        :return: bool
        """

    @overload
    def unwrap(self) -> object:
        """
        unwrap(self)

        :param self: :class:`Set`
        :return: :class:`Map`
        """

    @overload
    def unwrap(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def flatten(self) -> object:
        """
        flatten(self)

        :param self: :class:`Set`
        :return: :class:`Set`
        """

    def flatten_map(self) -> object:
        """
        flatten_map(self)

        :param self: :class:`Set`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_domain(self, domain: Space) -> object:
        """
        insert_domain(self, domain)

        :param self: :class:`Set`
        :param domain: :class:`Space`
        :return: :class:`Map`
        """

    @overload
    def wrapped_domain_map(self) -> object:
        """
        wrapped_domain_map(self)

        :param self: :class:`Set`
        :return: :class:`Map`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def wrapped_domain_map(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    @overload
    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`Set`
        :return: :class:`SetList`
        """

    @overload
    def to_list(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def pw_aff_on_domain_val(self, v: object) -> object:
        """
        pw_aff_on_domain_val(self, v)

        :param self: :class:`Set`
        :param v: :class:`Val`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def param_pw_aff_on_domain_id(self, id: Id) -> object:
        """
        param_pw_aff_on_domain_id(self, id)

        :param self: :class:`Set`
        :param id: :class:`Id`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def indicator_function(self) -> object:
        """
        indicator_function(self)

        :param self: :class:`Set`
        :return: :class:`PwAff`
        """

    @staticmethod
    def from_pw_aff(pwaff: PwAff) -> object:
        """
        from_pw_aff(pwaff)

        :param pwaff: :class:`PwAff`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def pw_multi_aff_on_domain_multi_val(self, mv: MultiVal) -> object:
        """
        pw_multi_aff_on_domain_multi_val(self, mv)

        :param self: :class:`Set`
        :param mv: :class:`MultiVal`
        :return: :class:`PwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_pw_multi_aff(pma: PwMultiAff) -> object:
        """
        from_pw_multi_aff(pma)

        :param pma: :class:`PwMultiAff`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def as_pw_multi_aff(self) -> object:
        """
        as_pw_multi_aff(self)

        :param self: :class:`Set`
        :return: :class:`PwMultiAff`
        """

    @staticmethod
    def from_multi_pw_aff(mpa: MultiPwAff) -> object:
        """
        from_multi_pw_aff(mpa)

        :param mpa: :class:`MultiPwAff`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def apply_pw_qpolynomial_fold(self, pwf: PwQPolynomialFold) -> object:
        """
        apply_pw_qpolynomial_fold(self, pwf)

        :param self: :class:`Set`
        :param pwf: :class:`PwQPolynomialFold`
        :return: tuple: (:class:`PwQPolynomialFold`, tight (Bool))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_union_set(self) -> object:
        """
        to_union_set(self)

        :param self: :class:`Set`
        :return: :class:`UnionSet`
        """

    @staticmethod
    def from_union_set(uset: UnionSet) -> object:
        """
        from_union_set(uset)

        :param uset: :class:`UnionSet`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_constraint(self, constraint: Constraint) -> object:
        """
        add_constraint(self, constraint)

        :param self: :class:`Set`
        :param constraint: :class:`Constraint`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def min_val(self, obj: Aff) -> object:
        """
        min_val(self, obj)

        :param self: :class:`Set`
        :param obj: :class:`Aff`
        :return: :class:`Val`
        """

    def max_val(self, obj: Aff) -> object:
        """
        max_val(self, obj)

        :param self: :class:`Set`
        :param obj: :class:`Aff`
        :return: :class:`Val`
        """

    def dim_min_val(self, pos: int) -> object:
        """
        dim_min_val(self, pos)

        :param self: :class:`Set`
        :param pos: :class:`int`
        :return: :class:`Val`
        """

    def dim_max_val(self, pos: int) -> object:
        """
        dim_max_val(self, pos)

        :param self: :class:`Set`
        :param pos: :class:`int`
        :return: :class:`Val`
        """

    def identity_union_pw_multi_aff(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def apply_union_pw_qpolynomial_fold(self, arg: UnionPwQPolynomialFold, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def add_set(self, arg: Set, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def preimage_union_pw_multi_aff(self, arg: UnionPwMultiAff, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def get_hash(self) -> int:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def n_set(self) -> int:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def foreach_set(self, arg: object, /) -> stat:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def every_set(self, arg: object, /) -> bool:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def get_set_list(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def contains(self, arg: Space, /) -> bool:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def extract_set(self, arg: Space, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def isa_set(self) -> bool:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def as_set(self) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def lex_lt_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def lex_le_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def lex_gt_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def lex_ge_union_set(self, arg: UnionSet, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def compute_schedule(self, arg0: UnionMap, arg1: UnionMap, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

    def min_multi_union_pw_aff(self, arg: MultiUnionPwAff, /) -> object:
        """Upcast from :class:`Set` to :class:`UnionSet`"""

class SetList:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def union(self) -> object:
        """
        union(self)

        :param self: :class:`SetList`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`SetList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_set(el: Set) -> object:
        """
        from_set(el)

        :param el: :class:`Set`
        :return: :class:`SetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`SetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`SetList`
        :return: :class:`SetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: Set) -> object:
        """
        add(self, el)

        :param self: :class:`SetList`
        :param el: :class:`Set`
        :return: :class:`SetList`
        """

    def insert(self, pos: int, el: Set) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`SetList`
        :param pos: :class:`unsigned`
        :param el: :class:`Set`
        :return: :class:`SetList`
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`SetList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`SetList`
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`SetList`
        :return: :class:`SetList`
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`SetList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`SetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`SetList`
        :return: :class:`SetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: SetList) -> object:
        """
        concat(self, list2)

        :param self: :class:`SetList`
        :param list2: :class:`SetList`
        :return: :class:`SetList`
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`SetList`
        :return: isl_size
        """

    def n_set(self) -> int:
        """
        n_set(self)

        :param self: :class:`SetList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`SetList`
        :param index: :class:`int`
        :return: :class:`Set`
        """

    def get_set(self, index: int) -> object:
        """
        get_set(self, index)

        :param self: :class:`SetList`
        :param index: :class:`int`
        :return: :class:`Set`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: Set) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`SetList`
        :param index: :class:`int`
        :param el: :class:`Set`
        :return: :class:`SetList`
        """

    def set_set(self, index: int, el: Set) -> object:
        """
        set_set(self, index, el)

        :param self: :class:`SetList`
        :param index: :class:`int`
        :param el: :class:`Set`
        :return: :class:`SetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`SetList`
        :param fn: callback(el)
        :return: isl_stat
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`SetList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`SetList`
        :param fn: callback(el)
        :return: :class:`SetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`SetList`
        :param cmp: callback(a, b)
        :return: :class:`SetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`SetList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`SetList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`SetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Space:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def multi_id(self, list: IdList) -> object:
        """
        multi_id(self, list)

        :param self: :class:`Space`
        :param list: :class:`IdList`
        :return: :class:`MultiId`
        """

    @overload
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Space`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_ctx(self) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    @staticmethod
    def unit(ctx: Context) -> object:
        """
        unit(ctx)

        :param ctx: :class:`Context`
        :return: :class:`Space`
        """

    @staticmethod
    def alloc(ctx: Context, nparam: int, n_in: int, n_out: int) -> object:
        """
        alloc(ctx, nparam, n_in, n_out)

        :param ctx: :class:`Context`
        :param nparam: :class:`unsigned`
        :param n_in: :class:`unsigned`
        :param n_out: :class:`unsigned`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def set_alloc(ctx: Context, nparam: int, dim: int) -> object:
        """
        set_alloc(ctx, nparam, dim)

        :param ctx: :class:`Context`
        :param nparam: :class:`unsigned`
        :param dim: :class:`unsigned`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def params_alloc(ctx: Context, nparam: int) -> object:
        """
        params_alloc(ctx, nparam)

        :param ctx: :class:`Context`
        :param nparam: :class:`unsigned`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def copy(self) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    @overload
    def is_params(self) -> bool:
        """
        is_params(self)

        :param self: :class:`Space`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def is_params(self) -> bool:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    @overload
    def is_set(self) -> bool:
        """
        is_set(self)

        :param self: :class:`Space`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def is_set(self) -> bool:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    def is_map(self) -> bool:
        """
        is_map(self)

        :param self: :class:`Space`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_param_id(self, id: Id) -> object:
        """
        add_param_id(self, id)

        :param self: :class:`Space`
        :param id: :class:`Id`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_tuple_name(self, type: dim_type, s: str) -> object:
        """
        set_tuple_name(self, type, s)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :param s: string
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_tuple_name(self, type: dim_type) -> bool:
        """
        has_tuple_name(self, type)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_tuple_name(self, type: dim_type) -> object:
        """
        get_tuple_name(self, type)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_domain_tuple_id(self, id: Id) -> object:
        """
        set_domain_tuple_id(self, id)

        :param self: :class:`Space`
        :param id: :class:`Id`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_range_tuple_id(self, id: Id) -> object:
        """
        set_range_tuple_id(self, id)

        :param self: :class:`Space`
        :param id: :class:`Id`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_tuple_id(self, type: dim_type, id: Id) -> object:
        """
        set_tuple_id(self, type, id)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_tuple_id(self, arg0: dim_type, arg1: Id, /) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    def reset_tuple_id(self, type: dim_type) -> object:
        """
        reset_tuple_id(self, type)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_domain_tuple_id(self) -> bool:
        """
        has_domain_tuple_id(self)

        :param self: :class:`Space`
        :return: bool
        """

    def has_range_tuple_id(self) -> bool:
        """
        has_range_tuple_id(self)

        :param self: :class:`Space`
        :return: bool
        """

    def has_tuple_id(self, type: dim_type) -> bool:
        """
        has_tuple_id(self, type)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_domain_tuple_id(self) -> object:
        """
        get_domain_tuple_id(self)

        :param self: :class:`Space`
        :return: :class:`Id`
        """

    def get_range_tuple_id(self) -> object:
        """
        get_range_tuple_id(self)

        :param self: :class:`Space`
        :return: :class:`Id`
        """

    def get_tuple_id(self, type: dim_type) -> object:
        """
        get_tuple_id(self, type)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_dim_id(self, type: dim_type, pos: int, id: Id) -> object:
        """
        set_dim_id(self, type, pos, id)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param id: :class:`Id`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_dim_id(self, arg0: dim_type, arg1: int, arg2: Id, /) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    @overload
    def has_dim_id(self, type: dim_type, pos: int) -> bool:
        """
        has_dim_id(self, type, pos)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def has_dim_id(self, arg0: dim_type, arg1: int, /) -> bool:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    @overload
    def get_dim_id(self, type: dim_type, pos: int) -> object:
        """
        get_dim_id(self, type, pos)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_dim_id(self, arg0: dim_type, arg1: int, /) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    def find_dim_by_id(self, type: dim_type, id: Id) -> int:
        """
        find_dim_by_id(self, type, id)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :param id: :class:`Id`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def find_dim_by_name(self, arg0: dim_type, arg1: str, /) -> int:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    @overload
    def has_dim_name(self, type: dim_type, pos: int) -> bool:
        """
        has_dim_name(self, type, pos)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def has_dim_name(self, arg0: dim_type, arg1: int, /) -> bool:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    @overload
    def set_dim_name(self, type: dim_type, pos: int, name: str) -> object:
        """
        set_dim_name(self, type, pos, name)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param name: string
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_dim_name(self, arg0: dim_type, arg1: int, arg2: str, /) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    @overload
    def get_dim_name(self, type: dim_type, pos: int) -> object:
        """
        get_dim_name(self, type, pos)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def get_dim_name(self, arg0: dim_type, arg1: int, /) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    def extend(self, nparam: int, n_in: int, n_out: int) -> object:
        """
        extend(self, nparam, n_in, n_out)

        :param self: :class:`Space`
        :param nparam: :class:`unsigned`
        :param n_in: :class:`unsigned`
        :param n_out: :class:`unsigned`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def add_dims(self, type: dim_type, n: int) -> object:
        """
        add_dims(self, type, n)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :param n: :class:`unsigned`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def add_dims(self, arg0: dim_type, arg1: int, /) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    def move_dims(self, dst_type: dim_type, dst_pos: int, src_type: dim_type, src_pos: int, n: int) -> object:
        """
        move_dims(self, dst_type, dst_pos, src_type, src_pos, n)

        :param self: :class:`Space`
        :param dst_type: :class:`dim_type`
        :param dst_pos: :class:`unsigned`
        :param src_type: :class:`dim_type`
        :param src_pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def insert_dims(self, type: dim_type, pos: int, n: int) -> object:
        """
        insert_dims(self, type, pos, n)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def insert_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    def join(self, right: Space) -> object:
        """
        join(self, right)

        :param self: :class:`Space`
        :param right: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def product(self, right: Space) -> object:
        """
        product(self, right)

        :param self: :class:`Space`
        :param right: :class:`Space`
        :return: :class:`Space`
        """

    def domain_product(self, right: Space) -> object:
        """
        domain_product(self, right)

        :param self: :class:`Space`
        :param right: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_product(self, right: Space) -> object:
        """
        range_product(self, right)

        :param self: :class:`Space`
        :param right: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def factor_domain(self) -> object:
        """
        factor_domain(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def factor_range(self) -> object:
        """
        factor_range(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def domain_factor_domain(self) -> object:
        """
        domain_factor_domain(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def domain_factor_range(self) -> object:
        """
        domain_factor_range(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_factor_domain(self) -> object:
        """
        range_factor_domain(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_factor_range(self) -> object:
        """
        range_factor_range(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def domain_wrapped_domain(self) -> object:
        """
        domain_wrapped_domain(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def domain_wrapped_range(self) -> object:
        """
        domain_wrapped_range(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_wrapped_domain(self) -> object:
        """
        range_wrapped_domain(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_wrapped_range(self) -> object:
        """
        range_wrapped_range(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map_from_set(self) -> object:
        """
        map_from_set(self)

        :param self: :class:`Space`
        :return: :class:`Space`
        """

    def map_from_domain_and_range(self, range: Space) -> object:
        """
        map_from_domain_and_range(self, range)

        :param self: :class:`Space`
        :param range: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`Space`
        :return: :class:`Space`
        """

    def wrapped_reverse(self) -> object:
        """
        wrapped_reverse(self)

        :param self: :class:`Space`
        :return: :class:`Space`
        """

    def domain_reverse(self) -> object:
        """
        domain_reverse(self)

        :param self: :class:`Space`
        :return: :class:`Space`
        """

    def range_reverse(self) -> object:
        """
        range_reverse(self)

        :param self: :class:`Space`
        :return: :class:`Space`
        """

    @overload
    def drop_dims(self, type: dim_type, first: int, num: int) -> object:
        """
        drop_dims(self, type, first, num)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param num: :class:`unsigned`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def drop_dims(self, arg0: dim_type, arg1: int, arg2: int, /) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    def drop_inputs(self, first: int, n: int) -> object:
        """
        drop_inputs(self, first, n)

        :param self: :class:`Space`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_outputs(self, first: int, n: int) -> object:
        """
        drop_outputs(self, first, n)

        :param self: :class:`Space`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_all_params(self) -> object:
        """
        drop_all_params(self)

        :param self: :class:`Space`
        :return: :class:`Space`
        """

    @overload
    def domain(self) -> object:
        """
        domain(self)

        :param self: :class:`Space`
        :return: :class:`Space`
        """

    @overload
    def domain(self) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    @overload
    def from_domain(self) -> object:
        """
        from_domain(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def from_domain(self) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    @overload
    def range(self) -> object:
        """
        range(self)

        :param self: :class:`Space`
        :return: :class:`Space`
        """

    @overload
    def range(self) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    def from_range(self) -> object:
        """
        from_range(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def domain_map(self) -> object:
        """
        domain_map(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_map(self) -> object:
        """
        range_map(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def params(self) -> object:
        """
        params(self)

        :param self: :class:`Space`
        :return: :class:`Space`
        """

    def add_unnamed_tuple_ui(self, dim: int) -> object:
        """
        add_unnamed_tuple_ui(self, dim)

        :param self: :class:`Space`
        :param dim: :class:`unsigned`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_named_tuple_id_ui(self, tuple_id: Id, dim: int) -> object:
        """
        add_named_tuple_id_ui(self, tuple_id, dim)

        :param self: :class:`Space`
        :param tuple_id: :class:`Id`
        :param dim: :class:`unsigned`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_from_params(self) -> object:
        """
        set_from_params(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def set_from_params(self) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    def align_params(self, space2: Space) -> object:
        """
        align_params(self, space2)

        :param self: :class:`Space`
        :param space2: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_wrapping(self) -> bool:
        """
        is_wrapping(self)

        :param self: :class:`Space`
        :return: bool
        """

    def domain_is_wrapping(self) -> bool:
        """
        domain_is_wrapping(self)

        :param self: :class:`Space`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_is_wrapping(self) -> bool:
        """
        range_is_wrapping(self)

        :param self: :class:`Space`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_product(self) -> bool:
        """
        is_product(self)

        :param self: :class:`Space`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def wrap(self) -> object:
        """
        wrap(self)

        :param self: :class:`Space`
        :return: :class:`Space`
        """

    @overload
    def wrap(self) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    def unwrap(self) -> object:
        """
        unwrap(self)

        :param self: :class:`Space`
        :return: :class:`Space`
        """

    def can_zip(self) -> bool:
        """
        can_zip(self)

        :param self: :class:`Space`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def zip(self) -> object:
        """
        zip(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def can_curry(self) -> bool:
        """
        can_curry(self)

        :param self: :class:`Space`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def curry(self) -> object:
        """
        curry(self)

        :param self: :class:`Space`
        :return: :class:`Space`
        """

    def can_range_curry(self) -> bool:
        """
        can_range_curry(self)

        :param self: :class:`Space`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_curry(self) -> object:
        """
        range_curry(self)

        :param self: :class:`Space`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def can_uncurry(self) -> bool:
        """
        can_uncurry(self)

        :param self: :class:`Space`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def uncurry(self) -> object:
        """
        uncurry(self)

        :param self: :class:`Space`
        :return: :class:`Space`
        """

    def is_domain(self, space2: Space) -> bool:
        """
        is_domain(self, space2)

        :param self: :class:`Space`
        :param space2: :class:`Space`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_range(self, space2: Space) -> bool:
        """
        is_range(self, space2)

        :param self: :class:`Space`
        :param space2: :class:`Space`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def is_equal(self, space2: Space) -> bool:
        """
        is_equal(self, space2)

        :param self: :class:`Space`
        :param space2: :class:`Space`
        :return: bool
        """

    @overload
    def is_equal(self, arg: LocalSpace, /) -> bool:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    def has_equal_params(self, space2: Space) -> bool:
        """
        has_equal_params(self, space2)

        :param self: :class:`Space`
        :param space2: :class:`Space`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def has_equal_tuples(self, space2: Space) -> bool:
        """
        has_equal_tuples(self, space2)

        :param self: :class:`Space`
        :param space2: :class:`Space`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def tuple_is_equal(self, type1: dim_type, space2: Space, type2: dim_type) -> bool:
        """
        tuple_is_equal(self, type1, space2, type2)

        :param self: :class:`Space`
        :param type1: :class:`dim_type`
        :param space2: :class:`Space`
        :param type2: :class:`dim_type`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def match(self, type1: dim_type, space2: Space, type2: dim_type) -> bool:
        """
        match(self, type1, space2, type2)

        :param self: :class:`Space`
        :param type1: :class:`dim_type`
        :param space2: :class:`Space`
        :param type2: :class:`dim_type`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`Space`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dim(self, arg: dim_type, /) -> int:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    @overload
    def flatten_domain(self) -> object:
        """
        flatten_domain(self)

        :param self: :class:`Space`
        :return: :class:`Space`
        """

    @overload
    def flatten_domain(self) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    @overload
    def flatten_range(self) -> object:
        """
        flatten_range(self)

        :param self: :class:`Space`
        :return: :class:`Space`
        """

    @overload
    def flatten_range(self) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`Space`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`Space`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @overload
    def dump(self) -> None:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    def universe_set(self) -> object:
        """
        universe_set(self)

        :param self: :class:`Space`
        :return: :class:`Set`
        """

    def universe_map(self) -> object:
        """
        universe_map(self)

        :param self: :class:`Space`
        :return: :class:`Map`
        """

    def zero_aff_on_domain(self) -> object:
        """
        zero_aff_on_domain(self)

        :param self: :class:`Space`
        :return: :class:`Aff`
        """

    def param_aff_on_domain_id(self, id: Id) -> object:
        """
        param_aff_on_domain_id(self, id)

        :param self: :class:`Space`
        :param id: :class:`Id`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def multi_aff(self, list: AffList) -> object:
        """
        multi_aff(self, list)

        :param self: :class:`Space`
        :param list: :class:`AffList`
        :return: :class:`MultiAff`
        """

    def identity_multi_aff_on_domain(self) -> object:
        """
        identity_multi_aff_on_domain(self)

        :param self: :class:`Space`
        :return: :class:`MultiAff`
        """

    def zero_multi_aff(self) -> object:
        """
        zero_multi_aff(self)

        :param self: :class:`Space`
        :return: :class:`MultiAff`
        """

    def domain_map_multi_aff(self) -> object:
        """
        domain_map_multi_aff(self)

        :param self: :class:`Space`
        :return: :class:`MultiAff`
        """

    def range_map_multi_aff(self) -> object:
        """
        range_map_multi_aff(self)

        :param self: :class:`Space`
        :return: :class:`MultiAff`
        """

    def multi_aff_on_domain_multi_val(self, mv: MultiVal) -> object:
        """
        multi_aff_on_domain_multi_val(self, mv)

        :param self: :class:`Space`
        :param mv: :class:`MultiVal`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def multi_pw_aff(self, list: PwAffList) -> object:
        """
        multi_pw_aff(self, list)

        :param self: :class:`Space`
        :param list: :class:`PwAffList`
        :return: :class:`MultiPwAff`
        """

    def identity_multi_pw_aff_on_domain(self) -> object:
        """
        identity_multi_pw_aff_on_domain(self)

        :param self: :class:`Space`
        :return: :class:`MultiPwAff`
        """

    def zero_multi_pw_aff(self) -> object:
        """
        zero_multi_pw_aff(self)

        :param self: :class:`Space`
        :return: :class:`MultiPwAff`
        """

    def identity_pw_multi_aff_on_domain(self) -> object:
        """
        identity_pw_multi_aff_on_domain(self)

        :param self: :class:`Space`
        :return: :class:`PwMultiAff`
        """

    def domain_map_pw_multi_aff(self) -> object:
        """
        domain_map_pw_multi_aff(self)

        :param self: :class:`Space`
        :return: :class:`PwMultiAff`
        """

    def range_map_pw_multi_aff(self) -> object:
        """
        range_map_pw_multi_aff(self)

        :param self: :class:`Space`
        :return: :class:`PwMultiAff`
        """

    def multi_union_pw_aff(self, list: UnionPwAffList) -> object:
        """
        multi_union_pw_aff(self, list)

        :param self: :class:`Space`
        :param list: :class:`UnionPwAffList`
        :return: :class:`MultiUnionPwAff`
        """

    def zero_multi_union_pw_aff(self) -> object:
        """
        zero_multi_union_pw_aff(self)

        :param self: :class:`Space`
        :return: :class:`MultiUnionPwAff`
        """

    def multi_val(self, list: ValList) -> object:
        """
        multi_val(self, list)

        :param self: :class:`Space`
        :param list: :class:`ValList`
        :return: :class:`MultiVal`
        """

    def zero_multi_val(self) -> object:
        """
        zero_multi_val(self)

        :param self: :class:`Space`
        :return: :class:`MultiVal`
        """

    def get_space(self) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    def get_div(self, arg: int, /) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    def intersect(self, arg: LocalSpace, /) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

    def lifting(self) -> object:
        """Upcast from :class:`Space` to :class:`LocalSpace`"""

class StrideInfo:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`StrideInfo`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_stride(self) -> object:
        """
        get_stride(self)

        :param self: :class:`StrideInfo`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_offset(self) -> object:
        """
        get_offset(self)

        :param self: :class:`StrideInfo`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`StrideInfo`
        :return: :class:`StrideInfo`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Term:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Term`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`Term`
        :return: :class:`Term`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`Term`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_coefficient_val(self) -> object:
        """
        get_coefficient_val(self)

        :param self: :class:`Term`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_exp(self, type: dim_type, pos: int) -> int:
        """
        get_exp(self, type, pos)

        :param self: :class:`Term`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_div(self, pos: int) -> object:
        """
        get_div(self, pos)

        :param self: :class:`Term`
        :param pos: :class:`unsigned`
        :return: :class:`Aff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class UnionAccessInfo:
    @staticmethod
    def from_sink(sink: UnionMap) -> object:
        """
        from_sink(sink)

        :param sink: :class:`UnionMap`
        :return: :class:`UnionAccessInfo`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_must_source(self, must_source: UnionMap) -> object:
        """
        set_must_source(self, must_source)

        :param self: :class:`UnionAccessInfo`
        :param must_source: :class:`UnionMap`
        :return: :class:`UnionAccessInfo`
        """

    def set_may_source(self, may_source: UnionMap) -> object:
        """
        set_may_source(self, may_source)

        :param self: :class:`UnionAccessInfo`
        :param may_source: :class:`UnionMap`
        :return: :class:`UnionAccessInfo`
        """

    def set_kill(self, kill: UnionMap) -> object:
        """
        set_kill(self, kill)

        :param self: :class:`UnionAccessInfo`
        :param kill: :class:`UnionMap`
        :return: :class:`UnionAccessInfo`
        """

    def set_schedule(self, schedule: Schedule) -> object:
        """
        set_schedule(self, schedule)

        :param self: :class:`UnionAccessInfo`
        :param schedule: :class:`Schedule`
        :return: :class:`UnionAccessInfo`
        """

    def set_schedule_map(self, schedule_map: UnionMap) -> object:
        """
        set_schedule_map(self, schedule_map)

        :param self: :class:`UnionAccessInfo`
        :param schedule_map: :class:`UnionMap`
        :return: :class:`UnionAccessInfo`
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`UnionAccessInfo`
        :return: :class:`UnionAccessInfo`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`UnionAccessInfo`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`UnionAccessInfo`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def compute_flow(self) -> object:
        """
        compute_flow(self)

        :param self: :class:`UnionAccessInfo`
        :return: :class:`UnionFlow`
        """

class UnionFlow:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`UnionFlow`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`UnionFlow`
        :return: :class:`UnionFlow`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_must_dependence(self) -> object:
        """
        get_must_dependence(self)

        :param self: :class:`UnionFlow`
        :return: :class:`UnionMap`
        """

    def get_may_dependence(self) -> object:
        """
        get_may_dependence(self)

        :param self: :class:`UnionFlow`
        :return: :class:`UnionMap`
        """

    def get_full_must_dependence(self) -> object:
        """
        get_full_must_dependence(self)

        :param self: :class:`UnionFlow`
        :return: :class:`UnionMap`
        """

    def get_full_may_dependence(self) -> object:
        """
        get_full_may_dependence(self)

        :param self: :class:`UnionFlow`
        :return: :class:`UnionMap`
        """

    def get_must_no_source(self) -> object:
        """
        get_must_no_source(self)

        :param self: :class:`UnionFlow`
        :return: :class:`UnionMap`
        """

    def get_may_no_source(self) -> object:
        """
        get_may_no_source(self)

        :param self: :class:`UnionFlow`
        :return: :class:`UnionMap`
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`UnionFlow`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class UnionMap:
    @overload
    def __init__(self, arg: Map, /) -> None: ...

    @overload
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    @staticmethod
    def from_union_pw_multi_aff(upma: UnionPwMultiAff) -> object:
        """
        from_union_pw_multi_aff(upma)

        :param upma: :class:`UnionPwMultiAff`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def as_union_pw_multi_aff(self) -> object:
        """
        as_union_pw_multi_aff(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionPwMultiAff`
        """

    @staticmethod
    def from_union_pw_aff(upa: UnionPwAff) -> object:
        """
        from_union_pw_aff(upa)

        :param upa: :class:`UnionPwAff`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def as_multi_union_pw_aff(self) -> object:
        """
        as_multi_union_pw_aff(self)

        :param self: :class:`UnionMap`
        :return: :class:`MultiUnionPwAff`
        """

    @staticmethod
    def from_multi_union_pw_aff(mupa: MultiUnionPwAff) -> object:
        """
        from_multi_union_pw_aff(mupa)

        :param mupa: :class:`MultiUnionPwAff`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def apply_union_pw_qpolynomial_fold(self, upwf: UnionPwQPolynomialFold) -> object:
        """
        apply_union_pw_qpolynomial_fold(self, upwf)

        :param self: :class:`UnionMap`
        :param upwf: :class:`UnionPwQPolynomialFold`
        :return: tuple: (:class:`UnionPwQPolynomialFold`, tight (Bool))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`UnionMap`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_dims(self, type: dim_type, first: int, n: int) -> bool:
        """
        involves_dims(self, type, first, n)

        :param self: :class:`UnionMap`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_dim_id(self, type: dim_type, pos: int) -> object:
        """
        get_dim_id(self, type, pos)

        :param self: :class:`UnionMap`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :return: :class:`Id`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_basic_map(bmap: BasicMap) -> object:
        """
        from_basic_map(bmap)

        :param bmap: :class:`BasicMap`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_map(map: Map) -> object:
        """
        from_map(map)

        :param map: :class:`Map`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def empty_ctx(ctx: Context) -> object:
        """
        empty_ctx(ctx)

        :param ctx: :class:`Context`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def empty_space(space: Space) -> object:
        """
        empty_space(space)

        :param space: :class:`Space`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def empty(space: Space) -> object:
        """
        empty(space)

        :param space: :class:`Space`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`UnionMap`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`UnionMap`
        :return: :class:`Space`
        """

    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`UnionMap`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def universe(self) -> object:
        """
        universe(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def params(self) -> object:
        """
        params(self)

        :param self: :class:`UnionMap`
        :return: :class:`Set`
        """

    def domain(self) -> object:
        """
        domain(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionSet`
        """

    def range(self) -> object:
        """
        range(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionSet`
        """

    def domain_map(self) -> object:
        """
        domain_map(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def domain_map_union_pw_multi_aff(self) -> object:
        """
        domain_map_union_pw_multi_aff(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionPwMultiAff`
        """

    def range_map(self) -> object:
        """
        range_map(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    @staticmethod
    def from_domain(uset: UnionSet) -> object:
        """
        from_domain(uset)

        :param uset: :class:`UnionSet`
        :return: :class:`UnionMap`
        """

    @staticmethod
    def from_range(uset: UnionSet) -> object:
        """
        from_range(uset)

        :param uset: :class:`UnionSet`
        :return: :class:`UnionMap`
        """

    def affine_hull(self) -> object:
        """
        affine_hull(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def polyhedral_hull(self) -> object:
        """
        polyhedral_hull(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def remove_redundancies(self) -> object:
        """
        remove_redundancies(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def simple_hull(self) -> object:
        """
        simple_hull(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def coalesce(self) -> object:
        """
        coalesce(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def compute_divs(self) -> object:
        """
        compute_divs(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def lexmin(self) -> object:
        """
        lexmin(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def lexmax(self) -> object:
        """
        lexmax(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def add_map(self, map: Map) -> object:
        """
        add_map(self, map)

        :param self: :class:`UnionMap`
        :param map: :class:`Map`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def union(self, umap2: UnionMap) -> object:
        """
        union(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def subtract(self, umap2: UnionMap) -> object:
        """
        subtract(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def intersect(self, umap2: UnionMap) -> object:
        """
        intersect(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def intersect_params(self, set: Set) -> object:
        """
        intersect_params(self, set)

        :param self: :class:`UnionMap`
        :param set: :class:`Set`
        :return: :class:`UnionMap`
        """

    def product(self, umap2: UnionMap) -> object:
        """
        product(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def domain_product(self, umap2: UnionMap) -> object:
        """
        domain_product(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def flat_domain_product(self, umap2: UnionMap) -> object:
        """
        flat_domain_product(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_product(self, umap2: UnionMap) -> object:
        """
        range_product(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def flat_range_product(self, umap2: UnionMap) -> object:
        """
        flat_range_product(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def domain_factor_domain(self) -> object:
        """
        domain_factor_domain(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def domain_factor_range(self) -> object:
        """
        domain_factor_range(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def range_factor_domain(self) -> object:
        """
        range_factor_domain(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def range_factor_range(self) -> object:
        """
        range_factor_range(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def factor_domain(self) -> object:
        """
        factor_domain(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def factor_range(self) -> object:
        """
        factor_range(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def gist(self, context: UnionMap) -> object:
        """
        gist(self, context)

        :param self: :class:`UnionMap`
        :param context: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def gist_params(self, set: Set) -> object:
        """
        gist_params(self, set)

        :param self: :class:`UnionMap`
        :param set: :class:`Set`
        :return: :class:`UnionMap`
        """

    def gist_domain(self, uset: UnionSet) -> object:
        """
        gist_domain(self, uset)

        :param self: :class:`UnionMap`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionMap`
        """

    def gist_range(self, uset: UnionSet) -> object:
        """
        gist_range(self, uset)

        :param self: :class:`UnionMap`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionMap`
        """

    def intersect_domain_union_set(self, uset: UnionSet) -> object:
        """
        intersect_domain_union_set(self, uset)

        :param self: :class:`UnionMap`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain_space(self, space: Space) -> object:
        """
        intersect_domain_space(self, space)

        :param self: :class:`UnionMap`
        :param space: :class:`Space`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain(self, uset: UnionSet) -> object:
        """
        intersect_domain(self, uset)

        :param self: :class:`UnionMap`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_range_union_set(self, uset: UnionSet) -> object:
        """
        intersect_range_union_set(self, uset)

        :param self: :class:`UnionMap`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_range_space(self, space: Space) -> object:
        """
        intersect_range_space(self, space)

        :param self: :class:`UnionMap`
        :param space: :class:`Space`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_range(self, uset: UnionSet) -> object:
        """
        intersect_range(self, uset)

        :param self: :class:`UnionMap`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain_factor_domain(self, factor: UnionMap) -> object:
        """
        intersect_domain_factor_domain(self, factor)

        :param self: :class:`UnionMap`
        :param factor: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def intersect_domain_factor_range(self, factor: UnionMap) -> object:
        """
        intersect_domain_factor_range(self, factor)

        :param self: :class:`UnionMap`
        :param factor: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def intersect_range_factor_domain(self, factor: UnionMap) -> object:
        """
        intersect_range_factor_domain(self, factor)

        :param self: :class:`UnionMap`
        :param factor: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def intersect_range_factor_range(self, factor: UnionMap) -> object:
        """
        intersect_range_factor_range(self, factor)

        :param self: :class:`UnionMap`
        :param factor: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def intersect_domain_wrapped_domain_union_set(self, domain: UnionSet) -> object:
        """
        intersect_domain_wrapped_domain_union_set(self, domain)

        :param self: :class:`UnionMap`
        :param domain: :class:`UnionSet`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_range_wrapped_domain_union_set(self, domain: UnionSet) -> object:
        """
        intersect_range_wrapped_domain_union_set(self, domain)

        :param self: :class:`UnionMap`
        :param domain: :class:`UnionSet`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def subtract_domain(self, dom: UnionSet) -> object:
        """
        subtract_domain(self, dom)

        :param self: :class:`UnionMap`
        :param dom: :class:`UnionSet`
        :return: :class:`UnionMap`
        """

    def subtract_range(self, dom: UnionSet) -> object:
        """
        subtract_range(self, dom)

        :param self: :class:`UnionMap`
        :param dom: :class:`UnionSet`
        :return: :class:`UnionMap`
        """

    def apply_domain(self, umap2: UnionMap) -> object:
        """
        apply_domain(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def apply_range(self, umap2: UnionMap) -> object:
        """
        apply_range(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def preimage_domain_multi_aff(self, ma: MultiAff) -> object:
        """
        preimage_domain_multi_aff(self, ma)

        :param self: :class:`UnionMap`
        :param ma: :class:`MultiAff`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def preimage_range_multi_aff(self, ma: MultiAff) -> object:
        """
        preimage_range_multi_aff(self, ma)

        :param self: :class:`UnionMap`
        :param ma: :class:`MultiAff`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def preimage_domain_pw_multi_aff(self, pma: PwMultiAff) -> object:
        """
        preimage_domain_pw_multi_aff(self, pma)

        :param self: :class:`UnionMap`
        :param pma: :class:`PwMultiAff`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def preimage_range_pw_multi_aff(self, pma: PwMultiAff) -> object:
        """
        preimage_range_pw_multi_aff(self, pma)

        :param self: :class:`UnionMap`
        :param pma: :class:`PwMultiAff`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def preimage_domain_multi_pw_aff(self, mpa: MultiPwAff) -> object:
        """
        preimage_domain_multi_pw_aff(self, mpa)

        :param self: :class:`UnionMap`
        :param mpa: :class:`MultiPwAff`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def preimage_domain_union_pw_multi_aff(self, upma: UnionPwMultiAff) -> object:
        """
        preimage_domain_union_pw_multi_aff(self, upma)

        :param self: :class:`UnionMap`
        :param upma: :class:`UnionPwMultiAff`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def preimage_range_union_pw_multi_aff(self, upma: UnionPwMultiAff) -> object:
        """
        preimage_range_union_pw_multi_aff(self, upma)

        :param self: :class:`UnionMap`
        :param upma: :class:`UnionPwMultiAff`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def domain_reverse(self) -> object:
        """
        domain_reverse(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def range_reverse(self) -> object:
        """
        range_reverse(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    @staticmethod
    def from_domain_and_range(domain: UnionSet, range: UnionSet) -> object:
        """
        from_domain_and_range(domain, range)

        :param domain: :class:`UnionSet`
        :param range: :class:`UnionSet`
        :return: :class:`UnionMap`
        """

    def detect_equalities(self) -> object:
        """
        detect_equalities(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def deltas(self) -> object:
        """
        deltas(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionSet`
        """

    def deltas_map(self) -> object:
        """
        deltas_map(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def project_out_param_id(self, id: Id) -> object:
        """
        project_out_param_id(self, id)

        :param self: :class:`UnionMap`
        :param id: :class:`Id`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def project_out_param_id_list(self, list: IdList) -> object:
        """
        project_out_param_id_list(self, list)

        :param self: :class:`UnionMap`
        :param list: :class:`IdList`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def project_out(self, type: dim_type, first: int, n: int) -> object:
        """
        project_out(self, type, first, n)

        :param self: :class:`UnionMap`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def project_out_all_params(self) -> object:
        """
        project_out_all_params(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def drop_unused_params(self) -> object:
        """
        drop_unused_params(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def remove_divs(self) -> object:
        """
        remove_divs(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def bind_range(self, tuple: MultiId) -> object:
        """
        bind_range(self, tuple)

        :param self: :class:`UnionMap`
        :param tuple: :class:`MultiId`
        :return: :class:`UnionSet`
        """

    def plain_is_empty(self) -> bool:
        """
        plain_is_empty(self)

        :param self: :class:`UnionMap`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_empty(self) -> bool:
        """
        is_empty(self)

        :param self: :class:`UnionMap`
        :return: bool
        """

    def is_single_valued(self) -> bool:
        """
        is_single_valued(self)

        :param self: :class:`UnionMap`
        :return: bool
        """

    def plain_is_injective(self) -> bool:
        """
        plain_is_injective(self)

        :param self: :class:`UnionMap`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_injective(self) -> bool:
        """
        is_injective(self)

        :param self: :class:`UnionMap`
        :return: bool
        """

    def is_bijective(self) -> bool:
        """
        is_bijective(self)

        :param self: :class:`UnionMap`
        :return: bool
        """

    def is_identity(self) -> bool:
        """
        is_identity(self)

        :param self: :class:`UnionMap`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_subset(self, umap2: UnionMap) -> bool:
        """
        is_subset(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: bool
        """

    def is_equal(self, umap2: UnionMap) -> bool:
        """
        is_equal(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: bool
        """

    def is_disjoint(self, umap2: UnionMap) -> bool:
        """
        is_disjoint(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: bool
        """

    def is_strict_subset(self, umap2: UnionMap) -> bool:
        """
        is_strict_subset(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: bool
        """

    def __hash__(self) -> int:
        """
        get_hash(self)

        :param self: :class:`UnionMap`
        :return: uint32_t 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_map(self) -> int:
        """
        n_map(self)

        :param self: :class:`UnionMap`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_map(self, fn: object) -> stat:
        """
        foreach_map(self, fn)

        :param self: :class:`UnionMap`
        :param fn: callback(map)
        :return: isl_stat
        """

    def get_map_list(self) -> object:
        """
        get_map_list(self)

        :param self: :class:`UnionMap`
        :return: :class:`MapList`
        """

    def every_map(self, test: object) -> bool:
        """
        every_map(self, test)

        :param self: :class:`UnionMap`
        :param test: callback(map)
        :return: bool
        """

    def remove_map_if(self, fn: object) -> object:
        """
        remove_map_if(self, fn)

        :param self: :class:`UnionMap`
        :param fn: callback(map)
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def contains(self, space: Space) -> bool:
        """
        contains(self, space)

        :param self: :class:`UnionMap`
        :param space: :class:`Space`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def extract_map(self, space: Space) -> object:
        """
        extract_map(self, space)

        :param self: :class:`UnionMap`
        :param space: :class:`Space`
        :return: :class:`Map`
        """

    def isa_map(self) -> bool:
        """
        isa_map(self)

        :param self: :class:`UnionMap`
        :return: bool
        """

    def as_map(self) -> object:
        """
        as_map(self)

        :param self: :class:`UnionMap`
        :return: :class:`Map`
        """

    def sample(self) -> object:
        """
        sample(self)

        :param self: :class:`UnionMap`
        :return: :class:`BasicMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def fixed_power_val(self, exp: object) -> object:
        """
        fixed_power_val(self, exp)

        :param self: :class:`UnionMap`
        :param exp: :class:`Val`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def power(self) -> object:
        """
        power(self)

        :param self: :class:`UnionMap`
        :return: tuple: (:class:`UnionMap`, exact (Bool))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def transitive_closure(self) -> object:
        """
        transitive_closure(self)

        :param self: :class:`UnionMap`
        :return: tuple: (:class:`UnionMap`, exact (Bool))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_lt_union_map(self, umap2: UnionMap) -> object:
        """
        lex_lt_union_map(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_le_union_map(self, umap2: UnionMap) -> object:
        """
        lex_le_union_map(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_gt_union_map(self, umap2: UnionMap) -> object:
        """
        lex_gt_union_map(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_ge_union_map(self, umap2: UnionMap) -> object:
        """
        lex_ge_union_map(self, umap2)

        :param self: :class:`UnionMap`
        :param umap2: :class:`UnionMap`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def eq_at_multi_union_pw_aff(self, mupa: MultiUnionPwAff) -> object:
        """
        eq_at_multi_union_pw_aff(self, mupa)

        :param self: :class:`UnionMap`
        :param mupa: :class:`MultiUnionPwAff`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_le_at_multi_union_pw_aff(self, mupa: MultiUnionPwAff) -> object:
        """
        lex_le_at_multi_union_pw_aff(self, mupa)

        :param self: :class:`UnionMap`
        :param mupa: :class:`MultiUnionPwAff`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_lt_at_multi_union_pw_aff(self, mupa: MultiUnionPwAff) -> object:
        """
        lex_lt_at_multi_union_pw_aff(self, mupa)

        :param self: :class:`UnionMap`
        :param mupa: :class:`MultiUnionPwAff`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_ge_at_multi_union_pw_aff(self, mupa: MultiUnionPwAff) -> object:
        """
        lex_ge_at_multi_union_pw_aff(self, mupa)

        :param self: :class:`UnionMap`
        :param mupa: :class:`MultiUnionPwAff`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_gt_at_multi_union_pw_aff(self, mupa: MultiUnionPwAff) -> object:
        """
        lex_gt_at_multi_union_pw_aff(self, mupa)

        :param self: :class:`UnionMap`
        :param mupa: :class:`MultiUnionPwAff`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`UnionMap`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`UnionMap`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def wrap(self) -> object:
        """
        wrap(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionSet`
        """

    def zip(self) -> object:
        """
        zip(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def curry(self) -> object:
        """
        curry(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def range_curry(self) -> object:
        """
        range_curry(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def uncurry(self) -> object:
        """
        uncurry(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMap`
        """

    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`UnionMap`
        :param model: :class:`Space`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`UnionMap`
        :return: :class:`UnionMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def compute_flow(self, must_source: UnionMap, may_source: UnionMap, schedule: UnionMap) -> object:
        """
        compute_flow(self, must_source, may_source, schedule)

        :param self: :class:`UnionMap`
        :param must_source: :class:`UnionMap`
        :param may_source: :class:`UnionMap`
        :param schedule: :class:`UnionMap`
        :return: tuple: (must_dep (:class:`UnionMap`), may_dep (:class:`UnionMap`), must_no_source (:class:`UnionMap`), may_no_source (:class:`UnionMap`))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class UnionMapList:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`UnionMapList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_union_map(el: UnionMap) -> object:
        """
        from_union_map(el)

        :param el: :class:`UnionMap`
        :return: :class:`UnionMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`UnionMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`UnionMapList`
        :return: :class:`UnionMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: UnionMap) -> object:
        """
        add(self, el)

        :param self: :class:`UnionMapList`
        :param el: :class:`UnionMap`
        :return: :class:`UnionMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert(self, pos: int, el: UnionMap) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`UnionMapList`
        :param pos: :class:`unsigned`
        :param el: :class:`UnionMap`
        :return: :class:`UnionMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`UnionMapList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`UnionMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`UnionMapList`
        :return: :class:`UnionMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`UnionMapList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`UnionMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`UnionMapList`
        :return: :class:`UnionMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: UnionMapList) -> object:
        """
        concat(self, list2)

        :param self: :class:`UnionMapList`
        :param list2: :class:`UnionMapList`
        :return: :class:`UnionMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`UnionMapList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_union_map(self) -> int:
        """
        n_union_map(self)

        :param self: :class:`UnionMapList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`UnionMapList`
        :param index: :class:`int`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_union_map(self, index: int) -> object:
        """
        get_union_map(self, index)

        :param self: :class:`UnionMapList`
        :param index: :class:`int`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: UnionMap) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`UnionMapList`
        :param index: :class:`int`
        :param el: :class:`UnionMap`
        :return: :class:`UnionMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_union_map(self, index: int, el: UnionMap) -> object:
        """
        set_union_map(self, index, el)

        :param self: :class:`UnionMapList`
        :param index: :class:`int`
        :param el: :class:`UnionMap`
        :return: :class:`UnionMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`UnionMapList`
        :param fn: callback(el)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`UnionMapList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`UnionMapList`
        :param fn: callback(el)
        :return: :class:`UnionMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`UnionMapList`
        :param cmp: callback(a, b)
        :return: :class:`UnionMapList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`UnionMapList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`UnionMapList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class UnionPwAff:
    @overload
    def __init__(self, arg: Aff, /) -> None: ...

    @overload
    def __init__(self, arg: PwAff, /) -> None: ...

    @overload
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    @staticmethod
    def param_on_domain_id(domain: UnionSet, id: Id) -> object:
        """
        param_on_domain_id(domain, id)

        :param domain: :class:`UnionSet`
        :param id: :class:`Id`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`UnionPwAff`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`UnionPwAff`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`UnionPwAff`
        :return: :class:`Space`
        """

    def get_pw_aff_list(self) -> object:
        """
        get_pw_aff_list(self)

        :param self: :class:`UnionPwAff`
        :return: :class:`PwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`UnionPwAff`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_name(self, type: dim_type, pos: int, s: str) -> object:
        """
        set_dim_name(self, type, pos, s)

        :param self: :class:`UnionPwAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param s: string
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`UnionPwAff`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_dims(self, type, first, n)

        :param self: :class:`UnionPwAff`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`UnionPwAff`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def empty_ctx(ctx: Context) -> object:
        """
        empty_ctx(ctx)

        :param ctx: :class:`Context`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def empty_space(space: Space) -> object:
        """
        empty_space(space)

        :param space: :class:`Space`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def empty(space: Space) -> object:
        """
        empty(space)

        :param space: :class:`Space`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_aff(aff: Aff) -> object:
        """
        from_aff(aff)

        :param aff: :class:`Aff`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_pw_aff(pa: PwAff) -> object:
        """
        from_pw_aff(pa)

        :param pa: :class:`PwAff`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def val_on_domain(domain: UnionSet, v: object) -> object:
        """
        val_on_domain(domain, v)

        :param domain: :class:`UnionSet`
        :param v: :class:`Val`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def aff_on_domain(domain: UnionSet, aff: Aff) -> object:
        """
        aff_on_domain(domain, aff)

        :param domain: :class:`UnionSet`
        :param aff: :class:`Aff`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def pw_aff_on_domain(domain: UnionSet, pa: PwAff) -> object:
        """
        pw_aff_on_domain(domain, pa)

        :param domain: :class:`UnionSet`
        :param pa: :class:`PwAff`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_pw_aff(self, pa: PwAff) -> object:
        """
        add_pw_aff(self, pa)

        :param self: :class:`UnionPwAff`
        :param pa: :class:`PwAff`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_pw_aff(self) -> int:
        """
        n_pw_aff(self)

        :param self: :class:`UnionPwAff`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_pw_aff(self, fn: object) -> stat:
        """
        foreach_pw_aff(self, fn)

        :param self: :class:`UnionPwAff`
        :param fn: callback(pa)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def every_pw_aff(self, test: object) -> bool:
        """
        every_pw_aff(self, test)

        :param self: :class:`UnionPwAff`
        :param test: callback(pa)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def extract_pw_aff(self, space: Space) -> object:
        """
        extract_pw_aff(self, space)

        :param self: :class:`UnionPwAff`
        :param space: :class:`Space`
        :return: :class:`PwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_nan(self) -> bool:
        """
        involves_nan(self)

        :param self: :class:`UnionPwAff`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_is_equal(self, upa2: UnionPwAff) -> bool:
        """
        plain_is_equal(self, upa2)

        :param self: :class:`UnionPwAff`
        :param upa2: :class:`UnionPwAff`
        :return: bool
        """

    def domain(self) -> object:
        """
        domain(self)

        :param self: :class:`UnionPwAff`
        :return: :class:`UnionSet`
        """

    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`UnionPwAff`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, upa2: UnionPwAff) -> object:
        """
        add(self, upa2)

        :param self: :class:`UnionPwAff`
        :param upa2: :class:`UnionPwAff`
        :return: :class:`UnionPwAff`
        """

    def union_add(self, upa2: UnionPwAff) -> object:
        """
        union_add(self, upa2)

        :param self: :class:`UnionPwAff`
        :param upa2: :class:`UnionPwAff`
        :return: :class:`UnionPwAff`
        """

    def sub(self, upa2: UnionPwAff) -> object:
        """
        sub(self, upa2)

        :param self: :class:`UnionPwAff`
        :param upa2: :class:`UnionPwAff`
        :return: :class:`UnionPwAff`
        """

    def coalesce(self) -> object:
        """
        coalesce(self)

        :param self: :class:`UnionPwAff`
        :return: :class:`UnionPwAff`
        """

    def gist(self, context: UnionSet) -> object:
        """
        gist(self, context)

        :param self: :class:`UnionPwAff`
        :param context: :class:`UnionSet`
        :return: :class:`UnionPwAff`
        """

    def gist_params(self, context: Set) -> object:
        """
        gist_params(self, context)

        :param self: :class:`UnionPwAff`
        :param context: :class:`Set`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def pullback_union_pw_multi_aff(self, upma: UnionPwMultiAff) -> object:
        """
        pullback_union_pw_multi_aff(self, upma)

        :param self: :class:`UnionPwAff`
        :param upma: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def floor(self) -> object:
        """
        floor(self)

        :param self: :class:`UnionPwAff`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_val(self, v: object) -> object:
        """
        scale_val(self, v)

        :param self: :class:`UnionPwAff`
        :param v: :class:`Val`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_down_val(self, v: object) -> object:
        """
        scale_down_val(self, v)

        :param self: :class:`UnionPwAff`
        :param v: :class:`Val`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def mod_val(self, f: object) -> object:
        """
        mod_val(self, f)

        :param self: :class:`UnionPwAff`
        :param f: :class:`Val`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`UnionPwAff`
        :param model: :class:`Space`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_unused_params(self) -> object:
        """
        drop_unused_params(self)

        :param self: :class:`UnionPwAff`
        :return: :class:`UnionPwAff`
        """

    def intersect_params(self, set: Set) -> object:
        """
        intersect_params(self, set)

        :param self: :class:`UnionPwAff`
        :param set: :class:`Set`
        :return: :class:`UnionPwAff`
        """

    def intersect_domain_space(self, space: Space) -> object:
        """
        intersect_domain_space(self, space)

        :param self: :class:`UnionPwAff`
        :param space: :class:`Space`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain_union_set(self, uset: UnionSet) -> object:
        """
        intersect_domain_union_set(self, uset)

        :param self: :class:`UnionPwAff`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain(self, uset: UnionSet) -> object:
        """
        intersect_domain(self, uset)

        :param self: :class:`UnionPwAff`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain_wrapped_domain(self, uset: UnionSet) -> object:
        """
        intersect_domain_wrapped_domain(self, uset)

        :param self: :class:`UnionPwAff`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwAff`
        """

    def intersect_domain_wrapped_range(self, uset: UnionSet) -> object:
        """
        intersect_domain_wrapped_range(self, uset)

        :param self: :class:`UnionPwAff`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwAff`
        """

    def subtract_domain_union_set(self, uset: UnionSet) -> object:
        """
        subtract_domain_union_set(self, uset)

        :param self: :class:`UnionPwAff`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def subtract_domain_space(self, space: Space) -> object:
        """
        subtract_domain_space(self, space)

        :param self: :class:`UnionPwAff`
        :param space: :class:`Space`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def subtract_domain(self, uset: UnionSet) -> object:
        """
        subtract_domain(self, uset)

        :param self: :class:`UnionPwAff`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def zero_union_set(self) -> object:
        """
        zero_union_set(self)

        :param self: :class:`UnionPwAff`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def bind_id(self, id: Id) -> object:
        """
        bind_id(self, id)

        :param self: :class:`UnionPwAff`
        :param id: :class:`Id`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`UnionPwAff`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`UnionPwAff`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`UnionPwAff`
        :return: :class:`UnionPwAffList`
        """

    def min_val(self) -> object:
        """
        min_val(self)

        :param self: :class:`UnionPwAff`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def max_val(self) -> object:
        """
        max_val(self)

        :param self: :class:`UnionPwAff`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class UnionPwAffList:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`UnionPwAffList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_union_pw_aff(el: UnionPwAff) -> object:
        """
        from_union_pw_aff(el)

        :param el: :class:`UnionPwAff`
        :return: :class:`UnionPwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`UnionPwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`UnionPwAffList`
        :return: :class:`UnionPwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: UnionPwAff) -> object:
        """
        add(self, el)

        :param self: :class:`UnionPwAffList`
        :param el: :class:`UnionPwAff`
        :return: :class:`UnionPwAffList`
        """

    def insert(self, pos: int, el: UnionPwAff) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`UnionPwAffList`
        :param pos: :class:`unsigned`
        :param el: :class:`UnionPwAff`
        :return: :class:`UnionPwAffList`
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`UnionPwAffList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`UnionPwAffList`
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`UnionPwAffList`
        :return: :class:`UnionPwAffList`
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`UnionPwAffList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`UnionPwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`UnionPwAffList`
        :return: :class:`UnionPwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: UnionPwAffList) -> object:
        """
        concat(self, list2)

        :param self: :class:`UnionPwAffList`
        :param list2: :class:`UnionPwAffList`
        :return: :class:`UnionPwAffList`
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`UnionPwAffList`
        :return: isl_size
        """

    def n_union_pw_aff(self) -> int:
        """
        n_union_pw_aff(self)

        :param self: :class:`UnionPwAffList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`UnionPwAffList`
        :param index: :class:`int`
        :return: :class:`UnionPwAff`
        """

    def get_union_pw_aff(self, index: int) -> object:
        """
        get_union_pw_aff(self, index)

        :param self: :class:`UnionPwAffList`
        :param index: :class:`int`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: UnionPwAff) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`UnionPwAffList`
        :param index: :class:`int`
        :param el: :class:`UnionPwAff`
        :return: :class:`UnionPwAffList`
        """

    def set_union_pw_aff(self, index: int, el: UnionPwAff) -> object:
        """
        set_union_pw_aff(self, index, el)

        :param self: :class:`UnionPwAffList`
        :param index: :class:`int`
        :param el: :class:`UnionPwAff`
        :return: :class:`UnionPwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`UnionPwAffList`
        :param fn: callback(el)
        :return: isl_stat
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`UnionPwAffList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`UnionPwAffList`
        :param fn: callback(el)
        :return: :class:`UnionPwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`UnionPwAffList`
        :param cmp: callback(a, b)
        :return: :class:`UnionPwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`UnionPwAffList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`UnionPwAffList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`UnionPwAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class UnionPwMultiAff:
    @overload
    def __init__(self, arg: PwMultiAff, /) -> None: ...

    @overload
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    @staticmethod
    def empty_ctx(ctx: Context) -> object:
        """
        empty_ctx(ctx)

        :param ctx: :class:`Context`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def empty_space(space: Space) -> object:
        """
        empty_space(space)

        :param space: :class:`Space`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def empty(space: Space) -> object:
        """
        empty(space)

        :param space: :class:`Space`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_aff(aff: Aff) -> object:
        """
        from_aff(aff)

        :param aff: :class:`Aff`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_multi_aff(ma: MultiAff) -> object:
        """
        from_multi_aff(ma)

        :param ma: :class:`MultiAff`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_pw_multi_aff(pma: PwMultiAff) -> object:
        """
        from_pw_multi_aff(pma)

        :param pma: :class:`PwMultiAff`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_domain(uset: UnionSet) -> object:
        """
        from_domain(uset)

        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def multi_val_on_domain(domain: UnionSet, mv: MultiVal) -> object:
        """
        multi_val_on_domain(domain, mv)

        :param domain: :class:`UnionSet`
        :param mv: :class:`MultiVal`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_union_pw_aff(self, pos: int) -> object:
        """
        get_union_pw_aff(self, pos)

        :param self: :class:`UnionPwMultiAff`
        :param pos: :class:`int`
        :return: :class:`UnionPwAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_pw_multi_aff(self, pma: PwMultiAff) -> object:
        """
        add_pw_multi_aff(self, pma)

        :param self: :class:`UnionPwMultiAff`
        :param pma: :class:`PwMultiAff`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`UnionPwMultiAff`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`UnionPwMultiAff`
        :return: :class:`Space`
        """

    def get_pw_multi_aff_list(self) -> object:
        """
        get_pw_multi_aff_list(self)

        :param self: :class:`UnionPwMultiAff`
        :return: :class:`PwMultiAffList`
        """

    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`UnionPwMultiAff`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_name(self, type: dim_type, pos: int, s: str) -> object:
        """
        set_dim_name(self, type, pos, s)

        :param self: :class:`UnionPwMultiAff`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param s: string
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`UnionPwMultiAff`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_dims(self, type, first, n)

        :param self: :class:`UnionPwMultiAff`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def coalesce(self) -> object:
        """
        coalesce(self)

        :param self: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAff`
        """

    def gist_params(self, context: Set) -> object:
        """
        gist_params(self, context)

        :param self: :class:`UnionPwMultiAff`
        :param context: :class:`Set`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gist(self, context: UnionSet) -> object:
        """
        gist(self, context)

        :param self: :class:`UnionPwMultiAff`
        :param context: :class:`UnionSet`
        :return: :class:`UnionPwMultiAff`
        """

    def pullback_union_pw_multi_aff(self, upma2: UnionPwMultiAff) -> object:
        """
        pullback_union_pw_multi_aff(self, upma2)

        :param self: :class:`UnionPwMultiAff`
        :param upma2: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def apply_union_pw_multi_aff(self, upma2: UnionPwMultiAff) -> object:
        """
        apply_union_pw_multi_aff(self, upma2)

        :param self: :class:`UnionPwMultiAff`
        :param upma2: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def preimage_domain_wrapped_domain_union_pw_multi_aff(self, upma2: UnionPwMultiAff) -> object:
        """
        preimage_domain_wrapped_domain_union_pw_multi_aff(self, upma2)

        :param self: :class:`UnionPwMultiAff`
        :param upma2: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`UnionPwMultiAff`
        :param model: :class:`Space`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_unused_params(self) -> object:
        """
        drop_unused_params(self)

        :param self: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAff`
        """

    def n_pw_multi_aff(self) -> int:
        """
        n_pw_multi_aff(self)

        :param self: :class:`UnionPwMultiAff`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_pw_multi_aff(self, fn: object) -> stat:
        """
        foreach_pw_multi_aff(self, fn)

        :param self: :class:`UnionPwMultiAff`
        :param fn: callback(pma)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def every_pw_multi_aff(self, test: object) -> bool:
        """
        every_pw_multi_aff(self, test)

        :param self: :class:`UnionPwMultiAff`
        :param test: callback(pma)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def extract_pw_multi_aff(self, space: Space) -> object:
        """
        extract_pw_multi_aff(self, space)

        :param self: :class:`UnionPwMultiAff`
        :param space: :class:`Space`
        :return: :class:`PwMultiAff`
        """

    def isa_pw_multi_aff(self) -> bool:
        """
        isa_pw_multi_aff(self)

        :param self: :class:`UnionPwMultiAff`
        :return: bool
        """

    def as_pw_multi_aff(self) -> object:
        """
        as_pw_multi_aff(self)

        :param self: :class:`UnionPwMultiAff`
        :return: :class:`PwMultiAff`
        """

    def plain_is_empty(self) -> bool:
        """
        plain_is_empty(self)

        :param self: :class:`UnionPwMultiAff`
        :return: bool
        """

    def involves_locals(self) -> bool:
        """
        involves_locals(self)

        :param self: :class:`UnionPwMultiAff`
        :return: bool
        """

    def involves_nan(self) -> bool:
        """
        involves_nan(self)

        :param self: :class:`UnionPwMultiAff`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_is_equal(self, upma2: UnionPwMultiAff) -> bool:
        """
        plain_is_equal(self, upma2)

        :param self: :class:`UnionPwMultiAff`
        :param upma2: :class:`UnionPwMultiAff`
        :return: bool
        """

    def domain(self) -> object:
        """
        domain(self)

        :param self: :class:`UnionPwMultiAff`
        :return: :class:`UnionSet`
        """

    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, upma2: UnionPwMultiAff) -> object:
        """
        add(self, upma2)

        :param self: :class:`UnionPwMultiAff`
        :param upma2: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAff`
        """

    def union_add(self, upma2: UnionPwMultiAff) -> object:
        """
        union_add(self, upma2)

        :param self: :class:`UnionPwMultiAff`
        :param upma2: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAff`
        """

    def sub(self, upma2: UnionPwMultiAff) -> object:
        """
        sub(self, upma2)

        :param self: :class:`UnionPwMultiAff`
        :param upma2: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAff`
        """

    def scale_val(self, val: object) -> object:
        """
        scale_val(self, val)

        :param self: :class:`UnionPwMultiAff`
        :param val: :class:`Val`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_down_val(self, val: object) -> object:
        """
        scale_down_val(self, val)

        :param self: :class:`UnionPwMultiAff`
        :param val: :class:`Val`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_multi_val(self, mv: MultiVal) -> object:
        """
        scale_multi_val(self, mv)

        :param self: :class:`UnionPwMultiAff`
        :param mv: :class:`MultiVal`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def range_product(self, upma2: UnionPwMultiAff) -> object:
        """
        range_product(self, upma2)

        :param self: :class:`UnionPwMultiAff`
        :param upma2: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAff`
        """

    def flat_range_product(self, upma2: UnionPwMultiAff) -> object:
        """
        flat_range_product(self, upma2)

        :param self: :class:`UnionPwMultiAff`
        :param upma2: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAff`
        """

    def range_factor_domain(self) -> object:
        """
        range_factor_domain(self)

        :param self: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAff`
        """

    def range_factor_range(self) -> object:
        """
        range_factor_range(self)

        :param self: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAff`
        """

    def intersect_params(self, set: Set) -> object:
        """
        intersect_params(self, set)

        :param self: :class:`UnionPwMultiAff`
        :param set: :class:`Set`
        :return: :class:`UnionPwMultiAff`
        """

    def intersect_domain_union_set(self, uset: UnionSet) -> object:
        """
        intersect_domain_union_set(self, uset)

        :param self: :class:`UnionPwMultiAff`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain(self, uset: UnionSet) -> object:
        """
        intersect_domain(self, uset)

        :param self: :class:`UnionPwMultiAff`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain_space(self, space: Space) -> object:
        """
        intersect_domain_space(self, space)

        :param self: :class:`UnionPwMultiAff`
        :param space: :class:`Space`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain_wrapped_domain(self, uset: UnionSet) -> object:
        """
        intersect_domain_wrapped_domain(self, uset)

        :param self: :class:`UnionPwMultiAff`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwMultiAff`
        """

    def intersect_domain_wrapped_range(self, uset: UnionSet) -> object:
        """
        intersect_domain_wrapped_range(self, uset)

        :param self: :class:`UnionPwMultiAff`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwMultiAff`
        """

    def subtract_domain_union_set(self, uset: UnionSet) -> object:
        """
        subtract_domain_union_set(self, uset)

        :param self: :class:`UnionPwMultiAff`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def subtract_domain_space(self, space: Space) -> object:
        """
        subtract_domain_space(self, space)

        :param self: :class:`UnionPwMultiAff`
        :param space: :class:`Space`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def subtract_domain(self, uset: UnionSet) -> object:
        """
        subtract_domain(self, uset)

        :param self: :class:`UnionPwMultiAff`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def as_union_map(self) -> object:
        """
        as_union_map(self)

        :param self: :class:`UnionPwMultiAff`
        :return: :class:`UnionMap`
        """

    @staticmethod
    def from_union_set(uset: UnionSet) -> object:
        """
        from_union_set(uset)

        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_union_map(umap: UnionMap) -> object:
        """
        from_union_map(umap)

        :param umap: :class:`UnionMap`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`UnionPwMultiAff`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`UnionPwMultiAff`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_union_pw_aff(upa: UnionPwAff) -> object:
        """
        from_union_pw_aff(upa)

        :param upa: :class:`UnionPwAff`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_multi_union_pw_aff(mupa: MultiUnionPwAff) -> object:
        """
        from_multi_union_pw_aff(mupa)

        :param mupa: :class:`MultiUnionPwAff`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def as_multi_union_pw_aff(self) -> object:
        """
        as_multi_union_pw_aff(self)

        :param self: :class:`UnionPwMultiAff`
        :return: :class:`MultiUnionPwAff`
        """

    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class UnionPwMultiAffList:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`UnionPwMultiAffList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_union_pw_multi_aff(el: UnionPwMultiAff) -> object:
        """
        from_union_pw_multi_aff(el)

        :param el: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`UnionPwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`UnionPwMultiAffList`
        :return: :class:`UnionPwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: UnionPwMultiAff) -> object:
        """
        add(self, el)

        :param self: :class:`UnionPwMultiAffList`
        :param el: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert(self, pos: int, el: UnionPwMultiAff) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`UnionPwMultiAffList`
        :param pos: :class:`unsigned`
        :param el: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`UnionPwMultiAffList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`UnionPwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`UnionPwMultiAffList`
        :return: :class:`UnionPwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`UnionPwMultiAffList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`UnionPwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`UnionPwMultiAffList`
        :return: :class:`UnionPwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: UnionPwMultiAffList) -> object:
        """
        concat(self, list2)

        :param self: :class:`UnionPwMultiAffList`
        :param list2: :class:`UnionPwMultiAffList`
        :return: :class:`UnionPwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`UnionPwMultiAffList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_union_pw_multi_aff(self) -> int:
        """
        n_union_pw_multi_aff(self)

        :param self: :class:`UnionPwMultiAffList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`UnionPwMultiAffList`
        :param index: :class:`int`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_union_pw_multi_aff(self, index: int) -> object:
        """
        get_union_pw_multi_aff(self, index)

        :param self: :class:`UnionPwMultiAffList`
        :param index: :class:`int`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: UnionPwMultiAff) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`UnionPwMultiAffList`
        :param index: :class:`int`
        :param el: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_union_pw_multi_aff(self, index: int, el: UnionPwMultiAff) -> object:
        """
        set_union_pw_multi_aff(self, index, el)

        :param self: :class:`UnionPwMultiAffList`
        :param index: :class:`int`
        :param el: :class:`UnionPwMultiAff`
        :return: :class:`UnionPwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`UnionPwMultiAffList`
        :param fn: callback(el)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`UnionPwMultiAffList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`UnionPwMultiAffList`
        :param fn: callback(el)
        :return: :class:`UnionPwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`UnionPwMultiAffList`
        :param cmp: callback(a, b)
        :return: :class:`UnionPwMultiAffList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`UnionPwMultiAffList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`UnionPwMultiAffList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class UnionPwQPolynomial:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`UnionPwQPolynomial`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`UnionPwQPolynomial`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_nan(self) -> bool:
        """
        involves_nan(self)

        :param self: :class:`UnionPwQPolynomial`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_is_equal(self, upwqp2: UnionPwQPolynomial) -> bool:
        """
        plain_is_equal(self, upwqp2)

        :param self: :class:`UnionPwQPolynomial`
        :param upwqp2: :class:`UnionPwQPolynomial`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_pw_qpolynomial(pwqp: PwQPolynomial) -> object:
        """
        from_pw_qpolynomial(pwqp)

        :param pwqp: :class:`PwQPolynomial`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def zero_ctx(ctx: Context) -> object:
        """
        zero_ctx(ctx)

        :param ctx: :class:`Context`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def zero_space(space: Space) -> object:
        """
        zero_space(space)

        :param space: :class:`Space`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def zero(space: Space) -> object:
        """
        zero(space)

        :param space: :class:`Space`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_pw_qpolynomial(self, pwqp: PwQPolynomial) -> object:
        """
        add_pw_qpolynomial(self, pwqp)

        :param self: :class:`UnionPwQPolynomial`
        :param pwqp: :class:`PwQPolynomial`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`UnionPwQPolynomial`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`UnionPwQPolynomial`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`UnionPwQPolynomial`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, upwqp2: UnionPwQPolynomial) -> object:
        """
        add(self, upwqp2)

        :param self: :class:`UnionPwQPolynomial`
        :param upwqp2: :class:`UnionPwQPolynomial`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sub(self, upwqp2: UnionPwQPolynomial) -> object:
        """
        sub(self, upwqp2)

        :param self: :class:`UnionPwQPolynomial`
        :param upwqp2: :class:`UnionPwQPolynomial`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def mul(self, upwqp2: UnionPwQPolynomial) -> object:
        """
        mul(self, upwqp2)

        :param self: :class:`UnionPwQPolynomial`
        :param upwqp2: :class:`UnionPwQPolynomial`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_val(self, v: object) -> object:
        """
        scale_val(self, v)

        :param self: :class:`UnionPwQPolynomial`
        :param v: :class:`Val`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_down_val(self, v: object) -> object:
        """
        scale_down_val(self, v)

        :param self: :class:`UnionPwQPolynomial`
        :param v: :class:`Val`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def domain(self) -> object:
        """
        domain(self)

        :param self: :class:`UnionPwQPolynomial`
        :return: :class:`UnionSet`
        """

    def intersect_domain_space(self, space: Space) -> object:
        """
        intersect_domain_space(self, space)

        :param self: :class:`UnionPwQPolynomial`
        :param space: :class:`Space`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain_union_set(self, uset: UnionSet) -> object:
        """
        intersect_domain_union_set(self, uset)

        :param self: :class:`UnionPwQPolynomial`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain(self, uset: UnionSet) -> object:
        """
        intersect_domain(self, uset)

        :param self: :class:`UnionPwQPolynomial`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain_wrapped_domain(self, uset: UnionSet) -> object:
        """
        intersect_domain_wrapped_domain(self, uset)

        :param self: :class:`UnionPwQPolynomial`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain_wrapped_range(self, uset: UnionSet) -> object:
        """
        intersect_domain_wrapped_range(self, uset)

        :param self: :class:`UnionPwQPolynomial`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_params(self, set: Set) -> object:
        """
        intersect_params(self, set)

        :param self: :class:`UnionPwQPolynomial`
        :param set: :class:`Set`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def subtract_domain_union_set(self, uset: UnionSet) -> object:
        """
        subtract_domain_union_set(self, uset)

        :param self: :class:`UnionPwQPolynomial`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def subtract_domain_space(self, space: Space) -> object:
        """
        subtract_domain_space(self, space)

        :param self: :class:`UnionPwQPolynomial`
        :param space: :class:`Space`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def subtract_domain(self, uset: UnionSet) -> object:
        """
        subtract_domain(self, uset)

        :param self: :class:`UnionPwQPolynomial`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`UnionPwQPolynomial`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_pw_qpolynomial_list(self) -> object:
        """
        get_pw_qpolynomial_list(self)

        :param self: :class:`UnionPwQPolynomial`
        :return: :class:`PwQPolynomialList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_name(self, type: dim_type, pos: int, s: str) -> object:
        """
        set_dim_name(self, type, pos, s)

        :param self: :class:`UnionPwQPolynomial`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param s: string
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`UnionPwQPolynomial`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def domain_reverse(self) -> object:
        """
        domain_reverse(self)

        :param self: :class:`UnionPwQPolynomial`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_dims(self, type, first, n)

        :param self: :class:`UnionPwQPolynomial`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`UnionPwQPolynomial`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def eval(self, pnt: Point) -> object:
        """
        eval(self, pnt)

        :param self: :class:`UnionPwQPolynomial`
        :param pnt: :class:`Point`
        :return: :class:`Val`
        """

    def coalesce(self) -> object:
        """
        coalesce(self)

        :param self: :class:`UnionPwQPolynomial`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gist(self, context: UnionSet) -> object:
        """
        gist(self, context)

        :param self: :class:`UnionPwQPolynomial`
        :param context: :class:`UnionSet`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gist_params(self, context: Set) -> object:
        """
        gist_params(self, context)

        :param self: :class:`UnionPwQPolynomial`
        :param context: :class:`Set`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`UnionPwQPolynomial`
        :param model: :class:`Space`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_unused_params(self) -> object:
        """
        drop_unused_params(self)

        :param self: :class:`UnionPwQPolynomial`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_pw_qpolynomial(self) -> int:
        """
        n_pw_qpolynomial(self)

        :param self: :class:`UnionPwQPolynomial`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_pw_qpolynomial(self, fn: object) -> stat:
        """
        foreach_pw_qpolynomial(self, fn)

        :param self: :class:`UnionPwQPolynomial`
        :param fn: callback(pwqp)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def every_pw_qpolynomial(self, test: object) -> bool:
        """
        every_pw_qpolynomial(self, test)

        :param self: :class:`UnionPwQPolynomial`
        :param test: callback(pwqp)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def extract_pw_qpolynomial(self, space: Space) -> object:
        """
        extract_pw_qpolynomial(self, space)

        :param self: :class:`UnionPwQPolynomial`
        :param space: :class:`Space`
        :return: :class:`PwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def bound(self, type: fold) -> object:
        """
        bound(self, type)

        :param self: :class:`UnionPwQPolynomial`
        :param type: :class:`fold`
        :return: tuple: (:class:`UnionPwQPolynomialFold`, tight (Bool))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_polynomial(self, sign: int) -> object:
        """
        to_polynomial(self, sign)

        :param self: :class:`UnionPwQPolynomial`
        :param sign: :class:`int`
        :return: :class:`UnionPwQPolynomial`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class UnionPwQPolynomialFold:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`UnionPwQPolynomialFold`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`UnionPwQPolynomialFold`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def involves_nan(self) -> bool:
        """
        involves_nan(self)

        :param self: :class:`UnionPwQPolynomialFold`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def plain_is_equal(self, upwf2: UnionPwQPolynomialFold) -> bool:
        """
        plain_is_equal(self, upwf2)

        :param self: :class:`UnionPwQPolynomialFold`
        :param upwf2: :class:`UnionPwQPolynomialFold`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_pw_qpolynomial_fold(pwf: PwQPolynomialFold) -> object:
        """
        from_pw_qpolynomial_fold(pwf)

        :param pwf: :class:`PwQPolynomialFold`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def zero_ctx(ctx: Context, type: fold) -> object:
        """
        zero_ctx(ctx, type)

        :param ctx: :class:`Context`
        :param type: :class:`fold`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def zero_space(space: Space, type: fold) -> object:
        """
        zero_space(space, type)

        :param space: :class:`Space`
        :param type: :class:`fold`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def zero(space: Space, type: fold) -> object:
        """
        zero(space, type)

        :param space: :class:`Space`
        :param type: :class:`fold`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def fold_pw_qpolynomial_fold(self, pwqp: PwQPolynomialFold) -> object:
        """
        fold_pw_qpolynomial_fold(self, pwqp)

        :param self: :class:`UnionPwQPolynomialFold`
        :param pwqp: :class:`PwQPolynomialFold`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`UnionPwQPolynomialFold`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def fold(self, upwf2: UnionPwQPolynomialFold) -> object:
        """
        fold(self, upwf2)

        :param self: :class:`UnionPwQPolynomialFold`
        :param upwf2: :class:`UnionPwQPolynomialFold`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_union_pw_qpolynomial(self, upwqp: UnionPwQPolynomial) -> object:
        """
        add_union_pw_qpolynomial(self, upwqp)

        :param self: :class:`UnionPwQPolynomialFold`
        :param upwqp: :class:`UnionPwQPolynomial`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_val(self, v: object) -> object:
        """
        scale_val(self, v)

        :param self: :class:`UnionPwQPolynomialFold`
        :param v: :class:`Val`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def scale_down_val(self, v: object) -> object:
        """
        scale_down_val(self, v)

        :param self: :class:`UnionPwQPolynomialFold`
        :param v: :class:`Val`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def domain(self) -> object:
        """
        domain(self)

        :param self: :class:`UnionPwQPolynomialFold`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain_space(self, space: Space) -> object:
        """
        intersect_domain_space(self, space)

        :param self: :class:`UnionPwQPolynomialFold`
        :param space: :class:`Space`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain_union_set(self, uset: UnionSet) -> object:
        """
        intersect_domain_union_set(self, uset)

        :param self: :class:`UnionPwQPolynomialFold`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain(self, uset: UnionSet) -> object:
        """
        intersect_domain(self, uset)

        :param self: :class:`UnionPwQPolynomialFold`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain_wrapped_domain(self, uset: UnionSet) -> object:
        """
        intersect_domain_wrapped_domain(self, uset)

        :param self: :class:`UnionPwQPolynomialFold`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_domain_wrapped_range(self, uset: UnionSet) -> object:
        """
        intersect_domain_wrapped_range(self, uset)

        :param self: :class:`UnionPwQPolynomialFold`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def intersect_params(self, set: Set) -> object:
        """
        intersect_params(self, set)

        :param self: :class:`UnionPwQPolynomialFold`
        :param set: :class:`Set`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def subtract_domain_union_set(self, uset: UnionSet) -> object:
        """
        subtract_domain_union_set(self, uset)

        :param self: :class:`UnionPwQPolynomialFold`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def subtract_domain_space(self, space: Space) -> object:
        """
        subtract_domain_space(self, space)

        :param self: :class:`UnionPwQPolynomialFold`
        :param space: :class:`Space`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def subtract_domain(self, uset: UnionSet) -> object:
        """
        subtract_domain(self, uset)

        :param self: :class:`UnionPwQPolynomialFold`
        :param uset: :class:`UnionSet`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_type(self) -> fold:
        """
        get_type(self)

        :param self: :class:`UnionPwQPolynomialFold`
        :return: isl_fold 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`UnionPwQPolynomialFold`
        :return: :class:`Space`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_pw_qpolynomial_fold_list(self) -> object:
        """
        get_pw_qpolynomial_fold_list(self)

        :param self: :class:`UnionPwQPolynomialFold`
        :return: :class:`PwQPolynomialFoldList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_dim_name(self, type: dim_type, pos: int, s: str) -> object:
        """
        set_dim_name(self, type, pos, s)

        :param self: :class:`UnionPwQPolynomialFold`
        :param type: :class:`dim_type`
        :param pos: :class:`unsigned`
        :param s: string
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def find_dim_by_name(self, type: dim_type, name: str) -> int:
        """
        find_dim_by_name(self, type, name)

        :param self: :class:`UnionPwQPolynomialFold`
        :param type: :class:`dim_type`
        :param name: string
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_dims(self, type: dim_type, first: int, n: int) -> object:
        """
        drop_dims(self, type, first, n)

        :param self: :class:`UnionPwQPolynomialFold`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`UnionPwQPolynomialFold`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def eval(self, pnt: Point) -> object:
        """
        eval(self, pnt)

        :param self: :class:`UnionPwQPolynomialFold`
        :param pnt: :class:`Point`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def coalesce(self) -> object:
        """
        coalesce(self)

        :param self: :class:`UnionPwQPolynomialFold`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gist(self, context: UnionSet) -> object:
        """
        gist(self, context)

        :param self: :class:`UnionPwQPolynomialFold`
        :param context: :class:`UnionSet`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gist_params(self, context: Set) -> object:
        """
        gist_params(self, context)

        :param self: :class:`UnionPwQPolynomialFold`
        :param context: :class:`Set`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`UnionPwQPolynomialFold`
        :param model: :class:`Space`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_unused_params(self) -> object:
        """
        drop_unused_params(self)

        :param self: :class:`UnionPwQPolynomialFold`
        :return: :class:`UnionPwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_pw_qpolynomial_fold(self) -> int:
        """
        n_pw_qpolynomial_fold(self)

        :param self: :class:`UnionPwQPolynomialFold`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_pw_qpolynomial_fold(self, fn: object) -> stat:
        """
        foreach_pw_qpolynomial_fold(self, fn)

        :param self: :class:`UnionPwQPolynomialFold`
        :param fn: callback(pwf)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def every_pw_qpolynomial_fold(self, test: object) -> bool:
        """
        every_pw_qpolynomial_fold(self, test)

        :param self: :class:`UnionPwQPolynomialFold`
        :param test: callback(pwf)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def extract_pw_qpolynomial_fold(self, space: Space) -> object:
        """
        extract_pw_qpolynomial_fold(self, space)

        :param self: :class:`UnionPwQPolynomialFold`
        :param space: :class:`Space`
        :return: :class:`PwQPolynomialFold`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class UnionSet:
    @overload
    def __init__(self, arg: Set, /) -> None: ...

    @overload
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def identity_union_pw_multi_aff(self) -> object:
        """
        identity_union_pw_multi_aff(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionPwMultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def apply_union_pw_qpolynomial_fold(self, upwf: UnionPwQPolynomialFold) -> object:
        """
        apply_union_pw_qpolynomial_fold(self, upwf)

        :param self: :class:`UnionSet`
        :param upwf: :class:`UnionPwQPolynomialFold`
        :return: tuple: (:class:`UnionPwQPolynomialFold`, tight (Bool))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def wrapped_domain_map(self) -> object:
        """
        wrapped_domain_map(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def identity(self) -> object:
        """
        identity(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionMap`
        """

    def unwrap(self) -> object:
        """
        unwrap(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionMap`
        """

    def align_params(self, model: Space) -> object:
        """
        align_params(self, model)

        :param self: :class:`UnionSet`
        :param model: :class:`Space`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dim(self, type: dim_type) -> int:
        """
        dim(self, type)

        :param self: :class:`UnionSet`
        :param type: :class:`dim_type`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_basic_set(bset: BasicSet) -> object:
        """
        from_basic_set(bset)

        :param bset: :class:`BasicSet`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_set(set: Set) -> object:
        """
        from_set(set)

        :param set: :class:`Set`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def empty_ctx(ctx: Context) -> object:
        """
        empty_ctx(ctx)

        :param ctx: :class:`Context`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def empty_space(space: Space) -> object:
        """
        empty_space(space)

        :param space: :class:`Space`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def empty(space: Space) -> object:
        """
        empty(space)

        :param space: :class:`Space`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`UnionSet`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_space(self) -> object:
        """
        get_space(self)

        :param self: :class:`UnionSet`
        :return: :class:`Space`
        """

    def reset_user(self) -> object:
        """
        reset_user(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def universe(self) -> object:
        """
        universe(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`
        """

    def params(self) -> object:
        """
        params(self)

        :param self: :class:`UnionSet`
        :return: :class:`Set`
        """

    def detect_equalities(self) -> object:
        """
        detect_equalities(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`
        """

    def affine_hull(self) -> object:
        """
        affine_hull(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`
        """

    def polyhedral_hull(self) -> object:
        """
        polyhedral_hull(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`
        """

    def remove_redundancies(self) -> object:
        """
        remove_redundancies(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def simple_hull(self) -> object:
        """
        simple_hull(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def coalesce(self) -> object:
        """
        coalesce(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`
        """

    def compute_divs(self) -> object:
        """
        compute_divs(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`
        """

    def lexmin(self) -> object:
        """
        lexmin(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`
        """

    def lexmax(self) -> object:
        """
        lexmax(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`
        """

    def add_set(self, set: Set) -> object:
        """
        add_set(self, set)

        :param self: :class:`UnionSet`
        :param set: :class:`Set`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def union(self, uset2: UnionSet) -> object:
        """
        union(self, uset2)

        :param self: :class:`UnionSet`
        :param uset2: :class:`UnionSet`
        :return: :class:`UnionSet`
        """

    def subtract(self, uset2: UnionSet) -> object:
        """
        subtract(self, uset2)

        :param self: :class:`UnionSet`
        :param uset2: :class:`UnionSet`
        :return: :class:`UnionSet`
        """

    def intersect(self, uset2: UnionSet) -> object:
        """
        intersect(self, uset2)

        :param self: :class:`UnionSet`
        :param uset2: :class:`UnionSet`
        :return: :class:`UnionSet`
        """

    def intersect_params(self, set: Set) -> object:
        """
        intersect_params(self, set)

        :param self: :class:`UnionSet`
        :param set: :class:`Set`
        :return: :class:`UnionSet`
        """

    def product(self, uset2: UnionSet) -> object:
        """
        product(self, uset2)

        :param self: :class:`UnionSet`
        :param uset2: :class:`UnionSet`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def gist(self, context: UnionSet) -> object:
        """
        gist(self, context)

        :param self: :class:`UnionSet`
        :param context: :class:`UnionSet`
        :return: :class:`UnionSet`
        """

    def gist_params(self, set: Set) -> object:
        """
        gist_params(self, set)

        :param self: :class:`UnionSet`
        :param set: :class:`Set`
        :return: :class:`UnionSet`
        """

    def apply(self, umap: UnionMap) -> object:
        """
        apply(self, umap)

        :param self: :class:`UnionSet`
        :param umap: :class:`UnionMap`
        :return: :class:`UnionSet`
        """

    def preimage_multi_aff(self, ma: MultiAff) -> object:
        """
        preimage_multi_aff(self, ma)

        :param self: :class:`UnionSet`
        :param ma: :class:`MultiAff`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def preimage_pw_multi_aff(self, pma: PwMultiAff) -> object:
        """
        preimage_pw_multi_aff(self, pma)

        :param self: :class:`UnionSet`
        :param pma: :class:`PwMultiAff`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def preimage_union_pw_multi_aff(self, upma: UnionPwMultiAff) -> object:
        """
        preimage_union_pw_multi_aff(self, upma)

        :param self: :class:`UnionSet`
        :param upma: :class:`UnionPwMultiAff`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def project_out(self, type: dim_type, first: int, n: int) -> object:
        """
        project_out(self, type, first, n)

        :param self: :class:`UnionSet`
        :param type: :class:`dim_type`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def project_out_all_params(self) -> object:
        """
        project_out_all_params(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`
        """

    def drop_unused_params(self) -> object:
        """
        drop_unused_params(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`
        """

    def remove_divs(self) -> object:
        """
        remove_divs(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_params(self) -> bool:
        """
        is_params(self)

        :param self: :class:`UnionSet`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_empty(self) -> bool:
        """
        is_empty(self)

        :param self: :class:`UnionSet`
        :return: bool
        """

    def is_subset(self, uset2: UnionSet) -> bool:
        """
        is_subset(self, uset2)

        :param self: :class:`UnionSet`
        :param uset2: :class:`UnionSet`
        :return: bool
        """

    def is_equal(self, uset2: UnionSet) -> bool:
        """
        is_equal(self, uset2)

        :param self: :class:`UnionSet`
        :param uset2: :class:`UnionSet`
        :return: bool
        """

    def is_disjoint(self, uset2: UnionSet) -> bool:
        """
        is_disjoint(self, uset2)

        :param self: :class:`UnionSet`
        :param uset2: :class:`UnionSet`
        :return: bool
        """

    def is_strict_subset(self, uset2: UnionSet) -> bool:
        """
        is_strict_subset(self, uset2)

        :param self: :class:`UnionSet`
        :param uset2: :class:`UnionSet`
        :return: bool
        """

    def __hash__(self) -> int:
        """
        get_hash(self)

        :param self: :class:`UnionSet`
        :return: uint32_t 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_set(self) -> int:
        """
        n_set(self)

        :param self: :class:`UnionSet`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_set(self, fn: object) -> stat:
        """
        foreach_set(self, fn)

        :param self: :class:`UnionSet`
        :param fn: callback(set)
        :return: isl_stat
        """

    def every_set(self, test: object) -> bool:
        """
        every_set(self, test)

        :param self: :class:`UnionSet`
        :param test: callback(set)
        :return: bool
        """

    def get_basic_set_list(self) -> object:
        """
        get_basic_set_list(self)

        :param self: :class:`UnionSet`
        :return: :class:`BasicSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_set_list(self) -> object:
        """
        get_set_list(self)

        :param self: :class:`UnionSet`
        :return: :class:`SetList`
        """

    def contains(self, space: Space) -> bool:
        """
        contains(self, space)

        :param self: :class:`UnionSet`
        :param space: :class:`Space`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def extract_set(self, space: Space) -> object:
        """
        extract_set(self, space)

        :param self: :class:`UnionSet`
        :param space: :class:`Space`
        :return: :class:`Set`
        """

    def isa_set(self) -> bool:
        """
        isa_set(self)

        :param self: :class:`UnionSet`
        :return: bool
        """

    def as_set(self) -> object:
        """
        as_set(self)

        :param self: :class:`UnionSet`
        :return: :class:`Set`
        """

    def foreach_point(self, fn: object) -> stat:
        """
        foreach_point(self, fn)

        :param self: :class:`UnionSet`
        :param fn: callback(pnt)
        :return: isl_stat
        """

    def sample(self) -> object:
        """
        sample(self)

        :param self: :class:`UnionSet`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sample_point(self) -> object:
        """
        sample_point(self)

        :param self: :class:`UnionSet`
        :return: :class:`Point`
        """

    @staticmethod
    def from_point(pnt: Point) -> object:
        """
        from_point(pnt)

        :param pnt: :class:`Point`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lift(self) -> object:
        """
        lift(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_lt_union_set(self, uset2: UnionSet) -> object:
        """
        lex_lt_union_set(self, uset2)

        :param self: :class:`UnionSet`
        :param uset2: :class:`UnionSet`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_le_union_set(self, uset2: UnionSet) -> object:
        """
        lex_le_union_set(self, uset2)

        :param self: :class:`UnionSet`
        :param uset2: :class:`UnionSet`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_gt_union_set(self, uset2: UnionSet) -> object:
        """
        lex_gt_union_set(self, uset2)

        :param self: :class:`UnionSet`
        :param uset2: :class:`UnionSet`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def lex_ge_union_set(self, uset2: UnionSet) -> object:
        """
        lex_ge_union_set(self, uset2)

        :param self: :class:`UnionSet`
        :param uset2: :class:`UnionSet`
        :return: :class:`UnionMap`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def coefficients(self) -> object:
        """
        coefficients(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def solutions(self) -> object:
        """
        solutions(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`UnionSet`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`UnionSet`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`UnionSet`
        :return: :class:`UnionSetList`
        """

    def compute_schedule(self, validity: UnionMap, proximity: UnionMap) -> object:
        """
        compute_schedule(self, validity, proximity)

        :param self: :class:`UnionSet`
        :param validity: :class:`UnionMap`
        :param proximity: :class:`UnionMap`
        :return: :class:`Schedule`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def min_multi_union_pw_aff(self, obj: MultiUnionPwAff) -> object:
        """
        min_multi_union_pw_aff(self, obj)

        :param self: :class:`UnionSet`
        :param obj: :class:`MultiUnionPwAff`
        :return: :class:`MultiVal`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class UnionSetList:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`UnionSetList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_union_set(el: UnionSet) -> object:
        """
        from_union_set(el)

        :param el: :class:`UnionSet`
        :return: :class:`UnionSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`UnionSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`UnionSetList`
        :return: :class:`UnionSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: UnionSet) -> object:
        """
        add(self, el)

        :param self: :class:`UnionSetList`
        :param el: :class:`UnionSet`
        :return: :class:`UnionSetList`
        """

    def insert(self, pos: int, el: UnionSet) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`UnionSetList`
        :param pos: :class:`unsigned`
        :param el: :class:`UnionSet`
        :return: :class:`UnionSetList`
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`UnionSetList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`UnionSetList`
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`UnionSetList`
        :return: :class:`UnionSetList`
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`UnionSetList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`UnionSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`UnionSetList`
        :return: :class:`UnionSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: UnionSetList) -> object:
        """
        concat(self, list2)

        :param self: :class:`UnionSetList`
        :param list2: :class:`UnionSetList`
        :return: :class:`UnionSetList`
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`UnionSetList`
        :return: isl_size
        """

    def n_union_set(self) -> int:
        """
        n_union_set(self)

        :param self: :class:`UnionSetList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`UnionSetList`
        :param index: :class:`int`
        :return: :class:`UnionSet`
        """

    def get_union_set(self, index: int) -> object:
        """
        get_union_set(self, index)

        :param self: :class:`UnionSetList`
        :param index: :class:`int`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: UnionSet) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`UnionSetList`
        :param index: :class:`int`
        :param el: :class:`UnionSet`
        :return: :class:`UnionSetList`
        """

    def set_union_set(self, index: int, el: UnionSet) -> object:
        """
        set_union_set(self, index, el)

        :param self: :class:`UnionSetList`
        :param index: :class:`int`
        :param el: :class:`UnionSet`
        :return: :class:`UnionSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`UnionSetList`
        :param fn: callback(el)
        :return: isl_stat
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`UnionSetList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`UnionSetList`
        :param fn: callback(el)
        :return: :class:`UnionSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`UnionSetList`
        :param cmp: callback(a, b)
        :return: :class:`UnionSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`UnionSetList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`UnionSetList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`UnionSetList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def union(self) -> object:
        """
        union(self)

        :param self: :class:`UnionSetList`
        :return: :class:`UnionSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Val:
    @overload
    def __init__(self, i: int, context: Context | None = None) -> None: ...

    @overload
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    @staticmethod
    def zero(ctx: Context) -> object:
        """
        zero(ctx)

        :param ctx: :class:`Context`
        :return: :class:`Val`
        """

    @staticmethod
    def one(ctx: Context) -> object:
        """
        one(ctx)

        :param ctx: :class:`Context`
        :return: :class:`Val`
        """

    @staticmethod
    def negone(ctx: Context) -> object:
        """
        negone(ctx)

        :param ctx: :class:`Context`
        :return: :class:`Val`
        """

    @staticmethod
    def nan(ctx: Context) -> object:
        """
        nan(ctx)

        :param ctx: :class:`Context`
        :return: :class:`Val`
        """

    @staticmethod
    def infty(ctx: Context) -> object:
        """
        infty(ctx)

        :param ctx: :class:`Context`
        :return: :class:`Val`
        """

    @staticmethod
    def neginfty(ctx: Context) -> object:
        """
        neginfty(ctx)

        :param ctx: :class:`Context`
        :return: :class:`Val`
        """

    @staticmethod
    def int_from_si(ctx: Context, i: int) -> object:
        """
        int_from_si(ctx, i)

        :param ctx: :class:`Context`
        :param i: :class:`long`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def int_from_ui(ctx: Context, u: int) -> object:
        """
        int_from_ui(ctx, u)

        :param ctx: :class:`Context`
        :param u: :class:`int`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`Val`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Val`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __hash__(self) -> int:
        """
        get_hash(self)

        :param self: :class:`Val`
        :return: uint32_t 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_num_si(self) -> int:
        """
        get_num_si(self)

        :param self: :class:`Val`
        :return: long
        """

    def get_den_val(self) -> object:
        """
        get_den_val(self)

        :param self: :class:`Val`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_d(self) -> float:
        """
        get_d(self)

        :param self: :class:`Val`
        :return: double 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def n_abs_num_chunks(self, size: int) -> int:
        """
        n_abs_num_chunks(self, size)

        :param self: :class:`Val`
        :param size: :class:`size_t`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_si(self, i: int) -> object:
        """
        set_si(self, i)

        :param self: :class:`Val`
        :param i: :class:`long`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def abs(self) -> object:
        """
        abs(self)

        :param self: :class:`Val`
        :return: :class:`Val`
        """

    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`Val`
        :return: :class:`Val`
        """

    def inv(self) -> object:
        """
        inv(self)

        :param self: :class:`Val`
        :return: :class:`Val`
        """

    def floor(self) -> object:
        """
        floor(self)

        :param self: :class:`Val`
        :return: :class:`Val`
        """

    def ceil(self) -> object:
        """
        ceil(self)

        :param self: :class:`Val`
        :return: :class:`Val`
        """

    def trunc(self) -> object:
        """
        trunc(self)

        :param self: :class:`Val`
        :return: :class:`Val`
        """

    def two_exp(self) -> object:
        """
        two_exp(self)

        :param self: :class:`Val`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def pow2(self) -> object:
        """
        pow2(self)

        :param self: :class:`Val`
        :return: :class:`Val`
        """

    def min(self, v2: object) -> object:
        """
        min(self, v2)

        :param self: :class:`Val`
        :param v2: :class:`Val`
        :return: :class:`Val`
        """

    def max(self, v2: object) -> object:
        """
        max(self, v2)

        :param self: :class:`Val`
        :param v2: :class:`Val`
        :return: :class:`Val`
        """

    def add(self, v2: object) -> object:
        """
        add(self, v2)

        :param self: :class:`Val`
        :param v2: :class:`Val`
        :return: :class:`Val`
        """

    def sub(self, v2: object) -> object:
        """
        sub(self, v2)

        :param self: :class:`Val`
        :param v2: :class:`Val`
        :return: :class:`Val`
        """

    def mul(self, v2: object) -> object:
        """
        mul(self, v2)

        :param self: :class:`Val`
        :param v2: :class:`Val`
        :return: :class:`Val`
        """

    def div(self, v2: object) -> object:
        """
        div(self, v2)

        :param self: :class:`Val`
        :param v2: :class:`Val`
        :return: :class:`Val`
        """

    def mod(self, v2: object) -> object:
        """
        mod(self, v2)

        :param self: :class:`Val`
        :param v2: :class:`Val`
        :return: :class:`Val`
        """

    def gcd(self, v2: object) -> object:
        """
        gcd(self, v2)

        :param self: :class:`Val`
        :param v2: :class:`Val`
        :return: :class:`Val`
        """

    def gcdext(self, v2: object) -> object:
        """
        gcdext(self, v2)

        :param self: :class:`Val`
        :param v2: :class:`Val`
        :return: tuple: (:class:`Val`, x (:class:`Val`), y (:class:`Val`))

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sgn(self) -> int:
        """
        sgn(self)

        :param self: :class:`Val`
        :return: int
        """

    def is_zero(self) -> bool:
        """
        is_zero(self)

        :param self: :class:`Val`
        :return: bool
        """

    def is_one(self) -> bool:
        """
        is_one(self)

        :param self: :class:`Val`
        :return: bool
        """

    def is_negone(self) -> bool:
        """
        is_negone(self)

        :param self: :class:`Val`
        :return: bool
        """

    def is_nonneg(self) -> bool:
        """
        is_nonneg(self)

        :param self: :class:`Val`
        :return: bool
        """

    def is_nonpos(self) -> bool:
        """
        is_nonpos(self)

        :param self: :class:`Val`
        :return: bool
        """

    def is_pos(self) -> bool:
        """
        is_pos(self)

        :param self: :class:`Val`
        :return: bool
        """

    def is_neg(self) -> bool:
        """
        is_neg(self)

        :param self: :class:`Val`
        :return: bool
        """

    def is_int(self) -> bool:
        """
        is_int(self)

        :param self: :class:`Val`
        :return: bool
        """

    def is_rat(self) -> bool:
        """
        is_rat(self)

        :param self: :class:`Val`
        :return: bool
        """

    def is_nan(self) -> bool:
        """
        is_nan(self)

        :param self: :class:`Val`
        :return: bool
        """

    def is_infty(self) -> bool:
        """
        is_infty(self)

        :param self: :class:`Val`
        :return: bool
        """

    def is_neginfty(self) -> bool:
        """
        is_neginfty(self)

        :param self: :class:`Val`
        :return: bool
        """

    def cmp_si(self, i: int) -> int:
        """
        cmp_si(self, i)

        :param self: :class:`Val`
        :param i: :class:`long`
        :return: int
        """

    def lt(self, v2: object) -> bool:
        """
        lt(self, v2)

        :param self: :class:`Val`
        :param v2: :class:`Val`
        :return: bool
        """

    def le(self, v2: object) -> bool:
        """
        le(self, v2)

        :param self: :class:`Val`
        :param v2: :class:`Val`
        :return: bool
        """

    def gt(self, v2: object) -> bool:
        """
        gt(self, v2)

        :param self: :class:`Val`
        :param v2: :class:`Val`
        :return: bool
        """

    def ge(self, v2: object) -> bool:
        """
        ge(self, v2)

        :param self: :class:`Val`
        :param v2: :class:`Val`
        :return: bool
        """

    def eq(self, v2: object) -> bool:
        """
        eq(self, v2)

        :param self: :class:`Val`
        :param v2: :class:`Val`
        :return: bool
        """

    def ne(self, v2: object) -> bool:
        """
        ne(self, v2)

        :param self: :class:`Val`
        :param v2: :class:`Val`
        :return: bool
        """

    def abs_eq(self, v2: object) -> bool:
        """
        abs_eq(self, v2)

        :param self: :class:`Val`
        :param v2: :class:`Val`
        :return: bool
        """

    def is_divisible_by(self, v2: object) -> bool:
        """
        is_divisible_by(self, v2)

        :param self: :class:`Val`
        :param v2: :class:`Val`
        :return: bool
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`Val`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`Val`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_list(self) -> object:
        """
        to_list(self)

        :param self: :class:`Val`
        :return: :class:`ValList`
        """

class ValList:
    def __init__(self, s: str, context: Context | None = None) -> None: ...

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`ValList`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def from_val(el: Val) -> object:
        """
        from_val(el)

        :param el: :class:`Val`
        :return: :class:`ValList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def alloc(ctx: Context, n: int) -> object:
        """
        alloc(ctx, n)

        :param ctx: :class:`Context`
        :param n: :class:`int`
        :return: :class:`ValList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`ValList`
        :return: :class:`ValList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, el: object) -> object:
        """
        add(self, el)

        :param self: :class:`ValList`
        :param el: :class:`Val`
        :return: :class:`ValList`
        """

    def insert(self, pos: int, el: object) -> object:
        """
        insert(self, pos, el)

        :param self: :class:`ValList`
        :param pos: :class:`unsigned`
        :param el: :class:`Val`
        :return: :class:`ValList`
        """

    def drop(self, first: int, n: int) -> object:
        """
        drop(self, first, n)

        :param self: :class:`ValList`
        :param first: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`ValList`
        """

    def clear(self) -> object:
        """
        clear(self)

        :param self: :class:`ValList`
        :return: :class:`ValList`
        """

    def swap(self, pos1: int, pos2: int) -> object:
        """
        swap(self, pos1, pos2)

        :param self: :class:`ValList`
        :param pos1: :class:`unsigned`
        :param pos2: :class:`unsigned`
        :return: :class:`ValList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def reverse(self) -> object:
        """
        reverse(self)

        :param self: :class:`ValList`
        :return: :class:`ValList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, list2: ValList) -> object:
        """
        concat(self, list2)

        :param self: :class:`ValList`
        :param list2: :class:`ValList`
        :return: :class:`ValList`
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`ValList`
        :return: isl_size
        """

    def n_val(self) -> int:
        """
        n_val(self)

        :param self: :class:`ValList`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_at(self, index: int) -> object:
        """
        get_at(self, index)

        :param self: :class:`ValList`
        :param index: :class:`int`
        :return: :class:`Val`
        """

    def get_val(self, index: int) -> object:
        """
        get_val(self, index)

        :param self: :class:`ValList`
        :param index: :class:`int`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_at(self, index: int, el: object) -> object:
        """
        set_at(self, index, el)

        :param self: :class:`ValList`
        :param index: :class:`int`
        :param el: :class:`Val`
        :return: :class:`ValList`
        """

    def set_val(self, index: int, el: object) -> object:
        """
        set_val(self, index, el)

        :param self: :class:`ValList`
        :param index: :class:`int`
        :param el: :class:`Val`
        :return: :class:`ValList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach(self, fn: object) -> stat:
        """
        foreach(self, fn)

        :param self: :class:`ValList`
        :param fn: callback(el)
        :return: isl_stat
        """

    def every(self, test: object) -> bool:
        """
        every(self, test)

        :param self: :class:`ValList`
        :param test: callback(el)
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def map(self, fn: object) -> object:
        """
        map(self, fn)

        :param self: :class:`ValList`
        :param fn: callback(el)
        :return: :class:`ValList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self, cmp: object) -> object:
        """
        sort(self, cmp)

        :param self: :class:`ValList`
        :param cmp: callback(a, b)
        :return: :class:`ValList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def to_str(self) -> object:
        """
        to_str(self)

        :param self: :class:`ValList`
        :return: string

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`ValList`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def read_from_str(ctx: Context, str: str) -> object:
        """
        read_from_str(ctx, str)

        :param ctx: :class:`Context`
        :param str: string
        :return: :class:`ValList`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Vec:
    @staticmethod
    def alloc(ctx: Context, size: int) -> object:
        """
        alloc(ctx, size)

        :param ctx: :class:`Context`
        :param size: :class:`unsigned`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    @staticmethod
    def zero(ctx: Context, size: int) -> object:
        """
        zero(ctx, size)

        :param ctx: :class:`Context`
        :param size: :class:`unsigned`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def copy(self) -> object:
        """
        copy(self)

        :param self: :class:`Vec`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Vec`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def __len__(self) -> int:
        """
        size(self)

        :param self: :class:`Vec`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_element_val(self, pos: int) -> object:
        """
        get_element_val(self, pos)

        :param self: :class:`Vec`
        :param pos: :class:`int`
        :return: :class:`Val`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_element_val(self, pos: int, v: object) -> object:
        """
        set_element_val(self, pos, v)

        :param self: :class:`Vec`
        :param pos: :class:`int`
        :param v: :class:`Val`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def is_equal(self, vec2: Vec) -> bool:
        """
        is_equal(self, vec2)

        :param self: :class:`Vec`
        :param vec2: :class:`Vec`
        :return: bool

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def cmp_element(self, vec2: Vec, pos: int) -> int:
        """
        cmp_element(self, vec2, pos)

        :param self: :class:`Vec`
        :param vec2: :class:`Vec`
        :param pos: :class:`int`
        :return: int 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def dump(self) -> None:
        """
        dump(self)

        :param self: :class:`Vec`
        :return: None

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def ceil(self) -> object:
        """
        ceil(self)

        :param self: :class:`Vec`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def normalize(self) -> object:
        """
        normalize(self)

        :param self: :class:`Vec`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def set_val(self, v: object) -> object:
        """
        set_val(self, v)

        :param self: :class:`Vec`
        :param v: :class:`Val`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def clr(self) -> object:
        """
        clr(self)

        :param self: :class:`Vec`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def neg(self) -> object:
        """
        neg(self)

        :param self: :class:`Vec`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add(self, vec2: Vec) -> object:
        """
        add(self, vec2)

        :param self: :class:`Vec`
        :param vec2: :class:`Vec`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def extend(self, size: int) -> object:
        """
        extend(self, size)

        :param self: :class:`Vec`
        :param size: :class:`unsigned`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def zero_extend(self, size: int) -> object:
        """
        zero_extend(self, size)

        :param self: :class:`Vec`
        :param size: :class:`unsigned`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def concat(self, vec2: Vec) -> object:
        """
        concat(self, vec2)

        :param self: :class:`Vec`
        :param vec2: :class:`Vec`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def sort(self) -> object:
        """
        sort(self)

        :param self: :class:`Vec`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def drop_els(self, pos: int, n: int) -> object:
        """
        drop_els(self, pos, n)

        :param self: :class:`Vec`
        :param pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def add_els(self, n: int) -> object:
        """
        add_els(self, n)

        :param self: :class:`Vec`
        :param n: :class:`unsigned`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_els(self, pos: int, n: int) -> object:
        """
        insert_els(self, pos, n)

        :param self: :class:`Vec`
        :param pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def insert_zero_els(self, pos: int, n: int) -> object:
        """
        insert_zero_els(self, pos, n)

        :param self: :class:`Vec`
        :param pos: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def move_els(self, dst_col: int, src_col: int, n: int) -> object:
        """
        move_els(self, dst_col, src_col, n)

        :param self: :class:`Vec`
        :param dst_col: :class:`unsigned`
        :param src_col: :class:`unsigned`
        :param n: :class:`unsigned`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def mat_product(self, mat: Mat) -> object:
        """
        mat_product(self, mat)

        :param self: :class:`Vec`
        :param mat: :class:`Mat`
        :return: :class:`Vec`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Vertex:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Vertex`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_id(self) -> int:
        """
        get_id(self)

        :param self: :class:`Vertex`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_domain(self) -> object:
        """
        get_domain(self)

        :param self: :class:`Vertex`
        :return: :class:`BasicSet`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_expr(self) -> object:
        """
        get_expr(self)

        :param self: :class:`Vertex`
        :return: :class:`MultiAff`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class Vertices:
    def get_ctx(self) -> object:
        """
        get_ctx(self)

        :param self: :class:`Vertices`
        :return: :class:`Context`

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def get_n_vertices(self) -> int:
        """
        get_n_vertices(self)

        :param self: :class:`Vertices`
        :return: isl_size 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_vertex(self, fn: object) -> stat:
        """
        foreach_vertex(self, fn)

        :param self: :class:`Vertices`
        :param fn: callback(vertex)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

    def foreach_cell(self, fn: object) -> stat:
        """
        foreach_cell(self, fn)

        :param self: :class:`Vertices`
        :param fn: callback(cell)
        :return: isl_stat 

        .. warning::

            This function is not part of the officially public isl API. Use at your own risk.
        """

class ast_expr_op_type(enum.Enum):
    error = -1

    and_then = 1

    or_else = 3

    max = 4

    min = 5

    minus = 6

    add = 7

    sub = 8

    mul = 9

    div = 10

    fdiv_q = 11

    pdiv_q = 12

    pdiv_r = 13

    zdiv_r = 14

    cond = 15

    select = 16

    eq = 17

    le = 18

    lt = 19

    ge = 20

    gt = 21

    call = 22

    access = 23

    member = 24

    address_of = 25

class ast_expr_type(enum.Enum):
    error = -1

    op = 0

    id = 1

    int = 2

class ast_loop_type(enum.Enum):
    error = -1

    default = 0

    atomic = 1

    unroll = 2

    separate = 3

class ast_node_type(enum.Enum):
    error = -1

    block = 3

    user = 5

    mark = 4

class bound:
    BERNSTEIN: int = 0

    RANGE: int = 1

class dim_type(enum.IntEnum):
    cst = 0

    param = 1

    out = 3

    set = 3

    div = 4

    all = 5

class error(enum.Enum):
    none = 0

    abort = 1

    alloc = 2

    unknown = 3

    internal = 4

    invalid = 5

    quota = 6

    unsupported = 7

class fold(enum.Enum):
    min = 0

    max = 1

    list = 2

class format:
    ISL: int = 0

    POLYLIB: int = 1

    POLYLIB_CONSTRAINTS: int = 2

    OMEGA: int = 3

    C: int = 4

    LATEX: int = 5

    EXT_POLYLIB: int = 6

def isl_version() -> str: ...

class on_error:
    WARN: int = 0

    CONTINUE: int = 1

    ABORT: int = 2

class schedule_algorithm:
    ISL: int = 0

    FEAUTRIER: int = 1

class schedule_node_type(enum.Enum):
    error = -1

    band = 0

    context = 1

    domain = 2

    expansion = 3

    extension = 4

    filter = 5

    leaf = 6

    guard = 7

    mark = 8

    sequence = 9

    set = 10

class stat(enum.Enum):
    error = -1

    ok = 0

class yaml_style:
    BLOCK: int = 0

    FLOW: int = 1
